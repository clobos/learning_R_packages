[["index.html", "Learning R packages 1 Intro 1.1 Carrega pacotes a serem usados 1.2 Alguns atalhos no Rstudio 1.3 Descrição dos dados mpg", " Learning R packages Cristian Villegas 2023-05-09 1 Intro 1.1 Carrega pacotes a serem usados #install.packages(&quot;tidyverse&quot;) #install.packages(&quot;dplyr&quot;) #install.packages(&quot;tidyr&quot;) #install.packages(&quot;ggplot2&quot;) library(tidyverse) # Manipulação de dados #library(dplyr) # Visualização de gráficos library(ggplot2) library(gridExtra) library(patchwork) library(plotly) library(esquisse) # Para dados gráfico de perfis library(nlme) Ver como citar referências Wickham et al. (2019), Wickham (2023), Wickham, Vaughan, and Girlich (2023), Wickham, Chang, et al. (2023), Wickham and Henry (2023), Wickham, François, et al. (2023), Xie (2023b), Xie (2023a) 1.2 Alguns atalhos no Rstudio Para considerar Operador Pipe (%&gt;%): Ctrl + Shift + M (Windows) ou Cmd + Shift + M (Mac). Criar novos chunks: Ctrl + Alt + I (Windows) ou Cmd + Option + I (Mac). 1.3 Descrição dos dados mpg Dados de economia de combustível de 1999 a 2008 para 38 modelos populares de carros. Este conjunto de dados contém um subconjunto dos dados de economia de combustível que a EPA disponibiliza em https://fueleconomy.gov/. Ele contém apenas modelos que tiveram um novo lançamento a cada ano entre 1999 e 2008 - isso foi usado como um substituto para a popularidade do carro. Um data frame com 234 linhas e 11 variáveis: manufacturer nome do fabricante model nome do modelo displ cilindrada do motor, em litros year ano de fabricação cyl número de cilindros trans tipo de transmissão drv o tipo de trem de força, onde f = tração dianteira, r = tração traseira e 4 = 4wd cty milhas urbanas por galão hwy milhas rodoviárias por galão fl tipo de combustível class “tipo” de carro #help(&quot;mpg&quot;) dados &lt;- mpg glimpse(dados) ## Rows: 234 ## Columns: 11 ## $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;… ## $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;, &quot;… ## $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.… ## $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200… ## $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, … ## $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)&quot;, &quot;auto… ## $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4… ## $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1… ## $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2… ## $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p… ## $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;c… dados &lt;- mutate(.data = dados, across(where(is.character), as.factor)) #View(df) glimpse(dados) ## Rows: 234 ## Columns: 11 ## $ manufacturer &lt;fct&gt; audi, audi, audi, audi, audi, audi, audi, audi, audi, aud… ## $ model &lt;fct&gt; a4, a4, a4, a4, a4, a4, a4, a4 quattro, a4 quattro, a4 qu… ## $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.… ## $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200… ## $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, … ## $ trans &lt;fct&gt; auto(l5), manual(m5), manual(m6), auto(av), auto(l5), man… ## $ drv &lt;fct&gt; f, f, f, f, f, f, f, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, r, … ## $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1… ## $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2… ## $ fl &lt;fct&gt; p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, r, … ## $ class &lt;fct&gt; compact, compact, compact, compact, compact, compact, com… References "],["dplyr-60-minutos.html", "2 dplyr (60 minutos) 2.1 Carrega pacotes a serem usados 2.2 Descrição dos dados mpg 2.3 Lista de funções do pacote dplyr 2.4 Operador Pipe 2.5 select() para colunas 2.6 rename() 2.7 mutate() para colunas 2.8 transmute() 2.9 filter() para linhas 2.10 slice() para linhas 2.11 arrange() para linhas 2.12 distinct() para linhas 2.13 summarise() 2.14 group_by() 2.15 count() 2.16 sample_n() 2.17 sample_frac()", " 2 dplyr (60 minutos) 2.1 Carrega pacotes a serem usados #install.packages(&quot;tidyverse&quot;) #install.packages(&quot;dplyr&quot;) #install.packages(&quot;tidyr&quot;) #install.packages(&quot;ggplot2&quot;) library(tidyverse) # Manipulação de dados #library(dplyr) # Visualização de gráficos library(ggplot2) library(gridExtra) library(patchwork) library(plotly) library(esquisse) # Para dados gráfico de perfis library(nlme) 2.2 Descrição dos dados mpg Dados de economia de combustível de 1999 a 2008 para 38 modelos populares de carros. Este conjunto de dados contém um subconjunto dos dados de economia de combustível que a EPA disponibiliza em https://fueleconomy.gov/. Ele contém apenas modelos que tiveram um novo lançamento a cada ano entre 1999 e 2008 - isso foi usado como um substituto para a popularidade do carro. Um data frame com 234 linhas e 11 variáveis: manufacturer nome do fabricante model nome do modelo displ cilindrada do motor, em litros year ano de fabricação cyl número de cilindros trans tipo de transmissão drv o tipo de trem de força, onde f = tração dianteira, r = tração traseira e 4 = 4wd cty milhas urbanas por galão hwy milhas rodoviárias por galão fl tipo de combustível class “tipo” de carro #help(&quot;mpg&quot;) library(tidyverse) dados &lt;- mpg glimpse(dados) ## Rows: 234 ## Columns: 11 ## $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;… ## $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;, &quot;… ## $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.… ## $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200… ## $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, … ## $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)&quot;, &quot;auto… ## $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4… ## $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1… ## $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2… ## $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p… ## $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;c… dados &lt;- mutate(.data = dados, across(where(is.character), as.factor)) #View(df) glimpse(dados) ## Rows: 234 ## Columns: 11 ## $ manufacturer &lt;fct&gt; audi, audi, audi, audi, audi, audi, audi, audi, audi, aud… ## $ model &lt;fct&gt; a4, a4, a4, a4, a4, a4, a4, a4 quattro, a4 quattro, a4 qu… ## $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.… ## $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200… ## $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, … ## $ trans &lt;fct&gt; auto(l5), manual(m5), manual(m6), auto(av), auto(l5), man… ## $ drv &lt;fct&gt; f, f, f, f, f, f, f, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, r, … ## $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1… ## $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2… ## $ fl &lt;fct&gt; p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, r, … ## $ class &lt;fct&gt; compact, compact, compact, compact, compact, compact, com… 2.3 Lista de funções do pacote dplyr ls(&quot;package:dplyr&quot;) ## [1] &quot;%&gt;%&quot; &quot;across&quot; &quot;add_count&quot; ## [4] &quot;add_count_&quot; &quot;add_row&quot; &quot;add_rownames&quot; ## [7] &quot;add_tally&quot; &quot;add_tally_&quot; &quot;all_equal&quot; ## [10] &quot;all_of&quot; &quot;all_vars&quot; &quot;anti_join&quot; ## [13] &quot;any_of&quot; &quot;any_vars&quot; &quot;arrange&quot; ## [16] &quot;arrange_&quot; &quot;arrange_all&quot; &quot;arrange_at&quot; ## [19] &quot;arrange_if&quot; &quot;as.tbl&quot; &quot;as_data_frame&quot; ## [22] &quot;as_label&quot; &quot;as_tibble&quot; &quot;auto_copy&quot; ## [25] &quot;band_instruments&quot; &quot;band_instruments2&quot; &quot;band_members&quot; ## [28] &quot;bench_tbls&quot; &quot;between&quot; &quot;bind_cols&quot; ## [31] &quot;bind_rows&quot; &quot;c_across&quot; &quot;case_match&quot; ## [34] &quot;case_when&quot; &quot;changes&quot; &quot;check_dbplyr&quot; ## [37] &quot;coalesce&quot; &quot;collapse&quot; &quot;collect&quot; ## [40] &quot;combine&quot; &quot;common_by&quot; &quot;compare_tbls&quot; ## [43] &quot;compare_tbls2&quot; &quot;compute&quot; &quot;consecutive_id&quot; ## [46] &quot;contains&quot; &quot;copy_to&quot; &quot;count&quot; ## [49] &quot;count_&quot; &quot;cross_join&quot; &quot;cumall&quot; ## [52] &quot;cumany&quot; &quot;cume_dist&quot; &quot;cummean&quot; ## [55] &quot;cur_column&quot; &quot;cur_data&quot; &quot;cur_data_all&quot; ## [58] &quot;cur_group&quot; &quot;cur_group_id&quot; &quot;cur_group_rows&quot; ## [61] &quot;current_vars&quot; &quot;data_frame&quot; &quot;db_analyze&quot; ## [64] &quot;db_begin&quot; &quot;db_commit&quot; &quot;db_create_index&quot; ## [67] &quot;db_create_indexes&quot; &quot;db_create_table&quot; &quot;db_data_type&quot; ## [70] &quot;db_desc&quot; &quot;db_drop_table&quot; &quot;db_explain&quot; ## [73] &quot;db_has_table&quot; &quot;db_insert_into&quot; &quot;db_list_tables&quot; ## [76] &quot;db_query_fields&quot; &quot;db_query_rows&quot; &quot;db_rollback&quot; ## [79] &quot;db_save_query&quot; &quot;db_write_table&quot; &quot;dense_rank&quot; ## [82] &quot;desc&quot; &quot;dim_desc&quot; &quot;distinct&quot; ## [85] &quot;distinct_&quot; &quot;distinct_all&quot; &quot;distinct_at&quot; ## [88] &quot;distinct_if&quot; &quot;distinct_prepare&quot; &quot;do&quot; ## [91] &quot;do_&quot; &quot;dplyr_col_modify&quot; &quot;dplyr_reconstruct&quot; ## [94] &quot;dplyr_row_slice&quot; &quot;ends_with&quot; &quot;enexpr&quot; ## [97] &quot;enexprs&quot; &quot;enquo&quot; &quot;enquos&quot; ## [100] &quot;ensym&quot; &quot;ensyms&quot; &quot;eval_tbls&quot; ## [103] &quot;eval_tbls2&quot; &quot;everything&quot; &quot;explain&quot; ## [106] &quot;expr&quot; &quot;failwith&quot; &quot;filter&quot; ## [109] &quot;filter_&quot; &quot;filter_all&quot; &quot;filter_at&quot; ## [112] &quot;filter_if&quot; &quot;first&quot; &quot;full_join&quot; ## [115] &quot;funs&quot; &quot;funs_&quot; &quot;glimpse&quot; ## [118] &quot;group_by&quot; &quot;group_by_&quot; &quot;group_by_all&quot; ## [121] &quot;group_by_at&quot; &quot;group_by_drop_default&quot; &quot;group_by_if&quot; ## [124] &quot;group_by_prepare&quot; &quot;group_cols&quot; &quot;group_data&quot; ## [127] &quot;group_indices&quot; &quot;group_indices_&quot; &quot;group_keys&quot; ## [130] &quot;group_map&quot; &quot;group_modify&quot; &quot;group_nest&quot; ## [133] &quot;group_rows&quot; &quot;group_size&quot; &quot;group_split&quot; ## [136] &quot;group_trim&quot; &quot;group_vars&quot; &quot;group_walk&quot; ## [139] &quot;grouped_df&quot; &quot;groups&quot; &quot;id&quot; ## [142] &quot;ident&quot; &quot;if_all&quot; &quot;if_any&quot; ## [145] &quot;if_else&quot; &quot;inner_join&quot; &quot;intersect&quot; ## [148] &quot;is.grouped_df&quot; &quot;is.src&quot; &quot;is.tbl&quot; ## [151] &quot;is_grouped_df&quot; &quot;join_by&quot; &quot;lag&quot; ## [154] &quot;last&quot; &quot;last_col&quot; &quot;last_dplyr_warnings&quot; ## [157] &quot;lead&quot; &quot;left_join&quot; &quot;location&quot; ## [160] &quot;lst&quot; &quot;make_tbl&quot; &quot;matches&quot; ## [163] &quot;min_rank&quot; &quot;mutate&quot; &quot;mutate_&quot; ## [166] &quot;mutate_all&quot; &quot;mutate_at&quot; &quot;mutate_each&quot; ## [169] &quot;mutate_each_&quot; &quot;mutate_if&quot; &quot;n&quot; ## [172] &quot;n_distinct&quot; &quot;n_groups&quot; &quot;na_if&quot; ## [175] &quot;near&quot; &quot;nest_by&quot; &quot;nest_join&quot; ## [178] &quot;new_grouped_df&quot; &quot;new_rowwise_df&quot; &quot;nth&quot; ## [181] &quot;ntile&quot; &quot;num_range&quot; &quot;one_of&quot; ## [184] &quot;order_by&quot; &quot;percent_rank&quot; &quot;pick&quot; ## [187] &quot;progress_estimated&quot; &quot;pull&quot; &quot;quo&quot; ## [190] &quot;quo_name&quot; &quot;quos&quot; &quot;recode&quot; ## [193] &quot;recode_factor&quot; &quot;reframe&quot; &quot;relocate&quot; ## [196] &quot;rename&quot; &quot;rename_&quot; &quot;rename_all&quot; ## [199] &quot;rename_at&quot; &quot;rename_if&quot; &quot;rename_vars&quot; ## [202] &quot;rename_vars_&quot; &quot;rename_with&quot; &quot;right_join&quot; ## [205] &quot;row_number&quot; &quot;rows_append&quot; &quot;rows_delete&quot; ## [208] &quot;rows_insert&quot; &quot;rows_patch&quot; &quot;rows_update&quot; ## [211] &quot;rows_upsert&quot; &quot;rowwise&quot; &quot;same_src&quot; ## [214] &quot;sample_frac&quot; &quot;sample_n&quot; &quot;select&quot; ## [217] &quot;select_&quot; &quot;select_all&quot; &quot;select_at&quot; ## [220] &quot;select_if&quot; &quot;select_var&quot; &quot;select_vars&quot; ## [223] &quot;select_vars_&quot; &quot;semi_join&quot; &quot;setdiff&quot; ## [226] &quot;setequal&quot; &quot;show_query&quot; &quot;slice&quot; ## [229] &quot;slice_&quot; &quot;slice_head&quot; &quot;slice_max&quot; ## [232] &quot;slice_min&quot; &quot;slice_sample&quot; &quot;slice_tail&quot; ## [235] &quot;sql&quot; &quot;sql_escape_ident&quot; &quot;sql_escape_string&quot; ## [238] &quot;sql_join&quot; &quot;sql_select&quot; &quot;sql_semi_join&quot; ## [241] &quot;sql_set_op&quot; &quot;sql_subquery&quot; &quot;sql_translate_env&quot; ## [244] &quot;src&quot; &quot;src_df&quot; &quot;src_local&quot; ## [247] &quot;src_mysql&quot; &quot;src_postgres&quot; &quot;src_sqlite&quot; ## [250] &quot;src_tbls&quot; &quot;starts_with&quot; &quot;starwars&quot; ## [253] &quot;storms&quot; &quot;summarise&quot; &quot;summarise_&quot; ## [256] &quot;summarise_all&quot; &quot;summarise_at&quot; &quot;summarise_each&quot; ## [259] &quot;summarise_each_&quot; &quot;summarise_if&quot; &quot;summarize&quot; ## [262] &quot;summarize_&quot; &quot;summarize_all&quot; &quot;summarize_at&quot; ## [265] &quot;summarize_each&quot; &quot;summarize_each_&quot; &quot;summarize_if&quot; ## [268] &quot;sym&quot; &quot;symdiff&quot; &quot;syms&quot; ## [271] &quot;tally&quot; &quot;tally_&quot; &quot;tbl&quot; ## [274] &quot;tbl_df&quot; &quot;tbl_nongroup_vars&quot; &quot;tbl_ptype&quot; ## [277] &quot;tbl_vars&quot; &quot;tibble&quot; &quot;top_frac&quot; ## [280] &quot;top_n&quot; &quot;transmute&quot; &quot;transmute_&quot; ## [283] &quot;transmute_all&quot; &quot;transmute_at&quot; &quot;transmute_if&quot; ## [286] &quot;tribble&quot; &quot;type_sum&quot; &quot;ungroup&quot; ## [289] &quot;union&quot; &quot;union_all&quot; &quot;validate_grouped_df&quot; ## [292] &quot;validate_rowwise_df&quot; &quot;vars&quot; &quot;where&quot; ## [295] &quot;with_groups&quot; &quot;with_order&quot; &quot;wrap_dbplyr_obj&quot; 2.4 Operador Pipe sqrt(log(44)) ## [1] 1.945299 44 %&gt;% log %&gt;% sqrt ## [1] 1.945299 2.5 select() para colunas select(dados, manufacturer, model, year) ## # A tibble: 234 × 3 ## manufacturer model year ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 audi a4 1999 ## 2 audi a4 1999 ## 3 audi a4 2008 ## 4 audi a4 2008 ## 5 audi a4 1999 ## 6 audi a4 1999 ## 7 audi a4 2008 ## 8 audi a4 quattro 1999 ## 9 audi a4 quattro 1999 ## 10 audi a4 quattro 2008 ## # … with 224 more rows select(dados, starts_with(&quot;m&quot;)) ## # A tibble: 234 × 2 ## manufacturer model ## &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 ## 2 audi a4 ## 3 audi a4 ## 4 audi a4 ## 5 audi a4 ## 6 audi a4 ## 7 audi a4 ## 8 audi a4 quattro ## 9 audi a4 quattro ## 10 audi a4 quattro ## # … with 224 more rows select(dados, contains(&quot;r&quot;)) ## # A tibble: 234 × 4 ## manufacturer year trans drv ## &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; ## 1 audi 1999 auto(l5) f ## 2 audi 1999 manual(m5) f ## 3 audi 2008 manual(m6) f ## 4 audi 2008 auto(av) f ## 5 audi 1999 auto(l5) f ## 6 audi 1999 manual(m5) f ## 7 audi 2008 auto(av) f ## 8 audi 1999 manual(m5) 4 ## 9 audi 1999 auto(l5) 4 ## 10 audi 2008 manual(m6) 4 ## # … with 224 more rows select(dados, ends_with(&quot;y&quot;)) ## # A tibble: 234 × 2 ## cty hwy ## &lt;int&gt; &lt;int&gt; ## 1 18 29 ## 2 21 29 ## 3 20 31 ## 4 21 30 ## 5 16 26 ## 6 18 26 ## 7 18 27 ## 8 18 26 ## 9 16 25 ## 10 20 28 ## # … with 224 more rows select(dados, matches(&quot;[abc]&quot;)) ## # A tibble: 234 × 6 ## manufacturer year cyl trans cty class ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; ## 1 audi 1999 4 auto(l5) 18 compact ## 2 audi 1999 4 manual(m5) 21 compact ## 3 audi 2008 4 manual(m6) 20 compact ## 4 audi 2008 4 auto(av) 21 compact ## 5 audi 1999 6 auto(l5) 16 compact ## 6 audi 1999 6 manual(m5) 18 compact ## 7 audi 2008 6 auto(av) 18 compact ## 8 audi 1999 4 manual(m5) 18 compact ## 9 audi 1999 4 auto(l5) 16 compact ## 10 audi 2008 4 manual(m6) 20 compact ## # … with 224 more rows select(dados, starts_with(&quot;m&quot;), starts_with(&quot;c&quot;)) ## # A tibble: 234 × 5 ## manufacturer model cyl cty class ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; ## 1 audi a4 4 18 compact ## 2 audi a4 4 21 compact ## 3 audi a4 4 20 compact ## 4 audi a4 4 21 compact ## 5 audi a4 6 16 compact ## 6 audi a4 6 18 compact ## 7 audi a4 6 18 compact ## 8 audi a4 quattro 4 18 compact ## 9 audi a4 quattro 4 16 compact ## 10 audi a4 quattro 4 20 compact ## # … with 224 more rows select(dados, ends_with(&quot;l&quot;), ends_with(&quot;s&quot;)) ## # A tibble: 234 × 6 ## model displ cyl fl trans class ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 a4 1.8 4 p auto(l5) compact ## 2 a4 1.8 4 p manual(m5) compact ## 3 a4 2 4 p manual(m6) compact ## 4 a4 2 4 p auto(av) compact ## 5 a4 2.8 6 p auto(l5) compact ## 6 a4 2.8 6 p manual(m5) compact ## 7 a4 3.1 6 p auto(av) compact ## 8 a4 quattro 1.8 4 p manual(m5) compact ## 9 a4 quattro 1.8 4 p auto(l5) compact ## 10 a4 quattro 2 4 p manual(m6) compact ## # … with 224 more rows select(dados, 1:3) ## # A tibble: 234 × 3 ## manufacturer model displ ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 ## 2 audi a4 1.8 ## 3 audi a4 2 ## 4 audi a4 2 ## 5 audi a4 2.8 ## 6 audi a4 2.8 ## 7 audi a4 3.1 ## 8 audi a4 quattro 1.8 ## 9 audi a4 quattro 1.8 ## 10 audi a4 quattro 2 ## # … with 224 more rows select(dados, c(2,5,7)) ## # A tibble: 234 × 3 ## model cyl drv ## &lt;fct&gt; &lt;int&gt; &lt;fct&gt; ## 1 a4 4 f ## 2 a4 4 f ## 3 a4 4 f ## 4 a4 4 f ## 5 a4 6 f ## 6 a4 6 f ## 7 a4 6 f ## 8 a4 quattro 4 4 ## 9 a4 quattro 4 4 ## 10 a4 quattro 4 4 ## # … with 224 more rows select(dados, manufacturer:cyl) ## # A tibble: 234 × 5 ## manufacturer model displ year cyl ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 audi a4 1.8 1999 4 ## 2 audi a4 1.8 1999 4 ## 3 audi a4 2 2008 4 ## 4 audi a4 2 2008 4 ## 5 audi a4 2.8 1999 6 ## 6 audi a4 2.8 1999 6 ## 7 audi a4 3.1 2008 6 ## 8 audi a4 quattro 1.8 1999 4 ## 9 audi a4 quattro 1.8 1999 4 ## 10 audi a4 quattro 2 2008 4 ## # … with 224 more rows select(dados,-(manufacturer:cyl)) ## # A tibble: 234 × 6 ## trans drv cty hwy fl class ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; ## 1 auto(l5) f 18 29 p compact ## 2 manual(m5) f 21 29 p compact ## 3 manual(m6) f 20 31 p compact ## 4 auto(av) f 21 30 p compact ## 5 auto(l5) f 16 26 p compact ## 6 manual(m5) f 18 26 p compact ## 7 auto(av) f 18 27 p compact ## 8 manual(m5) 4 18 26 p compact ## 9 auto(l5) 4 16 25 p compact ## 10 manual(m6) 4 20 28 p compact ## # … with 224 more rows 2.6 rename() dados1 &lt;- rename(dados, mnfc = manufacturer, mod = model) dados1 ## # A tibble: 234 × 11 ## mnfc mod displ year cyl trans drv cty hwy fl class ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact ## 3 audi a4 2 2008 4 manual(m6) f 20 31 p compact ## 4 audi a4 2 2008 4 auto(av) f 21 30 p compact ## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact ## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compact ## 7 audi a4 3.1 2008 6 auto(av) f 18 27 p compact ## 8 audi a4 quattro 1.8 1999 4 manual(m5) 4 18 26 p compact ## 9 audi a4 quattro 1.8 1999 4 auto(l5) 4 16 25 p compact ## 10 audi a4 quattro 2 2008 4 manual(m6) 4 20 28 p compact ## # … with 224 more rows select(dados, mnfc = manufacturer, mod = model) ## # A tibble: 234 × 2 ## mnfc mod ## &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 ## 2 audi a4 ## 3 audi a4 ## 4 audi a4 ## 5 audi a4 ## 6 audi a4 ## 7 audi a4 ## 8 audi a4 quattro ## 9 audi a4 quattro ## 10 audi a4 quattro ## # … with 224 more rows select(dados, mnfc = manufacturer, mod = model, everything()) ## # A tibble: 234 × 11 ## mnfc mod displ year cyl trans drv cty hwy fl class ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact ## 3 audi a4 2 2008 4 manual(m6) f 20 31 p compact ## 4 audi a4 2 2008 4 auto(av) f 21 30 p compact ## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact ## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compact ## 7 audi a4 3.1 2008 6 auto(av) f 18 27 p compact ## 8 audi a4 quattro 1.8 1999 4 manual(m5) 4 18 26 p compact ## 9 audi a4 quattro 1.8 1999 4 auto(l5) 4 16 25 p compact ## 10 audi a4 quattro 2 2008 4 manual(m6) 4 20 28 p compact ## # … with 224 more rows 2.7 mutate() para colunas mutate(dados, sqrt_cty = sqrt(cty)) ## # A tibble: 234 × 12 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## # … with 224 more rows, and abbreviated variable names ¹​manufacturer, ²​sqrt_cty names(dados) ## [1] &quot;manufacturer&quot; &quot;model&quot; &quot;displ&quot; &quot;year&quot; &quot;cyl&quot; ## [6] &quot;trans&quot; &quot;drv&quot; &quot;cty&quot; &quot;hwy&quot; &quot;fl&quot; ## [11] &quot;class&quot; dados&lt;- mutate(dados, sqrt_cty = sqrt(cty)) names(dados) ## [1] &quot;manufacturer&quot; &quot;model&quot; &quot;displ&quot; &quot;year&quot; &quot;cyl&quot; ## [6] &quot;trans&quot; &quot;drv&quot; &quot;cty&quot; &quot;hwy&quot; &quot;fl&quot; ## [11] &quot;class&quot; &quot;sqrt_cty&quot; dados &lt;- mutate(dados, `soma de variáveis` = (cty + hwy) / 2) names(dados) ## [1] &quot;manufacturer&quot; &quot;model&quot; &quot;displ&quot; ## [4] &quot;year&quot; &quot;cyl&quot; &quot;trans&quot; ## [7] &quot;drv&quot; &quot;cty&quot; &quot;hwy&quot; ## [10] &quot;fl&quot; &quot;class&quot; &quot;sqrt_cty&quot; ## [13] &quot;soma de variáveis&quot; dados &lt;- mutate(dados, car = paste(manufacturer, model, sep = &quot; &quot;), `cyl / trans` = paste(cyl, &quot; cylinders&quot;, &quot; / &quot;, trans, &quot; transmission&quot;, sep = &quot;&quot;)) dados ## # A tibble: 234 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## # … with 224 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty 2.8 transmute() transmute(dados, `avg miles per gallon` = (cty + hwy) / 2) ## # A tibble: 234 × 1 ## `avg miles per gallon` ## &lt;dbl&gt; ## 1 23.5 ## 2 25 ## 3 25.5 ## 4 25.5 ## 5 21 ## 6 22 ## 7 22.5 ## 8 22 ## 9 20.5 ## 10 24 ## # … with 224 more rows transmute(dados, car = paste(manufacturer, model, sep = &quot; &quot;), `cyl / trans` = paste(cyl, &quot; cylinders&quot;, &quot; / &quot;, trans, &quot; transmission&quot;, sep = &quot;&quot;)) ## # A tibble: 234 × 2 ## car `cyl / trans` ## &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 4 cylinders / auto(l5) transmission ## 2 audi a4 4 cylinders / manual(m5) transmission ## 3 audi a4 4 cylinders / manual(m6) transmission ## 4 audi a4 4 cylinders / auto(av) transmission ## 5 audi a4 6 cylinders / auto(l5) transmission ## 6 audi a4 6 cylinders / manual(m5) transmission ## 7 audi a4 6 cylinders / auto(av) transmission ## 8 audi a4 quattro 4 cylinders / manual(m5) transmission ## 9 audi a4 quattro 4 cylinders / auto(l5) transmission ## 10 audi a4 quattro 4 cylinders / manual(m6) transmission ## # … with 224 more rows 2.9 filter() para linhas filter(dados, manufacturer == &quot;audi&quot;) ## # A tibble: 18 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## 11 audi a4 q… 2 2008 4 auto… 4 19 27 p comp… 4.36 ## 12 audi a4 q… 2.8 1999 6 auto… 4 15 25 p comp… 3.87 ## 13 audi a4 q… 2.8 1999 6 manu… 4 17 25 p comp… 4.12 ## 14 audi a4 q… 3.1 2008 6 auto… 4 17 25 p comp… 4.12 ## 15 audi a4 q… 3.1 2008 6 manu… 4 15 25 p comp… 3.87 ## 16 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## 17 audi a6 q… 3.1 2008 6 auto… 4 17 25 p mids… 4.12 ## 18 audi a6 q… 4.2 2008 8 auto… 4 16 23 p mids… 4 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty filter(dados, manufacturer == &quot;audi&quot; &amp; year == &quot;1999&quot;) ## # A tibble: 9 × 15 ## manufact…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 4 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 5 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 6 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 7 audi a4 q… 2.8 1999 6 auto… 4 15 25 p comp… 3.87 ## 8 audi a4 q… 2.8 1999 6 manu… 4 17 25 p comp… 4.12 ## 9 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty filter(dados, manufacturer == &quot;audi&quot;, year == 1999) ## # A tibble: 9 × 15 ## manufact…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 4 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 5 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 6 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 7 audi a4 q… 2.8 1999 6 auto… 4 15 25 p comp… 3.87 ## 8 audi a4 q… 2.8 1999 6 manu… 4 17 25 p comp… 4.12 ## 9 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty filter(dados, manufacturer == &quot;audi&quot; | manufacturer == &quot;dodge&quot;) %&gt;% print(n = 20) ## # A tibble: 55 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## 11 audi a4 q… 2 2008 4 auto… 4 19 27 p comp… 4.36 ## 12 audi a4 q… 2.8 1999 6 auto… 4 15 25 p comp… 3.87 ## 13 audi a4 q… 2.8 1999 6 manu… 4 17 25 p comp… 4.12 ## 14 audi a4 q… 3.1 2008 6 auto… 4 17 25 p comp… 4.12 ## 15 audi a4 q… 3.1 2008 6 manu… 4 15 25 p comp… 3.87 ## 16 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## 17 audi a6 q… 3.1 2008 6 auto… 4 17 25 p mids… 4.12 ## 18 audi a6 q… 4.2 2008 8 auto… 4 16 23 p mids… 4 ## 19 dodge cara… 2.4 1999 4 auto… f 18 24 r mini… 4.24 ## 20 dodge cara… 3 1999 6 auto… f 17 24 r mini… 4.12 ## # … with 35 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty filter(dados, manufacturer %in% c(&quot;audi&quot;, &quot;dodge&quot;)) %&gt;% print(n = 20) ## # A tibble: 55 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## 11 audi a4 q… 2 2008 4 auto… 4 19 27 p comp… 4.36 ## 12 audi a4 q… 2.8 1999 6 auto… 4 15 25 p comp… 3.87 ## 13 audi a4 q… 2.8 1999 6 manu… 4 17 25 p comp… 4.12 ## 14 audi a4 q… 3.1 2008 6 auto… 4 17 25 p comp… 4.12 ## 15 audi a4 q… 3.1 2008 6 manu… 4 15 25 p comp… 3.87 ## 16 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## 17 audi a6 q… 3.1 2008 6 auto… 4 17 25 p mids… 4.12 ## 18 audi a6 q… 4.2 2008 8 auto… 4 16 23 p mids… 4 ## 19 dodge cara… 2.4 1999 4 auto… f 18 24 r mini… 4.24 ## 20 dodge cara… 3 1999 6 auto… f 17 24 r mini… 4.12 ## # … with 35 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty filter(dados, hwy &gt;= 30) %&gt;% select(hwy) %&gt;% print(n = 26) ## # A tibble: 26 × 1 ## hwy ## &lt;int&gt; ## 1 31 ## 2 30 ## 3 30 ## 4 33 ## 5 32 ## 6 32 ## 7 32 ## 8 34 ## 9 36 ## 10 36 ## 11 30 ## 12 31 ## 13 31 ## 14 32 ## 15 31 ## 16 31 ## 17 31 ## 18 31 ## 19 30 ## 20 33 ## 21 35 ## 22 37 ## 23 35 ## 24 44 ## 25 44 ## 26 41 filter(dados, year != 1999) %&gt;% select(year) %&gt;% print(n = 30) ## # A tibble: 117 × 1 ## year ## &lt;int&gt; ## 1 2008 ## 2 2008 ## 3 2008 ## 4 2008 ## 5 2008 ## 6 2008 ## 7 2008 ## 8 2008 ## 9 2008 ## 10 2008 ## 11 2008 ## 12 2008 ## 13 2008 ## 14 2008 ## 15 2008 ## 16 2008 ## 17 2008 ## 18 2008 ## 19 2008 ## 20 2008 ## 21 2008 ## 22 2008 ## 23 2008 ## 24 2008 ## 25 2008 ## 26 2008 ## 27 2008 ## 28 2008 ## 29 2008 ## 30 2008 ## # … with 87 more rows filter(dados, between(cty,15, 22)) ## # A tibble: 143 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## # … with 133 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty 2.10 slice() para linhas slice(dados, 1:5) ## # A tibble: 5 × 15 ## manufact…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty # dados[1:5,] slice(dados, 20:30) ## # A tibble: 11 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 chevrolet c150… 5.3 2008 8 auto… r 11 15 e suv 3.32 ## 2 chevrolet c150… 5.3 2008 8 auto… r 14 20 r suv 3.74 ## 3 chevrolet c150… 5.7 1999 8 auto… r 13 17 r suv 3.61 ## 4 chevrolet c150… 6 2008 8 auto… r 12 17 r suv 3.46 ## 5 chevrolet corv… 5.7 1999 8 manu… r 16 26 p 2sea… 4 ## 6 chevrolet corv… 5.7 1999 8 auto… r 15 23 p 2sea… 3.87 ## 7 chevrolet corv… 6.2 2008 8 manu… r 16 26 p 2sea… 4 ## 8 chevrolet corv… 6.2 2008 8 auto… r 15 25 p 2sea… 3.87 ## 9 chevrolet corv… 7 2008 8 manu… r 15 24 p 2sea… 3.87 ## 10 chevrolet k150… 5.3 2008 8 auto… 4 14 19 r suv 3.74 ## 11 chevrolet k150… 5.3 2008 8 auto… 4 11 14 e suv 3.32 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty # dados[20:30,] 2.11 arrange() para linhas # ordenar &quot;displ&quot; de menor a maior arrange(dados, displ) ## # A tibble: 234 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 honda civic 1.6 1999 4 manu… f 28 33 r subc… 5.29 ## 2 honda civic 1.6 1999 4 auto… f 24 32 r subc… 4.90 ## 3 honda civic 1.6 1999 4 manu… f 25 32 r subc… 5 ## 4 honda civic 1.6 1999 4 manu… f 23 29 p subc… 4.80 ## 5 honda civic 1.6 1999 4 auto… f 24 32 r subc… 4.90 ## 6 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 7 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 honda civic 1.8 2008 4 manu… f 26 34 r subc… 5.10 ## # … with 224 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty arrange(dados, displ) %&gt;% print(n=20) ## # A tibble: 234 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 honda civic 1.6 1999 4 manu… f 28 33 r subc… 5.29 ## 2 honda civic 1.6 1999 4 auto… f 24 32 r subc… 4.90 ## 3 honda civic 1.6 1999 4 manu… f 25 32 r subc… 5 ## 4 honda civic 1.6 1999 4 manu… f 23 29 p subc… 4.80 ## 5 honda civic 1.6 1999 4 auto… f 24 32 r subc… 4.90 ## 6 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 7 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 honda civic 1.8 2008 4 manu… f 26 34 r subc… 5.10 ## 11 honda civic 1.8 2008 4 auto… f 25 36 r subc… 5 ## 12 honda civic 1.8 2008 4 auto… f 24 36 c subc… 4.90 ## 13 toyota coro… 1.8 1999 4 auto… f 24 30 r comp… 4.90 ## 14 toyota coro… 1.8 1999 4 auto… f 24 33 r comp… 4.90 ## 15 toyota coro… 1.8 1999 4 manu… f 26 35 r comp… 5.10 ## 16 toyota coro… 1.8 2008 4 manu… f 28 37 r comp… 5.29 ## 17 toyota coro… 1.8 2008 4 auto… f 26 35 r comp… 5.10 ## 18 volkswag… pass… 1.8 1999 4 manu… f 21 29 p mids… 4.58 ## 19 volkswag… pass… 1.8 1999 4 auto… f 18 29 p mids… 4.24 ## 20 volkswag… jetta 1.9 1999 4 manu… f 33 44 d comp… 5.74 ## # … with 214 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty # ordenar &quot;displ&quot; de maior a menor arrange(dados, desc(displ)) ## # A tibble: 234 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 chevrolet corv… 7 2008 8 manu… r 15 24 p 2sea… 3.87 ## 2 chevrolet k150… 6.5 1999 8 auto… 4 14 17 d suv 3.74 ## 3 chevrolet corv… 6.2 2008 8 manu… r 16 26 p 2sea… 4 ## 4 chevrolet corv… 6.2 2008 8 auto… r 15 25 p 2sea… 3.87 ## 5 jeep gran… 6.1 2008 8 auto… 4 11 14 p suv 3.32 ## 6 chevrolet c150… 6 2008 8 auto… r 12 17 r suv 3.46 ## 7 dodge dura… 5.9 1999 8 auto… 4 11 15 r suv 3.32 ## 8 dodge ram … 5.9 1999 8 auto… 4 11 15 r pick… 3.32 ## 9 chevrolet c150… 5.7 1999 8 auto… r 13 17 r suv 3.61 ## 10 chevrolet corv… 5.7 1999 8 manu… r 16 26 p 2sea… 4 ## # … with 224 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty arrange(dados, desc(displ)) %&gt;% print(n=20) ## # A tibble: 234 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 chevrolet corv… 7 2008 8 manu… r 15 24 p 2sea… 3.87 ## 2 chevrolet k150… 6.5 1999 8 auto… 4 14 17 d suv 3.74 ## 3 chevrolet corv… 6.2 2008 8 manu… r 16 26 p 2sea… 4 ## 4 chevrolet corv… 6.2 2008 8 auto… r 15 25 p 2sea… 3.87 ## 5 jeep gran… 6.1 2008 8 auto… 4 11 14 p suv 3.32 ## 6 chevrolet c150… 6 2008 8 auto… r 12 17 r suv 3.46 ## 7 dodge dura… 5.9 1999 8 auto… 4 11 15 r suv 3.32 ## 8 dodge ram … 5.9 1999 8 auto… 4 11 15 r pick… 3.32 ## 9 chevrolet c150… 5.7 1999 8 auto… r 13 17 r suv 3.61 ## 10 chevrolet corv… 5.7 1999 8 manu… r 16 26 p 2sea… 4 ## 11 chevrolet corv… 5.7 1999 8 auto… r 15 23 p 2sea… 3.87 ## 12 chevrolet k150… 5.7 1999 8 auto… 4 11 15 r suv 3.32 ## 13 dodge dura… 5.7 2008 8 auto… 4 13 18 r suv 3.61 ## 14 dodge ram … 5.7 2008 8 auto… 4 13 17 r pick… 3.61 ## 15 jeep gran… 5.7 2008 8 auto… 4 13 18 r suv 3.61 ## 16 toyota land… 5.7 2008 8 auto… 4 13 18 r suv 3.61 ## 17 nissan path… 5.6 2008 8 auto… 4 12 18 p suv 3.46 ## 18 ford expe… 5.4 1999 8 auto… r 11 17 r suv 3.32 ## 19 ford expe… 5.4 2008 8 auto… r 12 18 r suv 3.46 ## 20 ford f150… 5.4 1999 8 auto… 4 11 15 r pick… 3.32 ## # … with 214 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty select(dados, displ, cty) %&gt;% arrange(displ, cty) %&gt;% print(n = 20) ## # A tibble: 234 × 2 ## displ cty ## &lt;dbl&gt; &lt;int&gt; ## 1 1.6 23 ## 2 1.6 24 ## 3 1.6 24 ## 4 1.6 25 ## 5 1.6 28 ## 6 1.8 16 ## 7 1.8 18 ## 8 1.8 18 ## 9 1.8 18 ## 10 1.8 21 ## 11 1.8 21 ## 12 1.8 24 ## 13 1.8 24 ## 14 1.8 24 ## 15 1.8 25 ## 16 1.8 26 ## 17 1.8 26 ## 18 1.8 26 ## 19 1.8 28 ## 20 1.9 29 ## # … with 214 more rows select(dados, displ, cty) %&gt;% arrange(displ, desc(cty)) %&gt;% print(n = 20) ## # A tibble: 234 × 2 ## displ cty ## &lt;dbl&gt; &lt;int&gt; ## 1 1.6 28 ## 2 1.6 25 ## 3 1.6 24 ## 4 1.6 24 ## 5 1.6 23 ## 6 1.8 28 ## 7 1.8 26 ## 8 1.8 26 ## 9 1.8 26 ## 10 1.8 25 ## 11 1.8 24 ## 12 1.8 24 ## 13 1.8 24 ## 14 1.8 21 ## 15 1.8 21 ## 16 1.8 18 ## 17 1.8 18 ## 18 1.8 18 ## 19 1.8 16 ## 20 1.9 35 ## # … with 214 more rows 2.12 distinct() para linhas dados_exemplo &lt;- data.frame(id = 1:3, name = c(&quot;John&quot;, &quot;Max&quot;, &quot;Julia&quot;)) dados_exemplo ## id name ## 1 1 John ## 2 2 Max ## 3 3 Julia # bind_rows == rbind() dados_exemplo&lt;- bind_rows(dados_exemplo, slice(dados_exemplo, 2)) dados_exemplo ## id name ## 1 1 John ## 2 2 Max ## 3 3 Julia ## 4 2 Max distinct(dados_exemplo) ## id name ## 1 1 John ## 2 2 Max ## 3 3 Julia dados_exemplo2 &lt;- data.frame(id = c(1,1,2), name = c(&quot;John&quot;, &quot;Max&quot;, &quot;Julia&quot;)) dados_exemplo2 ## id name ## 1 1 John ## 2 1 Max ## 3 2 Julia distinct(dados_exemplo2) ## id name ## 1 1 John ## 2 1 Max ## 3 2 Julia dados_duplicados &lt;- select(dados, manufacturer, model) dados_duplicados ## # A tibble: 234 × 2 ## manufacturer model ## &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 ## 2 audi a4 ## 3 audi a4 ## 4 audi a4 ## 5 audi a4 ## 6 audi a4 ## 7 audi a4 ## 8 audi a4 quattro ## 9 audi a4 quattro ## 10 audi a4 quattro ## # … with 224 more rows dados_nao_duplicados &lt;- distinct(dados_duplicados) dados_nao_duplicados ## # A tibble: 38 × 2 ## manufacturer model ## &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 ## 2 audi a4 quattro ## 3 audi a6 quattro ## 4 chevrolet c1500 suburban 2wd ## 5 chevrolet corvette ## 6 chevrolet k1500 tahoe 4wd ## 7 chevrolet malibu ## 8 dodge caravan 2wd ## 9 dodge dakota pickup 4wd ## 10 dodge durango 4wd ## # … with 28 more rows 2.13 summarise() summarise(dados, `média hwy` = mean(hwy)) ## # A tibble: 1 × 1 ## `média hwy` ## &lt;dbl&gt; ## 1 23.4 summarise(dados, `num. de dados` = n(), `num. modelos` = n_distinct(model)) ## # A tibble: 1 × 2 ## `num. de dados` `num. modelos` ## &lt;int&gt; &lt;int&gt; ## 1 234 38 # levels(dados$model) summarise(dados, `mín. hwy` = min(hwy, na.rm = TRUE), `mín. cty` = min(cty, na.rm = TRUE), `máx. hwy` = max(hwy, na.rm = TRUE), `máx. cty` = max(cty, na.rm = TRUE)) ## # A tibble: 1 × 4 ## `mín. hwy` `mín. cty` `máx. hwy` `máx. cty` ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 12 9 44 35 dados %&gt;% summarise_at(c(&quot;hwy&quot;, &quot;cty&quot;), list(min, max), na.rm = TRUE) ## # A tibble: 1 × 4 ## hwy_fn1 cty_fn1 hwy_fn2 cty_fn2 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 12 9 44 35 dados %&gt;% summarise_if(is.numeric, list(min, max), na.rm = TRUE) ## # A tibble: 1 × 14 ## displ_fn1 year_fn1 cyl_fn1 cty_fn1 hwy_fn1 sqrt_cty_…¹ soma …² displ…³ year_…⁴ ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1.6 1999 4 9 12 3 10.5 7 2008 ## # … with 5 more variables: cyl_fn2 &lt;int&gt;, cty_fn2 &lt;int&gt;, hwy_fn2 &lt;int&gt;, ## # sqrt_cty_fn2 &lt;dbl&gt;, `soma de variáveis_fn2` &lt;dbl&gt;, and abbreviated variable ## # names ¹​sqrt_cty_fn1, ²​`soma de variáveis_fn1`, ³​displ_fn2, ⁴​year_fn2 dados %&gt;% summarise_if(is.numeric, min, na.rm = TRUE) ## # A tibble: 1 × 7 ## displ year cyl cty hwy sqrt_cty `soma de variáveis` ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.6 1999 4 9 12 3 10.5 dados %&gt;% summarise_if(is.numeric, max, na.rm = TRUE) ## # A tibble: 1 × 7 ## displ year cyl cty hwy sqrt_cty `soma de variáveis` ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 7 2008 8 35 44 5.92 39.5 Tiago&lt;- function(dados){ sd(dados)/mean(dados) } dados %&gt;% summarise_if(is.numeric, Tiago) ## # A tibble: 1 × 7 ## displ year cyl cty hwy sqrt_cty `soma de variáveis` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.372 0.00225 0.274 0.252 0.254 0.125 0.251 2.14 group_by() group_by(dados, manufacturer) ## # A tibble: 234 × 15 ## # Groups: manufacturer [15] ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## # … with 224 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty dados %&gt;% group_by(manufacturer) %&gt;% summarise(`num. carros` = n()) ## # A tibble: 15 × 2 ## manufacturer `num. carros` ## &lt;fct&gt; &lt;int&gt; ## 1 audi 18 ## 2 chevrolet 19 ## 3 dodge 37 ## 4 ford 25 ## 5 honda 9 ## 6 hyundai 14 ## 7 jeep 8 ## 8 land rover 4 ## 9 lincoln 3 ## 10 mercury 4 ## 11 nissan 13 ## 12 pontiac 5 ## 13 subaru 14 ## 14 toyota 34 ## 15 volkswagen 27 dados %&gt;% group_by(model) %&gt;% summarise(`média hwy` = mean(hwy), `min. hwy` = min(hwy), `max. hwy` = max(hwy)) ## # A tibble: 38 × 4 ## model `média hwy` `min. hwy` `max. hwy` ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 4runner 4wd 18.8 17 20 ## 2 a4 28.3 26 31 ## 3 a4 quattro 25.8 25 28 ## 4 a6 quattro 24 23 25 ## 5 altima 28.7 26 32 ## 6 c1500 suburban 2wd 17.8 15 20 ## 7 camry 28.3 26 31 ## 8 camry solara 28.1 26 31 ## 9 caravan 2wd 22.4 17 24 ## 10 civic 32.6 29 36 ## # … with 28 more rows 2.15 count() count(dados) ## # A tibble: 1 × 1 ## n ## &lt;int&gt; ## 1 234 dados %&gt;% group_by(manufacturer) %&gt;% count() ## # A tibble: 15 × 2 ## # Groups: manufacturer [15] ## manufacturer n ## &lt;fct&gt; &lt;int&gt; ## 1 audi 18 ## 2 chevrolet 19 ## 3 dodge 37 ## 4 ford 25 ## 5 honda 9 ## 6 hyundai 14 ## 7 jeep 8 ## 8 land rover 4 ## 9 lincoln 3 ## 10 mercury 4 ## 11 nissan 13 ## 12 pontiac 5 ## 13 subaru 14 ## 14 toyota 34 ## 15 volkswagen 27 # Equivalente com o código anterior dados %&gt;% group_by(manufacturer) %&gt;% summarise(cars = n()) ## # A tibble: 15 × 2 ## manufacturer cars ## &lt;fct&gt; &lt;int&gt; ## 1 audi 18 ## 2 chevrolet 19 ## 3 dodge 37 ## 4 ford 25 ## 5 honda 9 ## 6 hyundai 14 ## 7 jeep 8 ## 8 land rover 4 ## 9 lincoln 3 ## 10 mercury 4 ## 11 nissan 13 ## 12 pontiac 5 ## 13 subaru 14 ## 14 toyota 34 ## 15 volkswagen 27 2.16 sample_n() set.seed(567) sample_n(dados, size = 10, replace = F) ## # A tibble: 10 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 mercury moun… 5 1999 8 auto… 4 13 17 r suv 3.61 ## 2 chevrolet corv… 7 2008 8 manu… r 15 24 p 2sea… 3.87 ## 3 dodge ram … 4.7 2008 8 manu… 4 12 16 r pick… 3.46 ## 4 toyota land… 4.7 1999 8 auto… 4 11 15 r suv 3.32 ## 5 volkswag… jetta 2 1999 4 auto… f 19 26 r comp… 4.36 ## 6 dodge cara… 3.8 1999 6 auto… f 15 21 r mini… 3.87 ## 7 honda civic 1.8 2008 4 auto… f 25 36 r subc… 5 ## 8 ford must… 4.6 1999 8 auto… r 15 21 r subc… 3.87 ## 9 chevrolet c150… 5.3 2008 8 auto… r 14 20 r suv 3.74 ## 10 ford expe… 5.4 1999 8 auto… r 11 17 r suv 3.32 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty sample_n(dados, size = 10, replace = T) ## # A tibble: 10 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 chevrolet c150… 5.3 2008 8 auto… r 11 15 e suv 3.32 ## 2 volkswag… gti 2 2008 4 auto… f 22 29 p comp… 4.69 ## 3 dodge dako… 4.7 2008 8 auto… 4 14 19 r pick… 3.74 ## 4 ford expl… 4.6 2008 8 auto… 4 13 19 r suv 3.61 ## 5 dodge cara… 3.8 2008 6 auto… f 16 23 r mini… 4 ## 6 chevrolet k150… 5.3 2008 8 auto… 4 14 19 r suv 3.74 ## 7 dodge dura… 5.2 1999 8 auto… 4 11 16 r suv 3.32 ## 8 toyota camry 2.4 2008 4 manu… f 21 31 r mids… 4.58 ## 9 toyota camry 3 1999 6 manu… f 18 26 r mids… 4.24 ## 10 subaru impr… 2.2 1999 4 auto… 4 21 26 r subc… 4.58 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty 2.17 sample_frac() sample_frac(dados, size = 0.1, replace = F) ## # A tibble: 23 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 toyota coro… 1.8 2008 4 manu… f 28 37 r comp… 5.29 ## 2 lincoln navi… 5.4 1999 8 auto… r 11 17 r suv 3.32 ## 3 honda civic 1.6 1999 4 auto… f 24 32 r subc… 4.90 ## 4 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## 5 nissan path… 4 2008 6 auto… 4 14 20 p suv 3.74 ## 6 toyota camry 3.5 2008 6 auto… f 19 28 r mids… 4.36 ## 7 subaru impr… 2.5 2008 4 auto… 4 20 25 p comp… 4.47 ## 8 toyota toyo… 3.4 1999 6 auto… 4 15 19 r pick… 3.87 ## 9 audi a4 q… 3.1 2008 6 manu… 4 15 25 p comp… 3.87 ## 10 toyota coro… 1.8 1999 4 manu… f 26 35 r comp… 5.10 ## # … with 13 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty "],["ggplot2-60-minutos.html", "3 ggplot2 (60 minutos) 3.1 Carrega pacotes a serem usados 3.2 Lista de funções do pacote ggplot2 3.3 Primeiros passos usando geom_point 3.4 smooth, boxplot, histogram 3.5 gridExtra e patchwork 3.6 bar, col, density, density2d 3.7 facet_grid, facet_wrap 3.8 stat_function 3.9 stat_summary 3.10 theme_*() 3.11 Gráfico de perfis (Spaguetti plot) 3.12 plotly 3.13 esquisse 3.14 Exemplo esquisse", " 3 ggplot2 (60 minutos) 3.1 Carrega pacotes a serem usados #install.packages(&quot;tidyverse&quot;) #install.packages(&quot;dplyr&quot;) #install.packages(&quot;tidyr&quot;) #install.packages(&quot;ggplot2&quot;) library(tidyverse) # Manipulação de dados #library(dplyr) # Visualização de gráficos library(ggplot2) library(gridExtra) library(patchwork) library(plotly) library(esquisse) # Para dados gráfico de perfis library(nlme) Alguns links The R Graph Gallery 120 registered extensions available to explore link 1: patchwork link 2: patchwork 3.2 Lista de funções do pacote ggplot2 ls(&quot;package:ggplot2&quot;) 3.3 Primeiros passos usando geom_point dados &lt;- mpg ggplot(dados) ggplot(dados, aes(x = cty, y = hwy)) # Alternativas ggplot(dados, aes(x = cty, y = hwy)) + geom_point() ggplot(dados) + geom_point(aes(x = cty, y = hwy)) ggplot() + geom_point(data = dados, aes(x = cty, y = hwy)) # Fim ggplot(dados, aes(x = cty, y = hwy)) + geom_point(colour = &quot;red&quot;) ggplot(dados, aes(x = cty, y = hwy)) + geom_point(colour = &quot;red&quot;, size = 6) ggplot(dados, aes(x = cty, y = hwy)) + geom_point(colour = &quot;red&quot;, size = 6, shape = 10) # Alternativa ggplot(dados, aes(x = cty, y = hwy)) + geom_point(colour = &quot;red&quot;, size = 6, shape = &quot;circle plus&quot;) ggplot(dados, aes(x = cty, y = hwy)) + geom_point(colour = &quot;red&quot;, size = 6, shape = 10)+ labs(x = &quot;cty (city miles per gallon hwy)&quot;, y = &quot;hwy (highway miles per gallon)&quot;, title = &quot;Pensar em algum título...&quot;, subtitle = &quot;Escrever alguma coisa&quot;) 3.3.1 Mais detalhes sobre geom_point geom_point() understands the following aesthetics (required aesthetics are in bold): x y alpha colour fill group shape size stroke ggplot(dados, aes(x = cty, y = hwy)) + geom_point() ggplot(dados, aes(x = cty, y = hwy, col = factor(year))) + geom_point() + labs(col = &quot;year&quot;) # Alternativa ggplot(dados, aes(x = cty, y = hwy, col = factor(class))) + geom_point() + labs(col = &quot;class&quot;)+ scale_color_brewer(type = &quot;qual&quot;) ggplot(dados, aes(x = cty, y = hwy, col = factor(class))) + geom_point() + labs(col = &quot;class&quot;)+ scale_color_brewer(type = &quot;div&quot;) ggplot(dados, aes(x = cty, y = hwy, col = factor(class))) + geom_point() + labs(col = &quot;class&quot;)+ scale_color_brewer(palette = &quot;Set1&quot;, name = &quot;Tipo de carro&quot;)+ scale_y_continuous(breaks = seq(10,60,3))+ scale_x_continuous(breaks = seq(10,40,3))+ theme_minimal() ggplot(dados, aes(x = cty, y = hwy, alpha = factor(year))) + geom_point() + labs(alpha = &quot;year&quot;) ggplot(dados, aes(x = cty, y = hwy, size = factor(year))) + geom_point() + labs(size = &quot;year&quot;) # Alternativa ggplot(dados, aes(x = cty, y = hwy, col = cty &lt;= 20)) + geom_point() + geom_vline(xintercept = 20)+ labs(col = &quot;year&quot;) # Erro comum ggplot(dados, aes(x = cty, y = hwy, col = &quot;red&quot;)) + geom_point()+ labs(col = &quot;year&quot;) ggplot(dados, aes(x = cty, y = hwy)) + geom_point(col = &quot;red&quot;)+ labs(col = &quot;year&quot;) # Fim Erro comum ggplot(dados, aes(x = cty, y = hwy, shape = factor(year))) + geom_point(col = &quot;red&quot;) + labs(shape = &quot;year&quot;) ggplot(dados, aes(x = cty, y = hwy, size = class)) + geom_point() + labs(size = &quot;class&quot;) ggplot(dados, aes(x = cty, y = hwy, size = class, col = class)) + geom_point() + guides(colour = guide_legend(&quot;Tipo de carro (color)&quot;), size = guide_legend(&quot;Tipo de carro (size)&quot;)) ggplot(dados, aes(x = cty, y = hwy, size = class, col = class)) + geom_point() + labs(col = &quot;Tipo de Carro&quot;, size = &quot;Tipo de Carro&quot;)+ guides(col = &quot;legend&quot;) 3.4 smooth, boxplot, histogram v1&lt;- ggplot(dados, aes(x = cty, y = hwy)) + geom_point(col = &quot;blue&quot;)+ geom_smooth(method = mgcv::gam, formula = y ~ s(x, bs = &quot;cs&quot;) , col = &quot;red&quot;, se = FALSE) v1 v2 &lt;- ggplot(dados, aes(x = cty)) + geom_boxplot(fill = &quot;red&quot;) v2 v3 &lt;- ggplot(dados, aes(x = cty)) + geom_histogram(bins = 10, fill = &quot;red&quot;, col = &quot;blue&quot;, lwd=2) v3 v4&lt;- ggplot(dados, aes(x = cty)) + geom_histogram(aes(y = after_stat(density)), bins = 10, fill = &quot;yellow&quot;, col = &quot;red&quot;) + geom_density(col = &quot;blue&quot;, lwd =3) v4 # Adicional (estatístic experimental) ggplot(dados, aes(x = drv, y = cty, col = drv)) + geom_boxplot()+ theme_bw()+ theme(legend.position = &quot;none&quot;) 3.5 gridExtra e patchwork Alguns links link 1: patchwork link 2: patchwork # gridExtra grid.arrange(v1, v2, v3, v4) # patchwork v1 + v2 v1 | v2 v1 / v2 v1 + v2 + v3 v1 + (v2 + v3) v1 | (v2 / v3) v1 / (v2 + v3) v1 + v2 + v3 + v4 v1/(v2+v3+v4) v1 + (v2 + v3 + v4) v1 + v2 + (v3 + v4) (v1 | v2 | v3) / v4 3.6 bar, col, density, density2d v5 &lt;- ggplot(dados , aes(x = manufacturer)) + geom_bar()+ theme(axis.text.x = element_text(angle = 45)) v5 # Dúvidas no geom_col v6 &lt;- ggplot(dados , aes(x = manufacturer, y = cty)) + geom_col()+ theme(axis.text.x = element_text(angle = 45)) v6 dados %&gt;% select(manufacturer, cty) %&gt;% group_by(manufacturer) %&gt;% summarise(soma_total_cty = sum(cty), n = n()) ## # A tibble: 15 × 3 ## manufacturer soma_total_cty n ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 audi 317 18 ## 2 chevrolet 285 19 ## 3 dodge 486 37 ## 4 ford 350 25 ## 5 honda 220 9 ## 6 hyundai 261 14 ## 7 jeep 108 8 ## 8 land rover 46 4 ## 9 lincoln 34 3 ## 10 mercury 53 4 ## 11 nissan 235 13 ## 12 pontiac 85 5 ## 13 subaru 270 14 ## 14 toyota 630 34 ## 15 volkswagen 565 27 # dados %&gt;% # filter(manufacturer == &quot;audi&quot;) %&gt;% # select(cty) %&gt;% # sum() v7 &lt;- ggplot(dados , aes(x = cty)) + geom_density() v7 v8 &lt;- ggplot(dados, aes(x = cty, y = hwy)) + geom_density2d()+ geom_point(colour = &quot;red&quot;) v8 (v5+v6)/ (v7 + v8) # Deixar pra depois... dados %&gt;% select(manufacturer, hwy, year) %&gt;% filter(manufacturer == &quot;audi&quot;, year == &quot;1999&quot;) %&gt;% summarise(media = max(hwy)) ## # A tibble: 1 × 1 ## media ## &lt;int&gt; ## 1 29 # plotly ggplotly( ggplot(dados, aes(x = manufacturer, y = hwy, fill = factor(year))) + geom_col(position = &quot;dodge&quot;) + labs(fill = &quot;year&quot;) + theme(axis.text.x = element_text(angle = 45))) dados %&gt;% select(manufacturer, hwy, year) %&gt;% group_by(manufacturer, year) %&gt;% summarise(media = mean(hwy)) # Para pensar (dados_trat &lt;- data.frame(tratamento = LETTERS[1:3], resposta = c(2.3, 1.9, 3.2))) ## tratamento resposta ## 1 A 2.3 ## 2 B 1.9 ## 3 C 3.2 ggplot(dados_trat, aes(tratamento, resposta)) + geom_col(fill = &quot;red&quot;) # Mais detalhes... dados %&gt;% select(manufacturer, hwy, year) %&gt;% group_by(manufacturer, year) %&gt;% summarise(media = mean(hwy), .groups = &quot;drop&quot;) %&gt;% ggplot(aes(x = manufacturer, y = media, fill = factor(year)))+ geom_col(position = &quot;dodge&quot;)+ labs(fill = &quot;year&quot;) + theme(axis.text.x = element_text(angle = 45)) 3.7 facet_grid, facet_wrap p1&lt;- ggplot(dados, aes(x = cty, y = hwy)) + geom_point() p1 p1 + facet_grid(rows = vars(cyl)) p1 + facet_grid(cols = vars(cyl)) p1 + facet_grid(~cyl) p1 + facet_grid(rows = vars(year), cols =vars(cyl)) p1 + facet_grid(year~cyl) p1 + facet_wrap(year ~ cyl) p1 + facet_wrap(cyl ~ year) p1 + facet_wrap(~cyl + year) p1 + facet_wrap(~year + cyl) p1 + facet_wrap(year ~ cyl, ncol = 4) p1 + facet_wrap(cyl ~ year, ncol = 4) 3.8 stat_function a&lt;- -3 # média b&lt;- 4 # desv. padrão ggplot(data.frame(x = c(a - 3*b, a + 3*b)), aes(x)) + stat_function(fun = dnorm, args = list(mean = a, sd = b))+ geom_vline(xintercept = c(a - 3*b, a, a + 3*b), col = &quot;red&quot;, lty = 2)+ theme_minimal() 3.9 stat_summary ggplot(dados, aes(x = manufacturer, y = hwy)) + geom_boxplot()+ geom_point(col = &quot;red&quot;, size=0.8)+ stat_summary(fun = mean, col = &quot;blue&quot;)+ theme_minimal()+ theme(axis.text.x = element_text(angle = 45)) 3.10 theme_*() a1&lt;- p1 + theme_bw() + labs(title = &quot;theme_bw()&quot;) a2&lt;- p1 + theme_classic() + labs(title = &quot;theme_classic()&quot;) a3&lt;- p1 + theme_light() + labs(title = &quot;theme_light()&quot;) a4&lt;- p1 + theme_minimal() + labs(title = &quot;theme_minimal()&quot;) a1 + a2 + a3 + a4 3.11 Gráfico de perfis (Spaguetti plot) glimpse(Orange) ## Rows: 35 ## Columns: 3 ## $ Tree &lt;ord&gt; 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,… ## $ age &lt;dbl&gt; 118, 484, 664, 1004, 1231, 1372, 1582, 118, 484, 664, 10… ## $ circumference &lt;dbl&gt; 30, 58, 87, 115, 120, 142, 145, 33, 69, 111, 156, 172, 2… ggplot(Orange, aes(x = age, y = circumference, group = Tree, col = Tree)) + geom_line()+ stat_summary(aes(group = 1), fun = mean, col = &quot;red&quot;, geom = &quot;line&quot;, size = 1, show.legend = FALSE, linetype = 2)+ xlim(0, 1600)+ theme_minimal() ggplot(Orange, aes(x = age, y = circumference, group = Tree)) + geom_line()+ xlim(0, 1600)+ facet_wrap(~Tree)+ theme_minimal()+ theme(legend.position = &quot;none&quot;) 3.12 plotly plotly cran Interactive web-based data visualization with R, plotly, and shiny Plotly R Open Source Graphing Library ggplotly(v1) ggplotly(v2) ggplotly(v4) ggplotly(v5) 3.13 esquisse Alguns links de interesse esquisse esquisse + shiny esquisser(dados) 3.14 Exemplo esquisse ggplot(dados) + aes(x = displ, y = hwy, colour = drv) + geom_point(shape = &quot;circle&quot;, size = 1.85) + scale_color_hue(direction = 1) + theme_minimal() + theme(legend.position = &quot;top&quot;) ggplot(dados) + aes(x = displ, y = cty, colour = class, size = cty) + geom_point(shape = &quot;circle&quot;) + scale_color_hue(direction = 1) + theme(legend.position = &quot;top&quot;) + facet_wrap(vars(drv)) "],["purrr.html", "4 purrr 4.1 map functions 4.2 map2 functions", " 4 purrr library(tidyverse) ls(&quot;package:purrr&quot;) ## [1] &quot;%@%&quot; &quot;%||%&quot; &quot;%&gt;%&quot; ## [4] &quot;accumulate&quot; &quot;accumulate_right&quot; &quot;accumulate2&quot; ## [7] &quot;array_branch&quot; &quot;array_tree&quot; &quot;as_mapper&quot; ## [10] &quot;as_vector&quot; &quot;assign_in&quot; &quot;at_depth&quot; ## [13] &quot;attr_getter&quot; &quot;auto_browse&quot; &quot;chuck&quot; ## [16] &quot;compact&quot; &quot;compose&quot; &quot;cross&quot; ## [19] &quot;cross_d&quot; &quot;cross_df&quot; &quot;cross_n&quot; ## [22] &quot;cross2&quot; &quot;cross3&quot; &quot;detect&quot; ## [25] &quot;detect_index&quot; &quot;discard&quot; &quot;discard_at&quot; ## [28] &quot;done&quot; &quot;every&quot; &quot;exec&quot; ## [31] &quot;flatten&quot; &quot;flatten_chr&quot; &quot;flatten_dbl&quot; ## [34] &quot;flatten_df&quot; &quot;flatten_dfc&quot; &quot;flatten_dfr&quot; ## [37] &quot;flatten_int&quot; &quot;flatten_lgl&quot; &quot;flatten_raw&quot; ## [40] &quot;has_element&quot; &quot;head_while&quot; &quot;imap&quot; ## [43] &quot;imap_chr&quot; &quot;imap_dbl&quot; &quot;imap_dfc&quot; ## [46] &quot;imap_dfr&quot; &quot;imap_int&quot; &quot;imap_lgl&quot; ## [49] &quot;imap_raw&quot; &quot;imodify&quot; &quot;insistently&quot; ## [52] &quot;invoke&quot; &quot;invoke_map&quot; &quot;invoke_map_chr&quot; ## [55] &quot;invoke_map_dbl&quot; &quot;invoke_map_df&quot; &quot;invoke_map_dfc&quot; ## [58] &quot;invoke_map_dfr&quot; &quot;invoke_map_int&quot; &quot;invoke_map_lgl&quot; ## [61] &quot;invoke_map_raw&quot; &quot;is_atomic&quot; &quot;is_bare_atomic&quot; ## [64] &quot;is_bare_character&quot; &quot;is_bare_double&quot; &quot;is_bare_integer&quot; ## [67] &quot;is_bare_list&quot; &quot;is_bare_logical&quot; &quot;is_bare_numeric&quot; ## [70] &quot;is_bare_vector&quot; &quot;is_character&quot; &quot;is_double&quot; ## [73] &quot;is_empty&quot; &quot;is_formula&quot; &quot;is_function&quot; ## [76] &quot;is_integer&quot; &quot;is_list&quot; &quot;is_logical&quot; ## [79] &quot;is_null&quot; &quot;is_rate&quot; &quot;is_scalar_atomic&quot; ## [82] &quot;is_scalar_character&quot; &quot;is_scalar_double&quot; &quot;is_scalar_integer&quot; ## [85] &quot;is_scalar_list&quot; &quot;is_scalar_logical&quot; &quot;is_scalar_vector&quot; ## [88] &quot;is_vector&quot; &quot;iwalk&quot; &quot;keep&quot; ## [91] &quot;keep_at&quot; &quot;lift&quot; &quot;lift_dl&quot; ## [94] &quot;lift_dv&quot; &quot;lift_ld&quot; &quot;lift_lv&quot; ## [97] &quot;lift_vd&quot; &quot;lift_vl&quot; &quot;list_along&quot; ## [100] &quot;list_assign&quot; &quot;list_c&quot; &quot;list_cbind&quot; ## [103] &quot;list_flatten&quot; &quot;list_merge&quot; &quot;list_modify&quot; ## [106] &quot;list_rbind&quot; &quot;list_simplify&quot; &quot;list_transpose&quot; ## [109] &quot;lmap&quot; &quot;lmap_at&quot; &quot;lmap_if&quot; ## [112] &quot;map&quot; &quot;map_at&quot; &quot;map_chr&quot; ## [115] &quot;map_dbl&quot; &quot;map_depth&quot; &quot;map_df&quot; ## [118] &quot;map_dfc&quot; &quot;map_dfr&quot; &quot;map_if&quot; ## [121] &quot;map_int&quot; &quot;map_lgl&quot; &quot;map_raw&quot; ## [124] &quot;map_vec&quot; &quot;map2&quot; &quot;map2_chr&quot; ## [127] &quot;map2_dbl&quot; &quot;map2_df&quot; &quot;map2_dfc&quot; ## [130] &quot;map2_dfr&quot; &quot;map2_int&quot; &quot;map2_lgl&quot; ## [133] &quot;map2_raw&quot; &quot;map2_vec&quot; &quot;modify&quot; ## [136] &quot;modify_at&quot; &quot;modify_depth&quot; &quot;modify_if&quot; ## [139] &quot;modify_in&quot; &quot;modify_tree&quot; &quot;modify2&quot; ## [142] &quot;negate&quot; &quot;none&quot; &quot;partial&quot; ## [145] &quot;pluck&quot; &quot;pluck_depth&quot; &quot;pluck_exists&quot; ## [148] &quot;pluck&lt;-&quot; &quot;pmap&quot; &quot;pmap_chr&quot; ## [151] &quot;pmap_dbl&quot; &quot;pmap_df&quot; &quot;pmap_dfc&quot; ## [154] &quot;pmap_dfr&quot; &quot;pmap_int&quot; &quot;pmap_lgl&quot; ## [157] &quot;pmap_raw&quot; &quot;pmap_vec&quot; &quot;possibly&quot; ## [160] &quot;prepend&quot; &quot;pwalk&quot; &quot;quietly&quot; ## [163] &quot;rate_backoff&quot; &quot;rate_delay&quot; &quot;rate_reset&quot; ## [166] &quot;rate_sleep&quot; &quot;rbernoulli&quot; &quot;rdunif&quot; ## [169] &quot;reduce&quot; &quot;reduce_right&quot; &quot;reduce2&quot; ## [172] &quot;reduce2_right&quot; &quot;rep_along&quot; &quot;rerun&quot; ## [175] &quot;safely&quot; &quot;set_names&quot; &quot;simplify&quot; ## [178] &quot;simplify_all&quot; &quot;slowly&quot; &quot;some&quot; ## [181] &quot;splice&quot; &quot;tail_while&quot; &quot;transpose&quot; ## [184] &quot;update_list&quot; &quot;vec_depth&quot; &quot;walk&quot; ## [187] &quot;walk2&quot; &quot;when&quot; &quot;zap&quot; 4.1 map functions example(&quot;map&quot;) ## ## map&gt; # Compute normal distributions from an atomic vector ## map&gt; 1:10 |&gt; ## map+ map(rnorm, n = 10) ## [[1]] ## [1] 3.4227915 0.5562945 0.5783935 1.1037784 1.7674708 1.3019755 1.9538366 ## [8] 1.5219171 0.7646488 1.9305802 ## ## [[2]] ## [1] 1.9246039 0.4278578 1.9849417 4.0407729 1.7703830 2.2911507 4.1766524 ## [8] 0.1269272 1.8381840 1.9652703 ## ## [[3]] ## [1] 3.528425 3.814830 2.738892 2.622357 2.717425 3.318517 3.826397 3.402707 ## [9] 3.245369 2.557114 ## ## [[4]] ## [1] 5.442486 2.272852 2.306078 4.581656 3.941353 2.886619 4.206319 5.969180 ## [9] 4.285965 4.917115 ## ## [[5]] ## [1] 4.588525 4.345247 3.059070 4.452700 4.712290 5.137308 3.574640 3.886825 ## [9] 4.376737 5.682278 ## ## [[6]] ## [1] 5.181620 8.351211 5.651700 6.299482 5.051354 8.124654 6.221064 6.694361 ## [9] 5.134668 5.354538 ## ## [[7]] ## [1] 6.759325 7.471865 6.094415 7.159456 6.603345 6.410130 7.700877 5.732207 ## [9] 6.399620 6.971319 ## ## [[8]] ## [1] 7.807495 8.006455 7.004296 7.274800 7.234007 9.568186 7.725682 7.648573 ## [9] 7.965731 8.588828 ## ## [[9]] ## [1] 7.468378 7.898013 10.328154 9.054652 8.726736 10.582874 7.917829 ## [8] 8.517617 9.130397 7.898263 ## ## [[10]] ## [1] 10.254320 10.153207 9.456223 9.743526 9.947470 9.947613 9.978104 ## [8] 9.944393 12.867041 9.491287 ## ## ## map&gt; # You can also use an anonymous function ## map&gt; 1:10 |&gt; ## map+ map(\\(x) rnorm(10, x)) ## [[1]] ## [1] 1.4653692 1.3882607 1.0319477 1.4538359 0.8653103 0.9818103 0.7427702 ## [8] 2.4924125 0.4984923 1.8434063 ## ## [[2]] ## [1] 0.6575189 0.5853158 2.1192695 3.1420723 3.5202368 1.7385827 2.8146012 ## [8] 2.1478598 1.4397442 2.0212378 ## ## [[3]] ## [1] 2.796271 2.743258 1.902486 2.174415 2.321086 1.241756 2.806844 3.069781 ## [9] 1.896410 3.213967 ## ## [[4]] ## [1] 4.699223 4.819480 3.986850 3.147934 3.111270 3.769582 4.273498 4.137615 ## [9] 4.792570 5.100806 ## ## [[5]] ## [1] 6.070146 3.628936 5.390666 4.065244 4.819581 2.995637 3.175926 3.705626 ## [9] 5.327466 5.621965 ## ## [[6]] ## [1] 4.082899 5.281427 5.667658 5.337786 4.870593 5.219958 5.141326 5.566014 ## [9] 6.063065 7.451955 ## ## [[7]] ## [1] 5.818516 7.503881 8.298007 8.427188 5.607851 6.506048 6.080059 7.825166 ## [9] 6.095495 6.983059 ## ## [[8]] ## [1] 7.310142 8.920368 6.753787 9.627703 7.012016 7.779028 8.065273 8.695298 ## [9] 8.370470 8.946446 ## ## [[9]] ## [1] 10.223622 9.705049 10.919345 9.118275 9.470402 8.343313 8.522981 ## [8] 7.715608 8.228937 8.153892 ## ## [[10]] ## [1] 10.165750 11.313159 10.135560 9.815706 9.761997 9.760760 11.092981 ## [8] 12.054046 9.564145 8.573474 ## ## ## map&gt; # Simplify output to a vector instead of a list by computing the mean of the distributions ## map&gt; 1:10 |&gt; ## map+ map(rnorm, n = 10) |&gt; # output a list ## map+ map_dbl(mean) # output an atomic vector ## [1] 0.7401882 2.0916608 2.4729717 4.1941310 4.3751982 6.4641568 ## [7] 6.7557280 7.6074078 9.0928942 10.1898862 ## ## map&gt; # Using set_names() with character vectors is handy to keep track ## map&gt; # of the original inputs: ## map&gt; set_names(c(&quot;foo&quot;, &quot;bar&quot;)) |&gt; map_chr(paste0, &quot;:suffix&quot;) ## foo bar ## &quot;foo:suffix&quot; &quot;bar:suffix&quot; ## ## map&gt; # Working with lists ## map&gt; favorite_desserts &lt;- list(Sophia = &quot;banana bread&quot;, Eliott = &quot;pancakes&quot;, Karina = &quot;chocolate cake&quot;) ## ## map&gt; favorite_desserts |&gt; map_chr(\\(food) paste(food, &quot;rocks!&quot;)) ## Sophia Eliott Karina ## &quot;banana bread rocks!&quot; &quot;pancakes rocks!&quot; &quot;chocolate cake rocks!&quot; ## ## map&gt; # Extract by name or position ## map&gt; # .default specifies value for elements that are missing or NULL ## map&gt; l1 &lt;- list(list(a = 1L), list(a = NULL, b = 2L), list(b = 3L)) ## ## map&gt; l1 |&gt; map(&quot;a&quot;, .default = &quot;???&quot;) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;???&quot; ## ## [[3]] ## [1] &quot;???&quot; ## ## ## map&gt; l1 |&gt; map_int(&quot;b&quot;, .default = NA) ## [1] NA 2 3 ## ## map&gt; l1 |&gt; map_int(2, .default = NA) ## [1] NA 2 NA ## ## map&gt; # Supply multiple values to index deeply into a list ## map&gt; l2 &lt;- list( ## map+ list(num = 1:3, letters[1:3]), ## map+ list(num = 101:103, letters[4:6]), ## map+ list() ## map+ ) ## ## map&gt; l2 |&gt; map(c(2, 2)) ## [[1]] ## [1] &quot;b&quot; ## ## [[2]] ## [1] &quot;e&quot; ## ## [[3]] ## NULL ## ## ## map&gt; # Use a list to build an extractor that mixes numeric indices and names, ## map&gt; # and .default to provide a default value if the element does not exist ## map&gt; l2 |&gt; map(list(&quot;num&quot;, 3)) ## [[1]] ## [1] 3 ## ## [[2]] ## [1] 103 ## ## [[3]] ## NULL ## ## ## map&gt; l2 |&gt; map_int(list(&quot;num&quot;, 3), .default = NA) ## [1] 3 103 NA ## ## map&gt; # Working with data frames ## map&gt; # Use map_lgl(), map_dbl(), etc to return a vector instead of a list: ## map&gt; mtcars |&gt; map_dbl(sum) ## mpg cyl disp hp drat wt qsec vs ## 642.900 198.000 7383.100 4694.000 115.090 102.952 571.160 14.000 ## am gear carb ## 13.000 118.000 90.000 ## ## map&gt; # A more realistic example: split a data frame into pieces, fit a ## map&gt; # model to each piece, summarise and extract R^2 ## map&gt; mtcars |&gt; ## map+ split(mtcars$cyl) |&gt; ## map+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## map+ map(summary) |&gt; ## map+ map_dbl(&quot;r.squared&quot;) ## 4 6 8 ## 0.5086326 0.4645102 0.4229655 example(&quot;map_at&quot;) ## ## map_at&gt; # Use a predicate function to decide whether to map a function: ## map_at&gt; iris |&gt; map_if(is.factor, as.character) |&gt; str() ## List of 5 ## $ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : chr [1:150] &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... ## ## map_at&gt; # Specify an alternative with the `.else` argument: ## map_at&gt; iris |&gt; map_if(is.factor, as.character, .else = as.integer) |&gt; str() ## List of 5 ## $ Sepal.Length: int [1:150] 5 4 4 4 5 5 4 5 4 4 ... ## $ Sepal.Width : int [1:150] 3 3 3 3 3 3 3 3 2 3 ... ## $ Petal.Length: int [1:150] 1 1 1 1 1 1 1 1 1 1 ... ## $ Petal.Width : int [1:150] 0 0 0 0 0 0 0 0 0 0 ... ## $ Species : chr [1:150] &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; &quot;setosa&quot; ... ## ## map_at&gt; # Use numeric vector of positions select elements to change: ## map_at&gt; iris |&gt; map_at(c(4, 5), is.numeric) |&gt; str() ## List of 5 ## $ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : logi TRUE ## $ Species : logi FALSE ## ## map_at&gt; # Use vector of names to specify which elements to change: ## map_at&gt; iris |&gt; map_at(&quot;Species&quot;, toupper) |&gt; str() ## List of 5 ## $ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : chr [1:150] &quot;SETOSA&quot; &quot;SETOSA&quot; &quot;SETOSA&quot; &quot;SETOSA&quot; ... example(&quot;map_chr&quot;) ## ## mp_chr&gt; # Compute normal distributions from an atomic vector ## mp_chr&gt; 1:10 |&gt; ## mp_chr+ map(rnorm, n = 10) ## [[1]] ## [1] 1.0068383 1.8742467 0.6149887 0.5348532 0.9808235 2.5946148 ## [7] 1.8532632 1.5447999 -0.4688683 1.0847635 ## ## [[2]] ## [1] 3.315259 2.897638 2.558229 2.108180 3.175341 2.030966 3.873527 2.727374 ## [9] 1.227531 2.170441 ## ## [[3]] ## [1] 2.002316 3.172793 1.434978 2.335289 3.128632 2.682349 2.182090 3.491598 ## [9] 3.193407 1.910083 ## ## [[4]] ## [1] 3.590554 3.417109 3.986594 2.444459 4.467160 2.872323 4.401744 5.037747 ## [9] 2.499660 4.840630 ## ## [[5]] ## [1] 2.949669 4.269048 4.131746 5.220924 4.251317 2.985941 4.520868 3.966945 ## [9] 5.759651 5.031149 ## ## [[6]] ## [1] 5.455317 5.337369 6.340106 5.559877 7.062452 7.439826 6.235158 6.714417 ## [9] 5.566950 5.209869 ## ## [[7]] ## [1] 7.225328 5.785861 6.191306 5.559568 7.333777 7.874659 7.397085 7.511655 ## [9] 7.035457 8.565282 ## ## [[8]] ## [1] 9.499747 8.559358 8.566084 8.435872 9.231086 7.434397 10.210168 ## [8] 8.430040 6.468241 8.031148 ## ## [[9]] ## [1] 8.967565 7.669497 10.235208 9.051394 8.732482 9.638900 6.719280 ## [8] 8.998589 9.735001 8.562167 ## ## [[10]] ## [1] 10.395638 10.326543 9.402625 10.986502 11.307875 10.563452 9.385014 ## [8] 10.904741 9.693875 11.493628 ## ## ## mp_chr&gt; # You can also use an anonymous function ## mp_chr&gt; 1:10 |&gt; ## mp_chr+ map(\\(x) rnorm(10, x)) ## [[1]] ## [1] 1.1940007 1.2160002 0.7633762 0.7778411 1.2048014 1.4363720 ## [7] 1.1661496 -0.1515759 -0.3811876 1.9311726 ## ## [[2]] ## [1] 0.9317052 2.9115510 1.9087439 2.0040123 3.4467795 0.6774343 3.0023997 ## [8] 3.4817460 3.3106918 2.8832619 ## ## [[3]] ## [1] 1.971407 2.473861 3.789445 4.080289 3.161884 4.192958 3.053015 3.651906 ## [9] 4.239476 1.821208 ## ## [[4]] ## [1] 4.088963 3.009027 4.935167 3.356045 3.365986 4.507939 4.442282 4.121762 ## [9] 4.124109 1.896212 ## ## [[5]] ## [1] 4.625766 5.366967 2.930184 5.001544 3.639850 4.864609 3.877792 5.936365 ## [9] 3.914441 3.222121 ## ## [[6]] ## [1] 7.250567 6.980029 5.379965 5.963222 6.519868 5.543293 5.716278 4.894704 ## [9] 5.885295 8.268970 ## ## [[7]] ## [1] 6.632952 6.820462 7.606352 6.473488 7.597671 5.752108 7.941285 5.654091 ## [9] 6.923558 6.562355 ## ## [[8]] ## [1] 6.787182 7.879227 8.260680 8.023448 8.027866 6.750783 6.085629 6.988263 ## [9] 7.429751 9.222333 ## ## [[9]] ## [1] 8.910237 7.587927 9.377269 8.617304 8.551994 7.988263 9.748852 ## [8] 10.301968 8.218454 10.525187 ## ## [[10]] ## [1] 10.207079 12.305144 10.130634 11.960758 9.521668 6.319598 11.457606 ## [8] 10.749438 11.593125 9.759600 ## ## ## mp_chr&gt; # Simplify output to a vector instead of a list by computing the mean of the distributions ## mp_chr&gt; 1:10 |&gt; ## mp_chr+ map(rnorm, n = 10) |&gt; # output a list ## mp_chr+ map_dbl(mean) # output an atomic vector ## [1] 1.306092 2.010512 2.939084 3.915969 4.768335 5.798347 6.707390 ## [8] 7.950560 8.944462 10.036085 ## ## mp_chr&gt; # Using set_names() with character vectors is handy to keep track ## mp_chr&gt; # of the original inputs: ## mp_chr&gt; set_names(c(&quot;foo&quot;, &quot;bar&quot;)) |&gt; map_chr(paste0, &quot;:suffix&quot;) ## foo bar ## &quot;foo:suffix&quot; &quot;bar:suffix&quot; ## ## mp_chr&gt; # Working with lists ## mp_chr&gt; favorite_desserts &lt;- list(Sophia = &quot;banana bread&quot;, Eliott = &quot;pancakes&quot;, Karina = &quot;chocolate cake&quot;) ## ## mp_chr&gt; favorite_desserts |&gt; map_chr(\\(food) paste(food, &quot;rocks!&quot;)) ## Sophia Eliott Karina ## &quot;banana bread rocks!&quot; &quot;pancakes rocks!&quot; &quot;chocolate cake rocks!&quot; ## ## mp_chr&gt; # Extract by name or position ## mp_chr&gt; # .default specifies value for elements that are missing or NULL ## mp_chr&gt; l1 &lt;- list(list(a = 1L), list(a = NULL, b = 2L), list(b = 3L)) ## ## mp_chr&gt; l1 |&gt; map(&quot;a&quot;, .default = &quot;???&quot;) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;???&quot; ## ## [[3]] ## [1] &quot;???&quot; ## ## ## mp_chr&gt; l1 |&gt; map_int(&quot;b&quot;, .default = NA) ## [1] NA 2 3 ## ## mp_chr&gt; l1 |&gt; map_int(2, .default = NA) ## [1] NA 2 NA ## ## mp_chr&gt; # Supply multiple values to index deeply into a list ## mp_chr&gt; l2 &lt;- list( ## mp_chr+ list(num = 1:3, letters[1:3]), ## mp_chr+ list(num = 101:103, letters[4:6]), ## mp_chr+ list() ## mp_chr+ ) ## ## mp_chr&gt; l2 |&gt; map(c(2, 2)) ## [[1]] ## [1] &quot;b&quot; ## ## [[2]] ## [1] &quot;e&quot; ## ## [[3]] ## NULL ## ## ## mp_chr&gt; # Use a list to build an extractor that mixes numeric indices and names, ## mp_chr&gt; # and .default to provide a default value if the element does not exist ## mp_chr&gt; l2 |&gt; map(list(&quot;num&quot;, 3)) ## [[1]] ## [1] 3 ## ## [[2]] ## [1] 103 ## ## [[3]] ## NULL ## ## ## mp_chr&gt; l2 |&gt; map_int(list(&quot;num&quot;, 3), .default = NA) ## [1] 3 103 NA ## ## mp_chr&gt; # Working with data frames ## mp_chr&gt; # Use map_lgl(), map_dbl(), etc to return a vector instead of a list: ## mp_chr&gt; mtcars |&gt; map_dbl(sum) ## mpg cyl disp hp drat wt qsec vs ## 642.900 198.000 7383.100 4694.000 115.090 102.952 571.160 14.000 ## am gear carb ## 13.000 118.000 90.000 ## ## mp_chr&gt; # A more realistic example: split a data frame into pieces, fit a ## mp_chr&gt; # model to each piece, summarise and extract R^2 ## mp_chr&gt; mtcars |&gt; ## mp_chr+ split(mtcars$cyl) |&gt; ## mp_chr+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp_chr+ map(summary) |&gt; ## mp_chr+ map_dbl(&quot;r.squared&quot;) ## 4 6 8 ## 0.5086326 0.4645102 0.4229655 example(&quot;map_dbl&quot;) ## ## mp_dbl&gt; # Compute normal distributions from an atomic vector ## mp_dbl&gt; 1:10 |&gt; ## mp_dbl+ map(rnorm, n = 10) ## [[1]] ## [1] -0.2003622 1.5280561 0.8970340 -0.5704387 1.2142092 0.8486974 ## [7] 1.9872077 1.2558931 2.3428686 0.9094883 ## ## [[2]] ## [1] 1.5954688 1.7544410 2.0663667 1.9064362 0.6143824 1.3345073 1.4044440 ## [8] 0.7678414 1.5019057 1.8545468 ## ## [[3]] ## [1] 2.023493 2.870705 3.027891 3.534184 2.504992 3.697290 2.981002 1.973128 ## [9] 3.794557 2.953874 ## ## [[4]] ## [1] 5.654983 4.369978 2.810768 4.394122 3.042392 2.895159 3.732480 3.577456 ## [9] 2.949389 3.139977 ## ## [[5]] ## [1] 6.451990 5.655777 4.578628 4.475167 3.511581 5.438912 4.096100 6.337568 ## [9] 6.277743 6.473290 ## ## [[6]] ## [1] 6.701314 5.279354 5.032750 5.150315 5.771744 4.956395 5.011913 7.380020 ## [9] 5.154245 4.809015 ## ## [[7]] ## [1] 5.618042 6.608705 5.198741 8.021983 5.476292 8.522425 8.403453 7.248484 ## [9] 8.207490 8.295792 ## ## [[8]] ## [1] 8.409436 8.862805 5.175262 7.936492 8.513879 8.038389 6.179228 6.671406 ## [9] 7.263369 6.766855 ## ## [[9]] ## [1] 8.075683 7.912750 9.886395 7.691866 9.319549 8.394526 9.919844 9.990569 ## [9] 7.716549 8.639392 ## ## [[10]] ## [1] 8.589421 8.841837 8.784877 12.495707 10.613377 10.379434 9.785230 ## [8] 9.108118 10.300218 9.759969 ## ## ## mp_dbl&gt; # You can also use an anonymous function ## mp_dbl&gt; 1:10 |&gt; ## mp_dbl+ map(\\(x) rnorm(10, x)) ## [[1]] ## [1] 1.5001772 0.8061898 1.0215502 0.5087368 0.2112070 0.5388967 0.1132226 ## [8] 0.7010926 1.2137739 2.0580810 ## ## [[2]] ## [1] 2.5625567 2.4778784 2.2145988 0.7743261 1.1686166 1.5733426 3.5268571 ## [8] 1.4493044 1.1012504 3.0403929 ## ## [[3]] ## [1] 2.098776 2.694227 3.212515 3.359984 3.186201 2.822668 4.354981 1.478393 ## [9] 4.238315 2.498746 ## ## [[4]] ## [1] 5.816921 4.848964 3.007330 2.368427 4.159776 3.102378 4.492722 4.878915 ## [9] 2.044364 2.471788 ## ## [[5]] ## [1] 8.015956 5.240027 4.945720 3.856931 6.159654 5.575643 3.819709 4.639630 ## [9] 6.458721 5.205081 ## ## [[6]] ## [1] 6.462299 6.590601 5.589528 6.816750 4.702695 6.778739 5.736338 5.927952 ## [9] 6.785875 6.706670 ## ## [[7]] ## [1] 6.114177 8.395354 7.800895 5.772470 5.644210 5.183651 7.135765 5.745749 ## [9] 6.109164 6.764034 ## ## [[8]] ## [1] 7.712221 7.395466 7.630046 5.890775 7.159324 7.703109 9.014629 7.707483 ## [9] 9.500615 6.673802 ## ## [[9]] ## [1] 9.127909 7.786993 9.875138 9.530288 10.363304 9.397270 10.292220 ## [8] 8.457506 8.263461 10.691203 ## ## [[10]] ## [1] 7.689390 10.982182 9.781502 9.794237 10.113009 9.215965 10.104751 ## [8] 9.757022 11.696100 9.516418 ## ## ## mp_dbl&gt; # Simplify output to a vector instead of a list by computing the mean of the distributions ## mp_dbl&gt; 1:10 |&gt; ## mp_dbl+ map(rnorm, n = 10) |&gt; # output a list ## mp_dbl+ map_dbl(mean) # output an atomic vector ## [1] 1.089099 1.956344 3.432808 3.520782 5.141980 6.137672 6.617857 7.840767 ## [9] 9.501236 9.700153 ## ## mp_dbl&gt; # Using set_names() with character vectors is handy to keep track ## mp_dbl&gt; # of the original inputs: ## mp_dbl&gt; set_names(c(&quot;foo&quot;, &quot;bar&quot;)) |&gt; map_chr(paste0, &quot;:suffix&quot;) ## foo bar ## &quot;foo:suffix&quot; &quot;bar:suffix&quot; ## ## mp_dbl&gt; # Working with lists ## mp_dbl&gt; favorite_desserts &lt;- list(Sophia = &quot;banana bread&quot;, Eliott = &quot;pancakes&quot;, Karina = &quot;chocolate cake&quot;) ## ## mp_dbl&gt; favorite_desserts |&gt; map_chr(\\(food) paste(food, &quot;rocks!&quot;)) ## Sophia Eliott Karina ## &quot;banana bread rocks!&quot; &quot;pancakes rocks!&quot; &quot;chocolate cake rocks!&quot; ## ## mp_dbl&gt; # Extract by name or position ## mp_dbl&gt; # .default specifies value for elements that are missing or NULL ## mp_dbl&gt; l1 &lt;- list(list(a = 1L), list(a = NULL, b = 2L), list(b = 3L)) ## ## mp_dbl&gt; l1 |&gt; map(&quot;a&quot;, .default = &quot;???&quot;) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;???&quot; ## ## [[3]] ## [1] &quot;???&quot; ## ## ## mp_dbl&gt; l1 |&gt; map_int(&quot;b&quot;, .default = NA) ## [1] NA 2 3 ## ## mp_dbl&gt; l1 |&gt; map_int(2, .default = NA) ## [1] NA 2 NA ## ## mp_dbl&gt; # Supply multiple values to index deeply into a list ## mp_dbl&gt; l2 &lt;- list( ## mp_dbl+ list(num = 1:3, letters[1:3]), ## mp_dbl+ list(num = 101:103, letters[4:6]), ## mp_dbl+ list() ## mp_dbl+ ) ## ## mp_dbl&gt; l2 |&gt; map(c(2, 2)) ## [[1]] ## [1] &quot;b&quot; ## ## [[2]] ## [1] &quot;e&quot; ## ## [[3]] ## NULL ## ## ## mp_dbl&gt; # Use a list to build an extractor that mixes numeric indices and names, ## mp_dbl&gt; # and .default to provide a default value if the element does not exist ## mp_dbl&gt; l2 |&gt; map(list(&quot;num&quot;, 3)) ## [[1]] ## [1] 3 ## ## [[2]] ## [1] 103 ## ## [[3]] ## NULL ## ## ## mp_dbl&gt; l2 |&gt; map_int(list(&quot;num&quot;, 3), .default = NA) ## [1] 3 103 NA ## ## mp_dbl&gt; # Working with data frames ## mp_dbl&gt; # Use map_lgl(), map_dbl(), etc to return a vector instead of a list: ## mp_dbl&gt; mtcars |&gt; map_dbl(sum) ## mpg cyl disp hp drat wt qsec vs ## 642.900 198.000 7383.100 4694.000 115.090 102.952 571.160 14.000 ## am gear carb ## 13.000 118.000 90.000 ## ## mp_dbl&gt; # A more realistic example: split a data frame into pieces, fit a ## mp_dbl&gt; # model to each piece, summarise and extract R^2 ## mp_dbl&gt; mtcars |&gt; ## mp_dbl+ split(mtcars$cyl) |&gt; ## mp_dbl+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp_dbl+ map(summary) |&gt; ## mp_dbl+ map_dbl(&quot;r.squared&quot;) ## 4 6 8 ## 0.5086326 0.4645102 0.4229655 example(&quot;map_df&quot;) ## ## map_df&gt; # map --------------------------------------------- ## map_df&gt; # Was: ## map_df&gt; mtcars |&gt; ## map_df+ split(mtcars$cyl) |&gt; ## map_df+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## map_df+ map_dfr(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## map_df&gt; # Now: ## map_df&gt; mtcars |&gt; ## map_df+ split(mtcars$cyl) |&gt; ## map_df+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## map_df+ map(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) |&gt; ## map_df+ list_rbind() ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## map_df&gt; # map2 --------------------------------------------- ## map_df&gt; ## map_df&gt; ex_fun &lt;- function(arg1, arg2){ ## map_df+ col &lt;- arg1 + arg2 ## map_df+ x &lt;- as.data.frame(col) ## map_df+ } ## ## map_df&gt; arg1 &lt;- 1:4 ## ## map_df&gt; arg2 &lt;- 10:13 ## ## map_df&gt; # was ## map_df&gt; map2_dfr(arg1, arg2, ex_fun) ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## map_df&gt; # now ## map_df&gt; map2(arg1, arg2, ex_fun) |&gt; list_rbind() ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## map_df&gt; # was ## map_df&gt; map2_dfc(arg1, arg2, ex_fun) ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 ## ## map_df&gt; # now ## map_df&gt; map2(arg1, arg2, ex_fun) |&gt; list_cbind() ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 example(&quot;map_dfc&quot;) ## ## mp_dfc&gt; # map --------------------------------------------- ## mp_dfc&gt; # Was: ## mp_dfc&gt; mtcars |&gt; ## mp_dfc+ split(mtcars$cyl) |&gt; ## mp_dfc+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp_dfc+ map_dfr(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## mp_dfc&gt; # Now: ## mp_dfc&gt; mtcars |&gt; ## mp_dfc+ split(mtcars$cyl) |&gt; ## mp_dfc+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp_dfc+ map(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) |&gt; ## mp_dfc+ list_rbind() ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## mp_dfc&gt; # map2 --------------------------------------------- ## mp_dfc&gt; ## mp_dfc&gt; ex_fun &lt;- function(arg1, arg2){ ## mp_dfc+ col &lt;- arg1 + arg2 ## mp_dfc+ x &lt;- as.data.frame(col) ## mp_dfc+ } ## ## mp_dfc&gt; arg1 &lt;- 1:4 ## ## mp_dfc&gt; arg2 &lt;- 10:13 ## ## mp_dfc&gt; # was ## mp_dfc&gt; map2_dfr(arg1, arg2, ex_fun) ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## mp_dfc&gt; # now ## mp_dfc&gt; map2(arg1, arg2, ex_fun) |&gt; list_rbind() ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## mp_dfc&gt; # was ## mp_dfc&gt; map2_dfc(arg1, arg2, ex_fun) ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 ## ## mp_dfc&gt; # now ## mp_dfc&gt; map2(arg1, arg2, ex_fun) |&gt; list_cbind() ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 example(&quot;map_dfr&quot;) ## ## mp_dfr&gt; # map --------------------------------------------- ## mp_dfr&gt; # Was: ## mp_dfr&gt; mtcars |&gt; ## mp_dfr+ split(mtcars$cyl) |&gt; ## mp_dfr+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp_dfr+ map_dfr(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## mp_dfr&gt; # Now: ## mp_dfr&gt; mtcars |&gt; ## mp_dfr+ split(mtcars$cyl) |&gt; ## mp_dfr+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp_dfr+ map(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) |&gt; ## mp_dfr+ list_rbind() ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## mp_dfr&gt; # map2 --------------------------------------------- ## mp_dfr&gt; ## mp_dfr&gt; ex_fun &lt;- function(arg1, arg2){ ## mp_dfr+ col &lt;- arg1 + arg2 ## mp_dfr+ x &lt;- as.data.frame(col) ## mp_dfr+ } ## ## mp_dfr&gt; arg1 &lt;- 1:4 ## ## mp_dfr&gt; arg2 &lt;- 10:13 ## ## mp_dfr&gt; # was ## mp_dfr&gt; map2_dfr(arg1, arg2, ex_fun) ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## mp_dfr&gt; # now ## mp_dfr&gt; map2(arg1, arg2, ex_fun) |&gt; list_rbind() ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## mp_dfr&gt; # was ## mp_dfr&gt; map2_dfc(arg1, arg2, ex_fun) ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 ## ## mp_dfr&gt; # now ## mp_dfr&gt; map2(arg1, arg2, ex_fun) |&gt; list_cbind() ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 example(&quot;map_int&quot;) ## ## map_nt&gt; # Compute normal distributions from an atomic vector ## map_nt&gt; 1:10 |&gt; ## map_nt+ map(rnorm, n = 10) ## [[1]] ## [1] -0.45025897 0.06891766 2.09977775 -0.64798363 1.17580365 0.86299081 ## [7] 2.71011355 1.35034928 0.37780055 3.33086967 ## ## [[2]] ## [1] 0.4027428 0.8096802 1.5278872 0.7858311 0.8812956 1.9625017 2.4964615 ## [8] 0.1087158 1.0122734 1.0015745 ## ## [[3]] ## [1] 3.085883 2.723483 5.169577 1.432769 3.490104 2.192081 2.444069 4.600173 ## [9] 1.998246 4.878160 ## ## [[4]] ## [1] 3.112159 3.385053 2.110734 4.598390 4.998019 3.761371 3.061745 4.190581 ## [9] 3.666348 2.716072 ## ## [[5]] ## [1] 5.376115 5.602843 5.642842 4.156423 5.154252 4.961575 4.846474 4.098562 ## [9] 5.507939 4.743495 ## ## [[6]] ## [1] 4.176213 5.776562 2.527260 7.402756 5.395049 4.818491 6.911258 8.497411 ## [9] 5.701861 6.380725 ## ## [[7]] ## [1] 5.659900 7.028140 6.620525 7.629573 5.595742 5.676135 6.928742 6.831138 ## [9] 7.378269 7.877700 ## ## [[8]] ## [1] 6.722658 10.183352 8.534536 7.034857 8.596419 7.834080 7.324914 ## [8] 8.572491 8.727029 7.963417 ## ## [[9]] ## [1] 7.633804 10.922516 7.559582 10.298666 10.288217 10.215988 8.487903 ## [8] 8.651001 9.613372 11.085749 ## ## [[10]] ## [1] 9.228800 8.360394 10.301952 12.036662 8.232986 10.194249 7.550620 ## [8] 10.248752 10.189030 10.914888 ## ## ## map_nt&gt; # You can also use an anonymous function ## map_nt&gt; 1:10 |&gt; ## map_nt+ map(\\(x) rnorm(10, x)) ## [[1]] ## [1] 1.09312843 -0.06193882 1.59282217 -0.72895114 0.87262857 1.90974664 ## [7] 0.64466791 0.92504958 1.64415434 0.45683877 ## ## [[2]] ## [1] 2.28751814 2.45777309 1.73786790 3.25041197 3.31487601 0.83648830 ## [7] 2.89304476 1.74005802 -0.08994746 2.15356466 ## ## [[3]] ## [1] 3.1955625 3.2227278 1.5151065 2.8159070 2.2605722 3.4314063 2.1685024 ## [8] 0.4936166 2.7772557 4.2523459 ## ## [[4]] ## [1] 4.213360 5.267165 3.627772 4.538455 4.501160 3.040814 5.158264 2.548457 ## [9] 2.410137 3.718372 ## ## [[5]] ## [1] 2.594895 6.081334 4.804234 4.378132 3.863119 5.897580 4.777595 4.552615 ## [9] 6.039130 6.983300 ## ## [[6]] ## [1] 4.269169 5.263873 6.842628 6.370673 6.662064 8.499360 6.389190 3.841559 ## [9] 6.055076 6.059261 ## ## [[7]] ## [1] 7.293186 6.262460 7.765123 9.757840 6.217125 7.007388 9.640583 7.677985 ## [9] 5.724758 5.943778 ## ## [[8]] ## [1] 8.234211 6.540582 8.624927 6.298066 7.204635 8.662722 7.499894 6.796043 ## [9] 8.815775 9.017453 ## ## [[9]] ## [1] 9.352164 9.287892 7.300060 9.519677 9.071494 10.678960 8.660784 ## [8] 8.347910 7.521422 8.461680 ## ## [[10]] ## [1] 11.286042 10.353684 10.104158 8.393660 10.066116 11.215402 10.413647 ## [8] 9.570977 10.716489 11.682406 ## ## ## map_nt&gt; # Simplify output to a vector instead of a list by computing the mean of the distributions ## map_nt&gt; 1:10 |&gt; ## map_nt+ map(rnorm, n = 10) |&gt; # output a list ## map_nt+ map_dbl(mean) # output an atomic vector ## [1] 1.359565 1.457077 2.843263 3.947156 4.844924 6.037905 7.266564 ## [8] 7.876624 9.107003 10.164666 ## ## map_nt&gt; # Using set_names() with character vectors is handy to keep track ## map_nt&gt; # of the original inputs: ## map_nt&gt; set_names(c(&quot;foo&quot;, &quot;bar&quot;)) |&gt; map_chr(paste0, &quot;:suffix&quot;) ## foo bar ## &quot;foo:suffix&quot; &quot;bar:suffix&quot; ## ## map_nt&gt; # Working with lists ## map_nt&gt; favorite_desserts &lt;- list(Sophia = &quot;banana bread&quot;, Eliott = &quot;pancakes&quot;, Karina = &quot;chocolate cake&quot;) ## ## map_nt&gt; favorite_desserts |&gt; map_chr(\\(food) paste(food, &quot;rocks!&quot;)) ## Sophia Eliott Karina ## &quot;banana bread rocks!&quot; &quot;pancakes rocks!&quot; &quot;chocolate cake rocks!&quot; ## ## map_nt&gt; # Extract by name or position ## map_nt&gt; # .default specifies value for elements that are missing or NULL ## map_nt&gt; l1 &lt;- list(list(a = 1L), list(a = NULL, b = 2L), list(b = 3L)) ## ## map_nt&gt; l1 |&gt; map(&quot;a&quot;, .default = &quot;???&quot;) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;???&quot; ## ## [[3]] ## [1] &quot;???&quot; ## ## ## map_nt&gt; l1 |&gt; map_int(&quot;b&quot;, .default = NA) ## [1] NA 2 3 ## ## map_nt&gt; l1 |&gt; map_int(2, .default = NA) ## [1] NA 2 NA ## ## map_nt&gt; # Supply multiple values to index deeply into a list ## map_nt&gt; l2 &lt;- list( ## map_nt+ list(num = 1:3, letters[1:3]), ## map_nt+ list(num = 101:103, letters[4:6]), ## map_nt+ list() ## map_nt+ ) ## ## map_nt&gt; l2 |&gt; map(c(2, 2)) ## [[1]] ## [1] &quot;b&quot; ## ## [[2]] ## [1] &quot;e&quot; ## ## [[3]] ## NULL ## ## ## map_nt&gt; # Use a list to build an extractor that mixes numeric indices and names, ## map_nt&gt; # and .default to provide a default value if the element does not exist ## map_nt&gt; l2 |&gt; map(list(&quot;num&quot;, 3)) ## [[1]] ## [1] 3 ## ## [[2]] ## [1] 103 ## ## [[3]] ## NULL ## ## ## map_nt&gt; l2 |&gt; map_int(list(&quot;num&quot;, 3), .default = NA) ## [1] 3 103 NA ## ## map_nt&gt; # Working with data frames ## map_nt&gt; # Use map_lgl(), map_dbl(), etc to return a vector instead of a list: ## map_nt&gt; mtcars |&gt; map_dbl(sum) ## mpg cyl disp hp drat wt qsec vs ## 642.900 198.000 7383.100 4694.000 115.090 102.952 571.160 14.000 ## am gear carb ## 13.000 118.000 90.000 ## ## map_nt&gt; # A more realistic example: split a data frame into pieces, fit a ## map_nt&gt; # model to each piece, summarise and extract R^2 ## map_nt&gt; mtcars |&gt; ## map_nt+ split(mtcars$cyl) |&gt; ## map_nt+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## map_nt+ map(summary) |&gt; ## map_nt+ map_dbl(&quot;r.squared&quot;) ## 4 6 8 ## 0.5086326 0.4645102 0.4229655 example(&quot;map_lgl&quot;) ## ## mp_lgl&gt; # Compute normal distributions from an atomic vector ## mp_lgl&gt; 1:10 |&gt; ## mp_lgl+ map(rnorm, n = 10) ## [[1]] ## [1] 0.5967523 0.4543398 0.7229271 1.1224787 -0.1883174 1.6431103 ## [7] 0.9234561 0.1566172 0.9897688 0.1013542 ## ## [[2]] ## [1] 2.249635 2.271085 1.833473 1.438773 2.485872 2.795750 2.944785 1.894406 ## [9] 1.708322 1.555596 ## ## [[3]] ## [1] 3.722642 1.560125 3.133018 2.407314 2.628768 2.665615 3.369843 1.923551 ## [9] 3.011656 4.381971 ## ## [[4]] ## [1] 2.951523 4.268072 4.109736 3.660655 3.597182 3.916465 4.943514 4.986009 ## [9] 5.079893 3.339539 ## ## [[5]] ## [1] 4.978122 5.795189 6.199343 6.655605 5.592086 5.719723 6.367421 4.340504 ## [9] 5.067664 4.161115 ## ## [[6]] ## [1] 5.787469 7.779894 6.864474 5.671061 6.613280 6.185962 4.734759 6.327404 ## [9] 6.318867 5.431653 ## ## [[7]] ## [1] 8.846869 5.883103 7.798493 6.435714 4.327976 6.525301 8.460801 8.537752 ## [9] 7.648991 7.981946 ## ## [[8]] ## [1] 10.174872 6.999568 6.337164 9.290724 9.821949 7.021981 7.989047 ## [8] 7.077178 9.285724 7.184304 ## ## [[9]] ## [1] 10.761108 8.800876 10.026637 8.015376 9.317565 9.626211 8.587623 ## [8] 9.159688 9.205834 9.409177 ## ## [[10]] ## [1] 8.363103 9.853529 9.847140 11.879810 10.597633 8.418214 10.199696 ## [8] 10.358009 8.899231 10.210242 ## ## ## mp_lgl&gt; # You can also use an anonymous function ## mp_lgl&gt; 1:10 |&gt; ## mp_lgl+ map(\\(x) rnorm(10, x)) ## [[1]] ## [1] 3.1771013 1.8159584 1.4289906 1.5107763 2.6566006 1.4424619 0.9061077 ## [8] 1.7682737 0.5883041 3.4265299 ## ## [[2]] ## [1] 0.40277444 1.70123532 0.89036148 2.90126094 -0.30565519 1.47657438 ## [7] 0.06219026 1.77137229 3.77829601 2.17550588 ## ## [[3]] ## [1] 1.654754 2.880518 2.937644 3.195766 3.552514 1.240369 2.451757 3.038929 ## [9] 2.884125 3.632229 ## ## [[4]] ## [1] 4.457169 4.864380 3.868448 4.067985 4.344373 2.766224 2.714609 3.772730 ## [9] 4.798967 2.613569 ## ## [[5]] ## [1] 2.184839 4.422465 6.351459 4.626574 3.901772 4.627055 6.367493 7.327617 ## [9] 3.506576 5.230564 ## ## [[6]] ## [1] 7.145823 8.027571 6.274576 7.775256 5.611583 6.708294 5.731473 4.307705 ## [9] 6.725675 4.613325 ## ## [[7]] ## [1] 6.301121 6.791611 6.814216 8.092097 5.163208 5.872318 7.064465 7.165874 ## [9] 6.452052 7.590932 ## ## [[8]] ## [1] 5.641506 7.588642 7.612029 9.884990 7.622542 9.217096 7.853424 7.330919 ## [9] 7.322830 8.074373 ## ## [[9]] ## [1] 10.148466 9.357763 8.961347 6.785676 8.586804 7.570045 8.996043 ## [8] 8.474778 8.793706 8.332182 ## ## [[10]] ## [1] 10.273571 10.200351 11.508384 9.715150 8.908599 9.771903 9.035531 ## [8] 9.659311 9.541459 8.839349 ## ## ## mp_lgl&gt; # Simplify output to a vector instead of a list by computing the mean of the distributions ## mp_lgl&gt; 1:10 |&gt; ## mp_lgl+ map(rnorm, n = 10) |&gt; # output a list ## mp_lgl+ map_dbl(mean) # output an atomic vector ## [1] 0.9662241 1.8904035 2.6958717 3.5409975 5.1600459 5.8384142 7.2778627 ## [8] 8.1608093 9.2702172 9.9323402 ## ## mp_lgl&gt; # Using set_names() with character vectors is handy to keep track ## mp_lgl&gt; # of the original inputs: ## mp_lgl&gt; set_names(c(&quot;foo&quot;, &quot;bar&quot;)) |&gt; map_chr(paste0, &quot;:suffix&quot;) ## foo bar ## &quot;foo:suffix&quot; &quot;bar:suffix&quot; ## ## mp_lgl&gt; # Working with lists ## mp_lgl&gt; favorite_desserts &lt;- list(Sophia = &quot;banana bread&quot;, Eliott = &quot;pancakes&quot;, Karina = &quot;chocolate cake&quot;) ## ## mp_lgl&gt; favorite_desserts |&gt; map_chr(\\(food) paste(food, &quot;rocks!&quot;)) ## Sophia Eliott Karina ## &quot;banana bread rocks!&quot; &quot;pancakes rocks!&quot; &quot;chocolate cake rocks!&quot; ## ## mp_lgl&gt; # Extract by name or position ## mp_lgl&gt; # .default specifies value for elements that are missing or NULL ## mp_lgl&gt; l1 &lt;- list(list(a = 1L), list(a = NULL, b = 2L), list(b = 3L)) ## ## mp_lgl&gt; l1 |&gt; map(&quot;a&quot;, .default = &quot;???&quot;) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;???&quot; ## ## [[3]] ## [1] &quot;???&quot; ## ## ## mp_lgl&gt; l1 |&gt; map_int(&quot;b&quot;, .default = NA) ## [1] NA 2 3 ## ## mp_lgl&gt; l1 |&gt; map_int(2, .default = NA) ## [1] NA 2 NA ## ## mp_lgl&gt; # Supply multiple values to index deeply into a list ## mp_lgl&gt; l2 &lt;- list( ## mp_lgl+ list(num = 1:3, letters[1:3]), ## mp_lgl+ list(num = 101:103, letters[4:6]), ## mp_lgl+ list() ## mp_lgl+ ) ## ## mp_lgl&gt; l2 |&gt; map(c(2, 2)) ## [[1]] ## [1] &quot;b&quot; ## ## [[2]] ## [1] &quot;e&quot; ## ## [[3]] ## NULL ## ## ## mp_lgl&gt; # Use a list to build an extractor that mixes numeric indices and names, ## mp_lgl&gt; # and .default to provide a default value if the element does not exist ## mp_lgl&gt; l2 |&gt; map(list(&quot;num&quot;, 3)) ## [[1]] ## [1] 3 ## ## [[2]] ## [1] 103 ## ## [[3]] ## NULL ## ## ## mp_lgl&gt; l2 |&gt; map_int(list(&quot;num&quot;, 3), .default = NA) ## [1] 3 103 NA ## ## mp_lgl&gt; # Working with data frames ## mp_lgl&gt; # Use map_lgl(), map_dbl(), etc to return a vector instead of a list: ## mp_lgl&gt; mtcars |&gt; map_dbl(sum) ## mpg cyl disp hp drat wt qsec vs ## 642.900 198.000 7383.100 4694.000 115.090 102.952 571.160 14.000 ## am gear carb ## 13.000 118.000 90.000 ## ## mp_lgl&gt; # A more realistic example: split a data frame into pieces, fit a ## mp_lgl&gt; # model to each piece, summarise and extract R^2 ## mp_lgl&gt; mtcars |&gt; ## mp_lgl+ split(mtcars$cyl) |&gt; ## mp_lgl+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp_lgl+ map(summary) |&gt; ## mp_lgl+ map_dbl(&quot;r.squared&quot;) ## 4 6 8 ## 0.5086326 0.4645102 0.4229655 example(&quot;map_vec&quot;) ## ## map_vc&gt; # Compute normal distributions from an atomic vector ## map_vc&gt; 1:10 |&gt; ## map_vc+ map(rnorm, n = 10) ## [[1]] ## [1] 1.38604203 1.90757243 1.14096149 0.26168655 0.94621313 1.59193933 ## [7] -0.56901828 0.77648032 -0.09472079 1.78294145 ## ## [[2]] ## [1] 2.045503 1.599628 2.679135 1.835012 2.018672 3.451387 3.843036 1.810334 ## [9] 1.234081 1.870294 ## ## [[3]] ## [1] 2.784606 2.206926 3.445134 4.740863 0.791004 2.044555 3.558974 3.342120 ## [9] 2.841481 4.572336 ## ## [[4]] ## [1] 3.996307 3.996027 3.956678 3.350192 3.333226 2.580734 4.307078 4.111929 ## [9] 4.975616 3.503758 ## ## [[5]] ## [1] 5.569839 5.320121 4.993411 6.318104 5.334916 4.031843 3.736078 5.471868 ## [9] 5.431147 4.761344 ## ## [[6]] ## [1] 4.832436 8.033939 6.218581 6.644334 5.874621 7.291922 6.616711 7.083095 ## [9] 4.766555 7.400469 ## ## [[7]] ## [1] 7.557319 6.398632 5.231254 7.443476 7.900966 5.725895 6.827429 7.443030 ## [9] 8.059383 7.128839 ## ## [[8]] ## [1] 6.339567 7.406427 9.657051 9.007508 8.975620 6.815804 6.776850 6.663811 ## [9] 8.687691 7.953286 ## ## [[9]] ## [1] 8.020960 7.911821 7.772110 9.034803 9.248288 10.949059 7.389669 ## [8] 9.063325 8.306870 9.513994 ## ## [[10]] ## [1] 9.024628 9.562471 10.100891 9.743682 10.239434 10.147486 10.528321 ## [8] 10.291289 10.531867 9.909024 ## ## ## map_vc&gt; # You can also use an anonymous function ## map_vc&gt; 1:10 |&gt; ## map_vc+ map(\\(x) rnorm(10, x)) ## [[1]] ## [1] 1.0309642 0.6536577 0.8535970 2.8410275 1.8561963 0.3587650 ## [7] 2.8559758 1.0457273 -0.5229198 2.2037231 ## ## [[2]] ## [1] 0.9595716896 2.7957391163 1.6584107866 -0.0001670537 1.6866315039 ## [6] 1.3286277270 4.1194751206 2.3764106279 2.2157162622 1.8030145253 ## ## [[3]] ## [1] 2.548308 1.547875 1.496325 2.301854 1.021169 3.048753 2.656265 4.320587 ## [9] 2.877774 2.963500 ## ## [[4]] ## [1] 6.430777 5.171786 4.523788 4.571040 2.783211 5.687297 5.262559 4.181712 ## [9] 4.398829 3.464428 ## ## [[5]] ## [1] 5.027874 5.960727 3.748245 6.222732 4.078046 3.572125 5.405297 5.058458 ## [9] 4.953512 4.884571 ## ## [[6]] ## [1] 6.918714 6.082971 4.949108 6.325203 6.848302 6.031539 5.617526 6.809709 ## [9] 6.657336 6.057574 ## ## [[7]] ## [1] 6.230131 6.106821 6.649912 7.126289 5.869520 7.758372 6.430557 6.898726 ## [9] 7.785129 6.954427 ## ## [[8]] ## [1] 7.620063 7.346343 7.920957 5.819790 8.372425 8.778131 9.322884 9.202213 ## [9] 7.148310 6.686473 ## ## [[9]] ## [1] 9.095652 10.978532 10.176599 7.220106 10.019266 8.149967 7.394095 ## [8] 9.664111 8.528827 9.164621 ## ## [[10]] ## [1] 12.311992 10.286122 8.697783 9.964146 10.731348 9.179534 7.653186 ## [8] 10.236401 10.841314 11.158109 ## ## ## map_vc&gt; # Simplify output to a vector instead of a list by computing the mean of the distributions ## map_vc&gt; 1:10 |&gt; ## map_vc+ map(rnorm, n = 10) |&gt; # output a list ## map_vc+ map_dbl(mean) # output an atomic vector ## [1] 1.174141 2.337727 3.713061 4.455184 5.559091 6.325876 7.296157 ## [8] 7.772128 9.323966 10.255760 ## ## map_vc&gt; # Using set_names() with character vectors is handy to keep track ## map_vc&gt; # of the original inputs: ## map_vc&gt; set_names(c(&quot;foo&quot;, &quot;bar&quot;)) |&gt; map_chr(paste0, &quot;:suffix&quot;) ## foo bar ## &quot;foo:suffix&quot; &quot;bar:suffix&quot; ## ## map_vc&gt; # Working with lists ## map_vc&gt; favorite_desserts &lt;- list(Sophia = &quot;banana bread&quot;, Eliott = &quot;pancakes&quot;, Karina = &quot;chocolate cake&quot;) ## ## map_vc&gt; favorite_desserts |&gt; map_chr(\\(food) paste(food, &quot;rocks!&quot;)) ## Sophia Eliott Karina ## &quot;banana bread rocks!&quot; &quot;pancakes rocks!&quot; &quot;chocolate cake rocks!&quot; ## ## map_vc&gt; # Extract by name or position ## map_vc&gt; # .default specifies value for elements that are missing or NULL ## map_vc&gt; l1 &lt;- list(list(a = 1L), list(a = NULL, b = 2L), list(b = 3L)) ## ## map_vc&gt; l1 |&gt; map(&quot;a&quot;, .default = &quot;???&quot;) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;???&quot; ## ## [[3]] ## [1] &quot;???&quot; ## ## ## map_vc&gt; l1 |&gt; map_int(&quot;b&quot;, .default = NA) ## [1] NA 2 3 ## ## map_vc&gt; l1 |&gt; map_int(2, .default = NA) ## [1] NA 2 NA ## ## map_vc&gt; # Supply multiple values to index deeply into a list ## map_vc&gt; l2 &lt;- list( ## map_vc+ list(num = 1:3, letters[1:3]), ## map_vc+ list(num = 101:103, letters[4:6]), ## map_vc+ list() ## map_vc+ ) ## ## map_vc&gt; l2 |&gt; map(c(2, 2)) ## [[1]] ## [1] &quot;b&quot; ## ## [[2]] ## [1] &quot;e&quot; ## ## [[3]] ## NULL ## ## ## map_vc&gt; # Use a list to build an extractor that mixes numeric indices and names, ## map_vc&gt; # and .default to provide a default value if the element does not exist ## map_vc&gt; l2 |&gt; map(list(&quot;num&quot;, 3)) ## [[1]] ## [1] 3 ## ## [[2]] ## [1] 103 ## ## [[3]] ## NULL ## ## ## map_vc&gt; l2 |&gt; map_int(list(&quot;num&quot;, 3), .default = NA) ## [1] 3 103 NA ## ## map_vc&gt; # Working with data frames ## map_vc&gt; # Use map_lgl(), map_dbl(), etc to return a vector instead of a list: ## map_vc&gt; mtcars |&gt; map_dbl(sum) ## mpg cyl disp hp drat wt qsec vs ## 642.900 198.000 7383.100 4694.000 115.090 102.952 571.160 14.000 ## am gear carb ## 13.000 118.000 90.000 ## ## map_vc&gt; # A more realistic example: split a data frame into pieces, fit a ## map_vc&gt; # model to each piece, summarise and extract R^2 ## map_vc&gt; mtcars |&gt; ## map_vc+ split(mtcars$cyl) |&gt; ## map_vc+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## map_vc+ map(summary) |&gt; ## map_vc+ map_dbl(&quot;r.squared&quot;) ## 4 6 8 ## 0.5086326 0.4645102 0.4229655 4.2 map2 functions example(&quot;map2&quot;) ## ## map2&gt; x &lt;- list(1, 1, 1) ## ## map2&gt; y &lt;- list(10, 20, 30) ## ## map2&gt; map2(x, y, \\(x, y) x + y) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## map2&gt; # Or just ## map2&gt; map2(x, y, `+`) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## map2&gt; # Split into pieces, fit model to each piece, then predict ## map2&gt; by_cyl &lt;- mtcars |&gt; split(mtcars$cyl) ## ## map2&gt; mods &lt;- by_cyl |&gt; map(\\(df) lm(mpg ~ wt, data = df)) ## ## map2&gt; map2(mods, by_cyl, predict) ## $`4` ## Datsun 710 Merc 240D Merc 230 Fiat 128 Honda Civic ## 26.47010 21.55719 21.78307 27.14774 30.45125 ## Toyota Corolla Toyota Corona Fiat X1-9 Porsche 914-2 Lotus Europa ## 29.20890 25.65128 28.64420 27.48656 31.02725 ## Volvo 142E ## 23.87247 ## ## $`6` ## Mazda RX4 Mazda RX4 Wag Hornet 4 Drive Valiant Merc 280 ## 21.12497 20.41604 19.47080 18.78968 18.84528 ## Merc 280C Ferrari Dino ## 18.84528 20.70795 ## ## $`8` ## Hornet Sportabout Duster 360 Merc 450SE Merc 450SL ## 16.32604 16.04103 14.94481 15.69024 ## Merc 450SLC Cadillac Fleetwood Lincoln Continental Chrysler Imperial ## 15.58061 12.35773 11.97625 12.14945 ## Dodge Challenger AMC Javelin Camaro Z28 Pontiac Firebird ## 16.15065 16.33700 15.44907 15.43811 ## Ford Pantera L Maserati Bora ## 16.91800 16.04103 example(&quot;map2_chr&quot;) ## ## mp2_ch&gt; x &lt;- list(1, 1, 1) ## ## mp2_ch&gt; y &lt;- list(10, 20, 30) ## ## mp2_ch&gt; map2(x, y, \\(x, y) x + y) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## mp2_ch&gt; # Or just ## mp2_ch&gt; map2(x, y, `+`) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## mp2_ch&gt; # Split into pieces, fit model to each piece, then predict ## mp2_ch&gt; by_cyl &lt;- mtcars |&gt; split(mtcars$cyl) ## ## mp2_ch&gt; mods &lt;- by_cyl |&gt; map(\\(df) lm(mpg ~ wt, data = df)) ## ## mp2_ch&gt; map2(mods, by_cyl, predict) ## $`4` ## Datsun 710 Merc 240D Merc 230 Fiat 128 Honda Civic ## 26.47010 21.55719 21.78307 27.14774 30.45125 ## Toyota Corolla Toyota Corona Fiat X1-9 Porsche 914-2 Lotus Europa ## 29.20890 25.65128 28.64420 27.48656 31.02725 ## Volvo 142E ## 23.87247 ## ## $`6` ## Mazda RX4 Mazda RX4 Wag Hornet 4 Drive Valiant Merc 280 ## 21.12497 20.41604 19.47080 18.78968 18.84528 ## Merc 280C Ferrari Dino ## 18.84528 20.70795 ## ## $`8` ## Hornet Sportabout Duster 360 Merc 450SE Merc 450SL ## 16.32604 16.04103 14.94481 15.69024 ## Merc 450SLC Cadillac Fleetwood Lincoln Continental Chrysler Imperial ## 15.58061 12.35773 11.97625 12.14945 ## Dodge Challenger AMC Javelin Camaro Z28 Pontiac Firebird ## 16.15065 16.33700 15.44907 15.43811 ## Ford Pantera L Maserati Bora ## 16.91800 16.04103 example(&quot;map2_dbl&quot;) ## ## mp2_db&gt; x &lt;- list(1, 1, 1) ## ## mp2_db&gt; y &lt;- list(10, 20, 30) ## ## mp2_db&gt; map2(x, y, \\(x, y) x + y) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## mp2_db&gt; # Or just ## mp2_db&gt; map2(x, y, `+`) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## mp2_db&gt; # Split into pieces, fit model to each piece, then predict ## mp2_db&gt; by_cyl &lt;- mtcars |&gt; split(mtcars$cyl) ## ## mp2_db&gt; mods &lt;- by_cyl |&gt; map(\\(df) lm(mpg ~ wt, data = df)) ## ## mp2_db&gt; map2(mods, by_cyl, predict) ## $`4` ## Datsun 710 Merc 240D Merc 230 Fiat 128 Honda Civic ## 26.47010 21.55719 21.78307 27.14774 30.45125 ## Toyota Corolla Toyota Corona Fiat X1-9 Porsche 914-2 Lotus Europa ## 29.20890 25.65128 28.64420 27.48656 31.02725 ## Volvo 142E ## 23.87247 ## ## $`6` ## Mazda RX4 Mazda RX4 Wag Hornet 4 Drive Valiant Merc 280 ## 21.12497 20.41604 19.47080 18.78968 18.84528 ## Merc 280C Ferrari Dino ## 18.84528 20.70795 ## ## $`8` ## Hornet Sportabout Duster 360 Merc 450SE Merc 450SL ## 16.32604 16.04103 14.94481 15.69024 ## Merc 450SLC Cadillac Fleetwood Lincoln Continental Chrysler Imperial ## 15.58061 12.35773 11.97625 12.14945 ## Dodge Challenger AMC Javelin Camaro Z28 Pontiac Firebird ## 16.15065 16.33700 15.44907 15.43811 ## Ford Pantera L Maserati Bora ## 16.91800 16.04103 example(&quot;map2_df&quot;) ## ## mp2_df&gt; # map --------------------------------------------- ## mp2_df&gt; # Was: ## mp2_df&gt; mtcars |&gt; ## mp2_df+ split(mtcars$cyl) |&gt; ## mp2_df+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp2_df+ map_dfr(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## mp2_df&gt; # Now: ## mp2_df&gt; mtcars |&gt; ## mp2_df+ split(mtcars$cyl) |&gt; ## mp2_df+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp2_df+ map(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) |&gt; ## mp2_df+ list_rbind() ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## mp2_df&gt; # map2 --------------------------------------------- ## mp2_df&gt; ## mp2_df&gt; ex_fun &lt;- function(arg1, arg2){ ## mp2_df+ col &lt;- arg1 + arg2 ## mp2_df+ x &lt;- as.data.frame(col) ## mp2_df+ } ## ## mp2_df&gt; arg1 &lt;- 1:4 ## ## mp2_df&gt; arg2 &lt;- 10:13 ## ## mp2_df&gt; # was ## mp2_df&gt; map2_dfr(arg1, arg2, ex_fun) ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## mp2_df&gt; # now ## mp2_df&gt; map2(arg1, arg2, ex_fun) |&gt; list_rbind() ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## mp2_df&gt; # was ## mp2_df&gt; map2_dfc(arg1, arg2, ex_fun) ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 ## ## mp2_df&gt; # now ## mp2_df&gt; map2(arg1, arg2, ex_fun) |&gt; list_cbind() ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 example(&quot;map2_dfc&quot;) ## ## mp2_df&gt; # map --------------------------------------------- ## mp2_df&gt; # Was: ## mp2_df&gt; mtcars |&gt; ## mp2_df+ split(mtcars$cyl) |&gt; ## mp2_df+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp2_df+ map_dfr(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## mp2_df&gt; # Now: ## mp2_df&gt; mtcars |&gt; ## mp2_df+ split(mtcars$cyl) |&gt; ## mp2_df+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp2_df+ map(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) |&gt; ## mp2_df+ list_rbind() ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## mp2_df&gt; # map2 --------------------------------------------- ## mp2_df&gt; ## mp2_df&gt; ex_fun &lt;- function(arg1, arg2){ ## mp2_df+ col &lt;- arg1 + arg2 ## mp2_df+ x &lt;- as.data.frame(col) ## mp2_df+ } ## ## mp2_df&gt; arg1 &lt;- 1:4 ## ## mp2_df&gt; arg2 &lt;- 10:13 ## ## mp2_df&gt; # was ## mp2_df&gt; map2_dfr(arg1, arg2, ex_fun) ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## mp2_df&gt; # now ## mp2_df&gt; map2(arg1, arg2, ex_fun) |&gt; list_rbind() ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## mp2_df&gt; # was ## mp2_df&gt; map2_dfc(arg1, arg2, ex_fun) ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 ## ## mp2_df&gt; # now ## mp2_df&gt; map2(arg1, arg2, ex_fun) |&gt; list_cbind() ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 example(&quot;map2_dfr&quot;) ## ## mp2_df&gt; # map --------------------------------------------- ## mp2_df&gt; # Was: ## mp2_df&gt; mtcars |&gt; ## mp2_df+ split(mtcars$cyl) |&gt; ## mp2_df+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp2_df+ map_dfr(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## mp2_df&gt; # Now: ## mp2_df&gt; mtcars |&gt; ## mp2_df+ split(mtcars$cyl) |&gt; ## mp2_df+ map(\\(df) lm(mpg ~ wt, data = df)) |&gt; ## mp2_df+ map(\\(mod) as.data.frame(t(as.matrix(coef(mod))))) |&gt; ## mp2_df+ list_rbind() ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 ## ## mp2_df&gt; # map2 --------------------------------------------- ## mp2_df&gt; ## mp2_df&gt; ex_fun &lt;- function(arg1, arg2){ ## mp2_df+ col &lt;- arg1 + arg2 ## mp2_df+ x &lt;- as.data.frame(col) ## mp2_df+ } ## ## mp2_df&gt; arg1 &lt;- 1:4 ## ## mp2_df&gt; arg2 &lt;- 10:13 ## ## mp2_df&gt; # was ## mp2_df&gt; map2_dfr(arg1, arg2, ex_fun) ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## mp2_df&gt; # now ## mp2_df&gt; map2(arg1, arg2, ex_fun) |&gt; list_rbind() ## col ## 1 11 ## 2 13 ## 3 15 ## 4 17 ## ## mp2_df&gt; # was ## mp2_df&gt; map2_dfc(arg1, arg2, ex_fun) ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 ## ## mp2_df&gt; # now ## mp2_df&gt; map2(arg1, arg2, ex_fun) |&gt; list_cbind() ## col...1 col...2 col...3 col...4 ## 1 11 13 15 17 example(&quot;map2_int&quot;) ## ## mp2_nt&gt; x &lt;- list(1, 1, 1) ## ## mp2_nt&gt; y &lt;- list(10, 20, 30) ## ## mp2_nt&gt; map2(x, y, \\(x, y) x + y) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## mp2_nt&gt; # Or just ## mp2_nt&gt; map2(x, y, `+`) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## mp2_nt&gt; # Split into pieces, fit model to each piece, then predict ## mp2_nt&gt; by_cyl &lt;- mtcars |&gt; split(mtcars$cyl) ## ## mp2_nt&gt; mods &lt;- by_cyl |&gt; map(\\(df) lm(mpg ~ wt, data = df)) ## ## mp2_nt&gt; map2(mods, by_cyl, predict) ## $`4` ## Datsun 710 Merc 240D Merc 230 Fiat 128 Honda Civic ## 26.47010 21.55719 21.78307 27.14774 30.45125 ## Toyota Corolla Toyota Corona Fiat X1-9 Porsche 914-2 Lotus Europa ## 29.20890 25.65128 28.64420 27.48656 31.02725 ## Volvo 142E ## 23.87247 ## ## $`6` ## Mazda RX4 Mazda RX4 Wag Hornet 4 Drive Valiant Merc 280 ## 21.12497 20.41604 19.47080 18.78968 18.84528 ## Merc 280C Ferrari Dino ## 18.84528 20.70795 ## ## $`8` ## Hornet Sportabout Duster 360 Merc 450SE Merc 450SL ## 16.32604 16.04103 14.94481 15.69024 ## Merc 450SLC Cadillac Fleetwood Lincoln Continental Chrysler Imperial ## 15.58061 12.35773 11.97625 12.14945 ## Dodge Challenger AMC Javelin Camaro Z28 Pontiac Firebird ## 16.15065 16.33700 15.44907 15.43811 ## Ford Pantera L Maserati Bora ## 16.91800 16.04103 example(&quot;map2_lgl&quot;) ## ## mp2_lg&gt; x &lt;- list(1, 1, 1) ## ## mp2_lg&gt; y &lt;- list(10, 20, 30) ## ## mp2_lg&gt; map2(x, y, \\(x, y) x + y) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## mp2_lg&gt; # Or just ## mp2_lg&gt; map2(x, y, `+`) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## mp2_lg&gt; # Split into pieces, fit model to each piece, then predict ## mp2_lg&gt; by_cyl &lt;- mtcars |&gt; split(mtcars$cyl) ## ## mp2_lg&gt; mods &lt;- by_cyl |&gt; map(\\(df) lm(mpg ~ wt, data = df)) ## ## mp2_lg&gt; map2(mods, by_cyl, predict) ## $`4` ## Datsun 710 Merc 240D Merc 230 Fiat 128 Honda Civic ## 26.47010 21.55719 21.78307 27.14774 30.45125 ## Toyota Corolla Toyota Corona Fiat X1-9 Porsche 914-2 Lotus Europa ## 29.20890 25.65128 28.64420 27.48656 31.02725 ## Volvo 142E ## 23.87247 ## ## $`6` ## Mazda RX4 Mazda RX4 Wag Hornet 4 Drive Valiant Merc 280 ## 21.12497 20.41604 19.47080 18.78968 18.84528 ## Merc 280C Ferrari Dino ## 18.84528 20.70795 ## ## $`8` ## Hornet Sportabout Duster 360 Merc 450SE Merc 450SL ## 16.32604 16.04103 14.94481 15.69024 ## Merc 450SLC Cadillac Fleetwood Lincoln Continental Chrysler Imperial ## 15.58061 12.35773 11.97625 12.14945 ## Dodge Challenger AMC Javelin Camaro Z28 Pontiac Firebird ## 16.15065 16.33700 15.44907 15.43811 ## Ford Pantera L Maserati Bora ## 16.91800 16.04103 example(&quot;map2_raw&quot;) example(&quot;map2_vec&quot;) ## ## mp2_vc&gt; x &lt;- list(1, 1, 1) ## ## mp2_vc&gt; y &lt;- list(10, 20, 30) ## ## mp2_vc&gt; map2(x, y, \\(x, y) x + y) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## mp2_vc&gt; # Or just ## mp2_vc&gt; map2(x, y, `+`) ## [[1]] ## [1] 11 ## ## [[2]] ## [1] 21 ## ## [[3]] ## [1] 31 ## ## ## mp2_vc&gt; # Split into pieces, fit model to each piece, then predict ## mp2_vc&gt; by_cyl &lt;- mtcars |&gt; split(mtcars$cyl) ## ## mp2_vc&gt; mods &lt;- by_cyl |&gt; map(\\(df) lm(mpg ~ wt, data = df)) ## ## mp2_vc&gt; map2(mods, by_cyl, predict) ## $`4` ## Datsun 710 Merc 240D Merc 230 Fiat 128 Honda Civic ## 26.47010 21.55719 21.78307 27.14774 30.45125 ## Toyota Corolla Toyota Corona Fiat X1-9 Porsche 914-2 Lotus Europa ## 29.20890 25.65128 28.64420 27.48656 31.02725 ## Volvo 142E ## 23.87247 ## ## $`6` ## Mazda RX4 Mazda RX4 Wag Hornet 4 Drive Valiant Merc 280 ## 21.12497 20.41604 19.47080 18.78968 18.84528 ## Merc 280C Ferrari Dino ## 18.84528 20.70795 ## ## $`8` ## Hornet Sportabout Duster 360 Merc 450SE Merc 450SL ## 16.32604 16.04103 14.94481 15.69024 ## Merc 450SLC Cadillac Fleetwood Lincoln Continental Chrysler Imperial ## 15.58061 12.35773 11.97625 12.14945 ## Dodge Challenger AMC Javelin Camaro Z28 Pontiac Firebird ## 16.15065 16.33700 15.44907 15.43811 ## Ford Pantera L Maserati Bora ## 16.91800 16.04103 "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
