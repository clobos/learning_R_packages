[["index.html", "Learning R packages 1 Intro 1.1 Carrega pacotes a serem usados 1.2 Alguns atalhos no Rstudio", " Learning R packages Cristian Villegas 2023-05-11 1 Intro 1.1 Carrega pacotes a serem usados #install.packages(&quot;tidyverse&quot;) #install.packages(&quot;dplyr&quot;) #install.packages(&quot;tidyr&quot;) #install.packages(&quot;ggplot2&quot;) library(tidyverse) # Manipulação de dados #library(dplyr) # Visualização de gráficos library(ggplot2) library(gridExtra) library(patchwork) library(plotly) library(esquisse) # Para dados gráfico de perfis library(nlme) Ver como citar referências Wickham et al. (2019), Wickham (2023), Wickham, Vaughan, and Girlich (2023), Wickham, Chang, et al. (2023), Wickham and Henry (2023), Wickham, François, et al. (2023), Xie (2023b), Xie (2023a) 1.2 Alguns atalhos no Rstudio Para considerar Operador Pipe (%&gt;%): Ctrl + Shift + M (Windows) ou Cmd + Shift + M (Mac). Criar novos chunks: Ctrl + Alt + I (Windows) ou Cmd + Option + I (Mac). References "],["dplyr-60-minutos.html", "2 dplyr (60 minutos) 2.1 Carrega pacotes a serem usados 2.2 Descrição dos dados mpg 2.3 Lista de funções do pacote dplyr 2.4 Operador Pipe 2.5 select() para colunas 2.6 rename() 2.7 mutate() para colunas 2.8 transmute() 2.9 filter() para linhas 2.10 slice() para linhas 2.11 arrange() para linhas 2.12 distinct() para linhas 2.13 summarise() 2.14 group_by() 2.15 count() 2.16 sample_n() 2.17 sample_frac()", " 2 dplyr (60 minutos) 2.1 Carrega pacotes a serem usados #install.packages(&quot;tidyverse&quot;) #install.packages(&quot;dplyr&quot;) #install.packages(&quot;tidyr&quot;) #install.packages(&quot;ggplot2&quot;) library(tidyverse) # Manipulação de dados #library(dplyr) # Visualização de gráficos library(ggplot2) library(gridExtra) library(patchwork) library(plotly) library(esquisse) # Para dados gráfico de perfis library(nlme) 2.2 Descrição dos dados mpg Dados de economia de combustível de 1999 a 2008 para 38 modelos populares de carros. Este conjunto de dados contém um subconjunto dos dados de economia de combustível que a EPA disponibiliza em https://fueleconomy.gov/. Ele contém apenas modelos que tiveram um novo lançamento a cada ano entre 1999 e 2008 - isso foi usado como um substituto para a popularidade do carro. Um data frame com 234 linhas e 11 variáveis: manufacturer nome do fabricante model nome do modelo displ cilindrada do motor, em litros year ano de fabricação cyl número de cilindros trans tipo de transmissão drv o tipo de trem de força, onde f = tração dianteira, r = tração traseira e 4 = 4wd cty milhas urbanas por galão hwy milhas rodoviárias por galão fl tipo de combustível class “tipo” de carro #help(&quot;mpg&quot;) library(tidyverse) dados &lt;- mpg glimpse(dados) ## Rows: 234 ## Columns: 11 ## $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;… ## $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 quattro&quot;, &quot;… ## $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.… ## $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200… ## $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, … ## $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)&quot;, &quot;auto… ## $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4… ## $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1… ## $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2… ## $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p… ## $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;c… dados &lt;- mutate(.data = dados, across(where(is.character), as.factor)) #View(df) glimpse(dados) ## Rows: 234 ## Columns: 11 ## $ manufacturer &lt;fct&gt; audi, audi, audi, audi, audi, audi, audi, audi, audi, aud… ## $ model &lt;fct&gt; a4, a4, a4, a4, a4, a4, a4, a4 quattro, a4 quattro, a4 qu… ## $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.… ## $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200… ## $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, … ## $ trans &lt;fct&gt; auto(l5), manual(m5), manual(m6), auto(av), auto(l5), man… ## $ drv &lt;fct&gt; f, f, f, f, f, f, f, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, r, … ## $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1… ## $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2… ## $ fl &lt;fct&gt; p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, r, … ## $ class &lt;fct&gt; compact, compact, compact, compact, compact, compact, com… 2.3 Lista de funções do pacote dplyr ls(&quot;package:dplyr&quot;) ## [1] &quot;%&gt;%&quot; &quot;across&quot; &quot;add_count&quot; ## [4] &quot;add_count_&quot; &quot;add_row&quot; &quot;add_rownames&quot; ## [7] &quot;add_tally&quot; &quot;add_tally_&quot; &quot;all_equal&quot; ## [10] &quot;all_of&quot; &quot;all_vars&quot; &quot;anti_join&quot; ## [13] &quot;any_of&quot; &quot;any_vars&quot; &quot;arrange&quot; ## [16] &quot;arrange_&quot; &quot;arrange_all&quot; &quot;arrange_at&quot; ## [19] &quot;arrange_if&quot; &quot;as.tbl&quot; &quot;as_data_frame&quot; ## [22] &quot;as_label&quot; &quot;as_tibble&quot; &quot;auto_copy&quot; ## [25] &quot;band_instruments&quot; &quot;band_instruments2&quot; &quot;band_members&quot; ## [28] &quot;bench_tbls&quot; &quot;between&quot; &quot;bind_cols&quot; ## [31] &quot;bind_rows&quot; &quot;c_across&quot; &quot;case_when&quot; ## [34] &quot;changes&quot; &quot;check_dbplyr&quot; &quot;coalesce&quot; ## [37] &quot;collapse&quot; &quot;collect&quot; &quot;combine&quot; ## [40] &quot;common_by&quot; &quot;compare_tbls&quot; &quot;compare_tbls2&quot; ## [43] &quot;compute&quot; &quot;contains&quot; &quot;copy_to&quot; ## [46] &quot;count&quot; &quot;count_&quot; &quot;cumall&quot; ## [49] &quot;cumany&quot; &quot;cume_dist&quot; &quot;cummean&quot; ## [52] &quot;cur_column&quot; &quot;cur_data&quot; &quot;cur_data_all&quot; ## [55] &quot;cur_group&quot; &quot;cur_group_id&quot; &quot;cur_group_rows&quot; ## [58] &quot;current_vars&quot; &quot;data_frame&quot; &quot;data_frame_&quot; ## [61] &quot;db_analyze&quot; &quot;db_begin&quot; &quot;db_commit&quot; ## [64] &quot;db_create_index&quot; &quot;db_create_indexes&quot; &quot;db_create_table&quot; ## [67] &quot;db_data_type&quot; &quot;db_desc&quot; &quot;db_drop_table&quot; ## [70] &quot;db_explain&quot; &quot;db_has_table&quot; &quot;db_insert_into&quot; ## [73] &quot;db_list_tables&quot; &quot;db_query_fields&quot; &quot;db_query_rows&quot; ## [76] &quot;db_rollback&quot; &quot;db_save_query&quot; &quot;db_write_table&quot; ## [79] &quot;dense_rank&quot; &quot;desc&quot; &quot;dim_desc&quot; ## [82] &quot;distinct&quot; &quot;distinct_&quot; &quot;distinct_all&quot; ## [85] &quot;distinct_at&quot; &quot;distinct_if&quot; &quot;distinct_prepare&quot; ## [88] &quot;do&quot; &quot;do_&quot; &quot;dplyr_col_modify&quot; ## [91] &quot;dplyr_reconstruct&quot; &quot;dplyr_row_slice&quot; &quot;ends_with&quot; ## [94] &quot;enexpr&quot; &quot;enexprs&quot; &quot;enquo&quot; ## [97] &quot;enquos&quot; &quot;ensym&quot; &quot;ensyms&quot; ## [100] &quot;eval_tbls&quot; &quot;eval_tbls2&quot; &quot;everything&quot; ## [103] &quot;explain&quot; &quot;expr&quot; &quot;failwith&quot; ## [106] &quot;filter&quot; &quot;filter_&quot; &quot;filter_all&quot; ## [109] &quot;filter_at&quot; &quot;filter_if&quot; &quot;first&quot; ## [112] &quot;frame_data&quot; &quot;full_join&quot; &quot;funs&quot; ## [115] &quot;funs_&quot; &quot;glimpse&quot; &quot;group_by&quot; ## [118] &quot;group_by_&quot; &quot;group_by_all&quot; &quot;group_by_at&quot; ## [121] &quot;group_by_drop_default&quot; &quot;group_by_if&quot; &quot;group_by_prepare&quot; ## [124] &quot;group_cols&quot; &quot;group_data&quot; &quot;group_indices&quot; ## [127] &quot;group_indices_&quot; &quot;group_keys&quot; &quot;group_map&quot; ## [130] &quot;group_modify&quot; &quot;group_nest&quot; &quot;group_rows&quot; ## [133] &quot;group_size&quot; &quot;group_split&quot; &quot;group_trim&quot; ## [136] &quot;group_vars&quot; &quot;group_walk&quot; &quot;grouped_df&quot; ## [139] &quot;groups&quot; &quot;id&quot; &quot;ident&quot; ## [142] &quot;if_all&quot; &quot;if_any&quot; &quot;if_else&quot; ## [145] &quot;inner_join&quot; &quot;intersect&quot; &quot;is.grouped_df&quot; ## [148] &quot;is.src&quot; &quot;is.tbl&quot; &quot;is_grouped_df&quot; ## [151] &quot;lag&quot; &quot;last&quot; &quot;last_col&quot; ## [154] &quot;lead&quot; &quot;left_join&quot; &quot;location&quot; ## [157] &quot;lst&quot; &quot;lst_&quot; &quot;make_tbl&quot; ## [160] &quot;matches&quot; &quot;min_rank&quot; &quot;mutate&quot; ## [163] &quot;mutate_&quot; &quot;mutate_all&quot; &quot;mutate_at&quot; ## [166] &quot;mutate_each&quot; &quot;mutate_each_&quot; &quot;mutate_if&quot; ## [169] &quot;n&quot; &quot;n_distinct&quot; &quot;n_groups&quot; ## [172] &quot;na_if&quot; &quot;near&quot; &quot;nest_by&quot; ## [175] &quot;nest_join&quot; &quot;new_grouped_df&quot; &quot;new_rowwise_df&quot; ## [178] &quot;nth&quot; &quot;ntile&quot; &quot;num_range&quot; ## [181] &quot;one_of&quot; &quot;order_by&quot; &quot;percent_rank&quot; ## [184] &quot;progress_estimated&quot; &quot;pull&quot; &quot;quo&quot; ## [187] &quot;quo_name&quot; &quot;quos&quot; &quot;recode&quot; ## [190] &quot;recode_factor&quot; &quot;relocate&quot; &quot;rename&quot; ## [193] &quot;rename_&quot; &quot;rename_all&quot; &quot;rename_at&quot; ## [196] &quot;rename_if&quot; &quot;rename_vars&quot; &quot;rename_vars_&quot; ## [199] &quot;rename_with&quot; &quot;right_join&quot; &quot;row_number&quot; ## [202] &quot;rows_append&quot; &quot;rows_delete&quot; &quot;rows_insert&quot; ## [205] &quot;rows_patch&quot; &quot;rows_update&quot; &quot;rows_upsert&quot; ## [208] &quot;rowwise&quot; &quot;same_src&quot; &quot;sample_frac&quot; ## [211] &quot;sample_n&quot; &quot;select&quot; &quot;select_&quot; ## [214] &quot;select_all&quot; &quot;select_at&quot; &quot;select_if&quot; ## [217] &quot;select_var&quot; &quot;select_vars&quot; &quot;select_vars_&quot; ## [220] &quot;semi_join&quot; &quot;setdiff&quot; &quot;setequal&quot; ## [223] &quot;show_query&quot; &quot;slice&quot; &quot;slice_&quot; ## [226] &quot;slice_head&quot; &quot;slice_max&quot; &quot;slice_min&quot; ## [229] &quot;slice_sample&quot; &quot;slice_tail&quot; &quot;sql&quot; ## [232] &quot;sql_escape_ident&quot; &quot;sql_escape_string&quot; &quot;sql_join&quot; ## [235] &quot;sql_select&quot; &quot;sql_semi_join&quot; &quot;sql_set_op&quot; ## [238] &quot;sql_subquery&quot; &quot;sql_translate_env&quot; &quot;src&quot; ## [241] &quot;src_df&quot; &quot;src_local&quot; &quot;src_mysql&quot; ## [244] &quot;src_postgres&quot; &quot;src_sqlite&quot; &quot;src_tbls&quot; ## [247] &quot;starts_with&quot; &quot;starwars&quot; &quot;storms&quot; ## [250] &quot;summarise&quot; &quot;summarise_&quot; &quot;summarise_all&quot; ## [253] &quot;summarise_at&quot; &quot;summarise_each&quot; &quot;summarise_each_&quot; ## [256] &quot;summarise_if&quot; &quot;summarize&quot; &quot;summarize_&quot; ## [259] &quot;summarize_all&quot; &quot;summarize_at&quot; &quot;summarize_each&quot; ## [262] &quot;summarize_each_&quot; &quot;summarize_if&quot; &quot;sym&quot; ## [265] &quot;syms&quot; &quot;tally&quot; &quot;tally_&quot; ## [268] &quot;tbl&quot; &quot;tbl_df&quot; &quot;tbl_nongroup_vars&quot; ## [271] &quot;tbl_ptype&quot; &quot;tbl_sum&quot; &quot;tbl_vars&quot; ## [274] &quot;tibble&quot; &quot;top_frac&quot; &quot;top_n&quot; ## [277] &quot;transmute&quot; &quot;transmute_&quot; &quot;transmute_all&quot; ## [280] &quot;transmute_at&quot; &quot;transmute_if&quot; &quot;tribble&quot; ## [283] &quot;type_sum&quot; &quot;ungroup&quot; &quot;union&quot; ## [286] &quot;union_all&quot; &quot;validate_grouped_df&quot; &quot;validate_rowwise_df&quot; ## [289] &quot;vars&quot; &quot;with_groups&quot; &quot;with_order&quot; ## [292] &quot;wrap_dbplyr_obj&quot; 2.4 Operador Pipe sqrt(log(44)) ## [1] 1.945299 44 %&gt;% log %&gt;% sqrt ## [1] 1.945299 2.5 select() para colunas select(dados, manufacturer, model, year) ## # A tibble: 234 × 3 ## manufacturer model year ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 audi a4 1999 ## 2 audi a4 1999 ## 3 audi a4 2008 ## 4 audi a4 2008 ## 5 audi a4 1999 ## 6 audi a4 1999 ## 7 audi a4 2008 ## 8 audi a4 quattro 1999 ## 9 audi a4 quattro 1999 ## 10 audi a4 quattro 2008 ## # … with 224 more rows select(dados, starts_with(&quot;m&quot;)) ## # A tibble: 234 × 2 ## manufacturer model ## &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 ## 2 audi a4 ## 3 audi a4 ## 4 audi a4 ## 5 audi a4 ## 6 audi a4 ## 7 audi a4 ## 8 audi a4 quattro ## 9 audi a4 quattro ## 10 audi a4 quattro ## # … with 224 more rows select(dados, contains(&quot;r&quot;)) ## # A tibble: 234 × 4 ## manufacturer year trans drv ## &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; ## 1 audi 1999 auto(l5) f ## 2 audi 1999 manual(m5) f ## 3 audi 2008 manual(m6) f ## 4 audi 2008 auto(av) f ## 5 audi 1999 auto(l5) f ## 6 audi 1999 manual(m5) f ## 7 audi 2008 auto(av) f ## 8 audi 1999 manual(m5) 4 ## 9 audi 1999 auto(l5) 4 ## 10 audi 2008 manual(m6) 4 ## # … with 224 more rows select(dados, ends_with(&quot;y&quot;)) ## # A tibble: 234 × 2 ## cty hwy ## &lt;int&gt; &lt;int&gt; ## 1 18 29 ## 2 21 29 ## 3 20 31 ## 4 21 30 ## 5 16 26 ## 6 18 26 ## 7 18 27 ## 8 18 26 ## 9 16 25 ## 10 20 28 ## # … with 224 more rows select(dados, matches(&quot;[abc]&quot;)) ## # A tibble: 234 × 6 ## manufacturer year cyl trans cty class ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; ## 1 audi 1999 4 auto(l5) 18 compact ## 2 audi 1999 4 manual(m5) 21 compact ## 3 audi 2008 4 manual(m6) 20 compact ## 4 audi 2008 4 auto(av) 21 compact ## 5 audi 1999 6 auto(l5) 16 compact ## 6 audi 1999 6 manual(m5) 18 compact ## 7 audi 2008 6 auto(av) 18 compact ## 8 audi 1999 4 manual(m5) 18 compact ## 9 audi 1999 4 auto(l5) 16 compact ## 10 audi 2008 4 manual(m6) 20 compact ## # … with 224 more rows select(dados, starts_with(&quot;m&quot;), starts_with(&quot;c&quot;)) ## # A tibble: 234 × 5 ## manufacturer model cyl cty class ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; ## 1 audi a4 4 18 compact ## 2 audi a4 4 21 compact ## 3 audi a4 4 20 compact ## 4 audi a4 4 21 compact ## 5 audi a4 6 16 compact ## 6 audi a4 6 18 compact ## 7 audi a4 6 18 compact ## 8 audi a4 quattro 4 18 compact ## 9 audi a4 quattro 4 16 compact ## 10 audi a4 quattro 4 20 compact ## # … with 224 more rows select(dados, ends_with(&quot;l&quot;), ends_with(&quot;s&quot;)) ## # A tibble: 234 × 6 ## model displ cyl fl trans class ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; ## 1 a4 1.8 4 p auto(l5) compact ## 2 a4 1.8 4 p manual(m5) compact ## 3 a4 2 4 p manual(m6) compact ## 4 a4 2 4 p auto(av) compact ## 5 a4 2.8 6 p auto(l5) compact ## 6 a4 2.8 6 p manual(m5) compact ## 7 a4 3.1 6 p auto(av) compact ## 8 a4 quattro 1.8 4 p manual(m5) compact ## 9 a4 quattro 1.8 4 p auto(l5) compact ## 10 a4 quattro 2 4 p manual(m6) compact ## # … with 224 more rows select(dados, 1:3) ## # A tibble: 234 × 3 ## manufacturer model displ ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 ## 2 audi a4 1.8 ## 3 audi a4 2 ## 4 audi a4 2 ## 5 audi a4 2.8 ## 6 audi a4 2.8 ## 7 audi a4 3.1 ## 8 audi a4 quattro 1.8 ## 9 audi a4 quattro 1.8 ## 10 audi a4 quattro 2 ## # … with 224 more rows select(dados, c(2,5,7)) ## # A tibble: 234 × 3 ## model cyl drv ## &lt;fct&gt; &lt;int&gt; &lt;fct&gt; ## 1 a4 4 f ## 2 a4 4 f ## 3 a4 4 f ## 4 a4 4 f ## 5 a4 6 f ## 6 a4 6 f ## 7 a4 6 f ## 8 a4 quattro 4 4 ## 9 a4 quattro 4 4 ## 10 a4 quattro 4 4 ## # … with 224 more rows select(dados, manufacturer:cyl) ## # A tibble: 234 × 5 ## manufacturer model displ year cyl ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 audi a4 1.8 1999 4 ## 2 audi a4 1.8 1999 4 ## 3 audi a4 2 2008 4 ## 4 audi a4 2 2008 4 ## 5 audi a4 2.8 1999 6 ## 6 audi a4 2.8 1999 6 ## 7 audi a4 3.1 2008 6 ## 8 audi a4 quattro 1.8 1999 4 ## 9 audi a4 quattro 1.8 1999 4 ## 10 audi a4 quattro 2 2008 4 ## # … with 224 more rows select(dados,-(manufacturer:cyl)) ## # A tibble: 234 × 6 ## trans drv cty hwy fl class ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; ## 1 auto(l5) f 18 29 p compact ## 2 manual(m5) f 21 29 p compact ## 3 manual(m6) f 20 31 p compact ## 4 auto(av) f 21 30 p compact ## 5 auto(l5) f 16 26 p compact ## 6 manual(m5) f 18 26 p compact ## 7 auto(av) f 18 27 p compact ## 8 manual(m5) 4 18 26 p compact ## 9 auto(l5) 4 16 25 p compact ## 10 manual(m6) 4 20 28 p compact ## # … with 224 more rows 2.6 rename() dados1 &lt;- rename(dados, mnfc = manufacturer, mod = model) dados1 ## # A tibble: 234 × 11 ## mnfc mod displ year cyl trans drv cty hwy fl class ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact ## 3 audi a4 2 2008 4 manual(m6) f 20 31 p compact ## 4 audi a4 2 2008 4 auto(av) f 21 30 p compact ## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact ## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compact ## 7 audi a4 3.1 2008 6 auto(av) f 18 27 p compact ## 8 audi a4 quattro 1.8 1999 4 manual(m5) 4 18 26 p compact ## 9 audi a4 quattro 1.8 1999 4 auto(l5) 4 16 25 p compact ## 10 audi a4 quattro 2 2008 4 manual(m6) 4 20 28 p compact ## # … with 224 more rows select(dados, mnfc = manufacturer, mod = model) ## # A tibble: 234 × 2 ## mnfc mod ## &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 ## 2 audi a4 ## 3 audi a4 ## 4 audi a4 ## 5 audi a4 ## 6 audi a4 ## 7 audi a4 ## 8 audi a4 quattro ## 9 audi a4 quattro ## 10 audi a4 quattro ## # … with 224 more rows select(dados, mnfc = manufacturer, mod = model, everything()) ## # A tibble: 234 × 11 ## mnfc mod displ year cyl trans drv cty hwy fl class ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact ## 3 audi a4 2 2008 4 manual(m6) f 20 31 p compact ## 4 audi a4 2 2008 4 auto(av) f 21 30 p compact ## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact ## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compact ## 7 audi a4 3.1 2008 6 auto(av) f 18 27 p compact ## 8 audi a4 quattro 1.8 1999 4 manual(m5) 4 18 26 p compact ## 9 audi a4 quattro 1.8 1999 4 auto(l5) 4 16 25 p compact ## 10 audi a4 quattro 2 2008 4 manual(m6) 4 20 28 p compact ## # … with 224 more rows 2.7 mutate() para colunas mutate(dados, sqrt_cty = sqrt(cty)) ## # A tibble: 234 × 12 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## # … with 224 more rows, and abbreviated variable names ¹​manufacturer, ²​sqrt_cty names(dados) ## [1] &quot;manufacturer&quot; &quot;model&quot; &quot;displ&quot; &quot;year&quot; &quot;cyl&quot; ## [6] &quot;trans&quot; &quot;drv&quot; &quot;cty&quot; &quot;hwy&quot; &quot;fl&quot; ## [11] &quot;class&quot; dados&lt;- mutate(dados, sqrt_cty = sqrt(cty)) names(dados) ## [1] &quot;manufacturer&quot; &quot;model&quot; &quot;displ&quot; &quot;year&quot; &quot;cyl&quot; ## [6] &quot;trans&quot; &quot;drv&quot; &quot;cty&quot; &quot;hwy&quot; &quot;fl&quot; ## [11] &quot;class&quot; &quot;sqrt_cty&quot; dados &lt;- mutate(dados, `soma de variáveis` = (cty + hwy) / 2) names(dados) ## [1] &quot;manufacturer&quot; &quot;model&quot; &quot;displ&quot; ## [4] &quot;year&quot; &quot;cyl&quot; &quot;trans&quot; ## [7] &quot;drv&quot; &quot;cty&quot; &quot;hwy&quot; ## [10] &quot;fl&quot; &quot;class&quot; &quot;sqrt_cty&quot; ## [13] &quot;soma de variáveis&quot; dados &lt;- mutate(dados, car = paste(manufacturer, model, sep = &quot; &quot;), `cyl / trans` = paste(cyl, &quot; cylinders&quot;, &quot; / &quot;, trans, &quot; transmission&quot;, sep = &quot;&quot;)) dados ## # A tibble: 234 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## # … with 224 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty 2.8 transmute() transmute(dados, `avg miles per gallon` = (cty + hwy) / 2) ## # A tibble: 234 × 1 ## `avg miles per gallon` ## &lt;dbl&gt; ## 1 23.5 ## 2 25 ## 3 25.5 ## 4 25.5 ## 5 21 ## 6 22 ## 7 22.5 ## 8 22 ## 9 20.5 ## 10 24 ## # … with 224 more rows transmute(dados, car = paste(manufacturer, model, sep = &quot; &quot;), `cyl / trans` = paste(cyl, &quot; cylinders&quot;, &quot; / &quot;, trans, &quot; transmission&quot;, sep = &quot;&quot;)) ## # A tibble: 234 × 2 ## car `cyl / trans` ## &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 4 cylinders / auto(l5) transmission ## 2 audi a4 4 cylinders / manual(m5) transmission ## 3 audi a4 4 cylinders / manual(m6) transmission ## 4 audi a4 4 cylinders / auto(av) transmission ## 5 audi a4 6 cylinders / auto(l5) transmission ## 6 audi a4 6 cylinders / manual(m5) transmission ## 7 audi a4 6 cylinders / auto(av) transmission ## 8 audi a4 quattro 4 cylinders / manual(m5) transmission ## 9 audi a4 quattro 4 cylinders / auto(l5) transmission ## 10 audi a4 quattro 4 cylinders / manual(m6) transmission ## # … with 224 more rows 2.9 filter() para linhas filter(dados, manufacturer == &quot;audi&quot;) ## # A tibble: 18 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## 11 audi a4 q… 2 2008 4 auto… 4 19 27 p comp… 4.36 ## 12 audi a4 q… 2.8 1999 6 auto… 4 15 25 p comp… 3.87 ## 13 audi a4 q… 2.8 1999 6 manu… 4 17 25 p comp… 4.12 ## 14 audi a4 q… 3.1 2008 6 auto… 4 17 25 p comp… 4.12 ## 15 audi a4 q… 3.1 2008 6 manu… 4 15 25 p comp… 3.87 ## 16 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## 17 audi a6 q… 3.1 2008 6 auto… 4 17 25 p mids… 4.12 ## 18 audi a6 q… 4.2 2008 8 auto… 4 16 23 p mids… 4 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty filter(dados, manufacturer == &quot;audi&quot; &amp; year == &quot;1999&quot;) ## # A tibble: 9 × 15 ## manufact…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 4 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 5 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 6 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 7 audi a4 q… 2.8 1999 6 auto… 4 15 25 p comp… 3.87 ## 8 audi a4 q… 2.8 1999 6 manu… 4 17 25 p comp… 4.12 ## 9 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty filter(dados, manufacturer == &quot;audi&quot;, year == 1999) ## # A tibble: 9 × 15 ## manufact…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 4 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 5 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 6 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 7 audi a4 q… 2.8 1999 6 auto… 4 15 25 p comp… 3.87 ## 8 audi a4 q… 2.8 1999 6 manu… 4 17 25 p comp… 4.12 ## 9 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty filter(dados, manufacturer == &quot;audi&quot; | manufacturer == &quot;dodge&quot;) %&gt;% print(n = 20) ## # A tibble: 55 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## 11 audi a4 q… 2 2008 4 auto… 4 19 27 p comp… 4.36 ## 12 audi a4 q… 2.8 1999 6 auto… 4 15 25 p comp… 3.87 ## 13 audi a4 q… 2.8 1999 6 manu… 4 17 25 p comp… 4.12 ## 14 audi a4 q… 3.1 2008 6 auto… 4 17 25 p comp… 4.12 ## 15 audi a4 q… 3.1 2008 6 manu… 4 15 25 p comp… 3.87 ## 16 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## 17 audi a6 q… 3.1 2008 6 auto… 4 17 25 p mids… 4.12 ## 18 audi a6 q… 4.2 2008 8 auto… 4 16 23 p mids… 4 ## 19 dodge cara… 2.4 1999 4 auto… f 18 24 r mini… 4.24 ## 20 dodge cara… 3 1999 6 auto… f 17 24 r mini… 4.12 ## # … with 35 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty filter(dados, manufacturer %in% c(&quot;audi&quot;, &quot;dodge&quot;)) %&gt;% print(n = 20) ## # A tibble: 55 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## 11 audi a4 q… 2 2008 4 auto… 4 19 27 p comp… 4.36 ## 12 audi a4 q… 2.8 1999 6 auto… 4 15 25 p comp… 3.87 ## 13 audi a4 q… 2.8 1999 6 manu… 4 17 25 p comp… 4.12 ## 14 audi a4 q… 3.1 2008 6 auto… 4 17 25 p comp… 4.12 ## 15 audi a4 q… 3.1 2008 6 manu… 4 15 25 p comp… 3.87 ## 16 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## 17 audi a6 q… 3.1 2008 6 auto… 4 17 25 p mids… 4.12 ## 18 audi a6 q… 4.2 2008 8 auto… 4 16 23 p mids… 4 ## 19 dodge cara… 2.4 1999 4 auto… f 18 24 r mini… 4.24 ## 20 dodge cara… 3 1999 6 auto… f 17 24 r mini… 4.12 ## # … with 35 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty filter(dados, hwy &gt;= 30) %&gt;% select(hwy) %&gt;% print(n = 26) ## # A tibble: 26 × 1 ## hwy ## &lt;int&gt; ## 1 31 ## 2 30 ## 3 30 ## 4 33 ## 5 32 ## 6 32 ## 7 32 ## 8 34 ## 9 36 ## 10 36 ## 11 30 ## 12 31 ## 13 31 ## 14 32 ## 15 31 ## 16 31 ## 17 31 ## 18 31 ## 19 30 ## 20 33 ## 21 35 ## 22 37 ## 23 35 ## 24 44 ## 25 44 ## 26 41 filter(dados, year != 1999) %&gt;% select(year) %&gt;% print(n = 30) ## # A tibble: 117 × 1 ## year ## &lt;int&gt; ## 1 2008 ## 2 2008 ## 3 2008 ## 4 2008 ## 5 2008 ## 6 2008 ## 7 2008 ## 8 2008 ## 9 2008 ## 10 2008 ## 11 2008 ## 12 2008 ## 13 2008 ## 14 2008 ## 15 2008 ## 16 2008 ## 17 2008 ## 18 2008 ## 19 2008 ## 20 2008 ## 21 2008 ## 22 2008 ## 23 2008 ## 24 2008 ## 25 2008 ## 26 2008 ## 27 2008 ## 28 2008 ## 29 2008 ## 30 2008 ## # … with 87 more rows filter(dados, between(cty,15, 22)) ## # A tibble: 143 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## # … with 133 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty 2.10 slice() para linhas slice(dados, 1:5) ## # A tibble: 5 × 15 ## manufact…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty # dados[1:5,] slice(dados, 20:30) ## # A tibble: 11 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 chevrolet c150… 5.3 2008 8 auto… r 11 15 e suv 3.32 ## 2 chevrolet c150… 5.3 2008 8 auto… r 14 20 r suv 3.74 ## 3 chevrolet c150… 5.7 1999 8 auto… r 13 17 r suv 3.61 ## 4 chevrolet c150… 6 2008 8 auto… r 12 17 r suv 3.46 ## 5 chevrolet corv… 5.7 1999 8 manu… r 16 26 p 2sea… 4 ## 6 chevrolet corv… 5.7 1999 8 auto… r 15 23 p 2sea… 3.87 ## 7 chevrolet corv… 6.2 2008 8 manu… r 16 26 p 2sea… 4 ## 8 chevrolet corv… 6.2 2008 8 auto… r 15 25 p 2sea… 3.87 ## 9 chevrolet corv… 7 2008 8 manu… r 15 24 p 2sea… 3.87 ## 10 chevrolet k150… 5.3 2008 8 auto… 4 14 19 r suv 3.74 ## 11 chevrolet k150… 5.3 2008 8 auto… 4 11 14 e suv 3.32 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty # dados[20:30,] 2.11 arrange() para linhas # ordenar &quot;displ&quot; de menor a maior arrange(dados, displ) ## # A tibble: 234 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 honda civic 1.6 1999 4 manu… f 28 33 r subc… 5.29 ## 2 honda civic 1.6 1999 4 auto… f 24 32 r subc… 4.90 ## 3 honda civic 1.6 1999 4 manu… f 25 32 r subc… 5 ## 4 honda civic 1.6 1999 4 manu… f 23 29 p subc… 4.80 ## 5 honda civic 1.6 1999 4 auto… f 24 32 r subc… 4.90 ## 6 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 7 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 honda civic 1.8 2008 4 manu… f 26 34 r subc… 5.10 ## # … with 224 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty arrange(dados, displ) %&gt;% print(n=20) ## # A tibble: 234 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 honda civic 1.6 1999 4 manu… f 28 33 r subc… 5.29 ## 2 honda civic 1.6 1999 4 auto… f 24 32 r subc… 4.90 ## 3 honda civic 1.6 1999 4 manu… f 25 32 r subc… 5 ## 4 honda civic 1.6 1999 4 manu… f 23 29 p subc… 4.80 ## 5 honda civic 1.6 1999 4 auto… f 24 32 r subc… 4.90 ## 6 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 7 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 honda civic 1.8 2008 4 manu… f 26 34 r subc… 5.10 ## 11 honda civic 1.8 2008 4 auto… f 25 36 r subc… 5 ## 12 honda civic 1.8 2008 4 auto… f 24 36 c subc… 4.90 ## 13 toyota coro… 1.8 1999 4 auto… f 24 30 r comp… 4.90 ## 14 toyota coro… 1.8 1999 4 auto… f 24 33 r comp… 4.90 ## 15 toyota coro… 1.8 1999 4 manu… f 26 35 r comp… 5.10 ## 16 toyota coro… 1.8 2008 4 manu… f 28 37 r comp… 5.29 ## 17 toyota coro… 1.8 2008 4 auto… f 26 35 r comp… 5.10 ## 18 volkswag… pass… 1.8 1999 4 manu… f 21 29 p mids… 4.58 ## 19 volkswag… pass… 1.8 1999 4 auto… f 18 29 p mids… 4.24 ## 20 volkswag… jetta 1.9 1999 4 manu… f 33 44 d comp… 5.74 ## # … with 214 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty # ordenar &quot;displ&quot; de maior a menor arrange(dados, desc(displ)) ## # A tibble: 234 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 chevrolet corv… 7 2008 8 manu… r 15 24 p 2sea… 3.87 ## 2 chevrolet k150… 6.5 1999 8 auto… 4 14 17 d suv 3.74 ## 3 chevrolet corv… 6.2 2008 8 manu… r 16 26 p 2sea… 4 ## 4 chevrolet corv… 6.2 2008 8 auto… r 15 25 p 2sea… 3.87 ## 5 jeep gran… 6.1 2008 8 auto… 4 11 14 p suv 3.32 ## 6 chevrolet c150… 6 2008 8 auto… r 12 17 r suv 3.46 ## 7 dodge dura… 5.9 1999 8 auto… 4 11 15 r suv 3.32 ## 8 dodge ram … 5.9 1999 8 auto… 4 11 15 r pick… 3.32 ## 9 chevrolet c150… 5.7 1999 8 auto… r 13 17 r suv 3.61 ## 10 chevrolet corv… 5.7 1999 8 manu… r 16 26 p 2sea… 4 ## # … with 224 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty arrange(dados, desc(displ)) %&gt;% print(n=20) ## # A tibble: 234 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 chevrolet corv… 7 2008 8 manu… r 15 24 p 2sea… 3.87 ## 2 chevrolet k150… 6.5 1999 8 auto… 4 14 17 d suv 3.74 ## 3 chevrolet corv… 6.2 2008 8 manu… r 16 26 p 2sea… 4 ## 4 chevrolet corv… 6.2 2008 8 auto… r 15 25 p 2sea… 3.87 ## 5 jeep gran… 6.1 2008 8 auto… 4 11 14 p suv 3.32 ## 6 chevrolet c150… 6 2008 8 auto… r 12 17 r suv 3.46 ## 7 dodge dura… 5.9 1999 8 auto… 4 11 15 r suv 3.32 ## 8 dodge ram … 5.9 1999 8 auto… 4 11 15 r pick… 3.32 ## 9 chevrolet c150… 5.7 1999 8 auto… r 13 17 r suv 3.61 ## 10 chevrolet corv… 5.7 1999 8 manu… r 16 26 p 2sea… 4 ## 11 chevrolet corv… 5.7 1999 8 auto… r 15 23 p 2sea… 3.87 ## 12 chevrolet k150… 5.7 1999 8 auto… 4 11 15 r suv 3.32 ## 13 dodge dura… 5.7 2008 8 auto… 4 13 18 r suv 3.61 ## 14 dodge ram … 5.7 2008 8 auto… 4 13 17 r pick… 3.61 ## 15 jeep gran… 5.7 2008 8 auto… 4 13 18 r suv 3.61 ## 16 toyota land… 5.7 2008 8 auto… 4 13 18 r suv 3.61 ## 17 nissan path… 5.6 2008 8 auto… 4 12 18 p suv 3.46 ## 18 ford expe… 5.4 1999 8 auto… r 11 17 r suv 3.32 ## 19 ford expe… 5.4 2008 8 auto… r 12 18 r suv 3.46 ## 20 ford f150… 5.4 1999 8 auto… 4 11 15 r pick… 3.32 ## # … with 214 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty select(dados, displ, cty) %&gt;% arrange(displ, cty) %&gt;% print(n = 20) ## # A tibble: 234 × 2 ## displ cty ## &lt;dbl&gt; &lt;int&gt; ## 1 1.6 23 ## 2 1.6 24 ## 3 1.6 24 ## 4 1.6 25 ## 5 1.6 28 ## 6 1.8 16 ## 7 1.8 18 ## 8 1.8 18 ## 9 1.8 18 ## 10 1.8 21 ## 11 1.8 21 ## 12 1.8 24 ## 13 1.8 24 ## 14 1.8 24 ## 15 1.8 25 ## 16 1.8 26 ## 17 1.8 26 ## 18 1.8 26 ## 19 1.8 28 ## 20 1.9 29 ## # … with 214 more rows select(dados, displ, cty) %&gt;% arrange(displ, desc(cty)) %&gt;% print(n = 20) ## # A tibble: 234 × 2 ## displ cty ## &lt;dbl&gt; &lt;int&gt; ## 1 1.6 28 ## 2 1.6 25 ## 3 1.6 24 ## 4 1.6 24 ## 5 1.6 23 ## 6 1.8 28 ## 7 1.8 26 ## 8 1.8 26 ## 9 1.8 26 ## 10 1.8 25 ## 11 1.8 24 ## 12 1.8 24 ## 13 1.8 24 ## 14 1.8 21 ## 15 1.8 21 ## 16 1.8 18 ## 17 1.8 18 ## 18 1.8 18 ## 19 1.8 16 ## 20 1.9 35 ## # … with 214 more rows 2.12 distinct() para linhas dados_exemplo &lt;- data.frame(id = 1:3, name = c(&quot;John&quot;, &quot;Max&quot;, &quot;Julia&quot;)) dados_exemplo ## id name ## 1 1 John ## 2 2 Max ## 3 3 Julia # bind_rows == rbind() dados_exemplo&lt;- bind_rows(dados_exemplo, slice(dados_exemplo, 2)) dados_exemplo ## id name ## 1 1 John ## 2 2 Max ## 3 3 Julia ## 4 2 Max distinct(dados_exemplo) ## id name ## 1 1 John ## 2 2 Max ## 3 3 Julia dados_exemplo2 &lt;- data.frame(id = c(1,1,2), name = c(&quot;John&quot;, &quot;Max&quot;, &quot;Julia&quot;)) dados_exemplo2 ## id name ## 1 1 John ## 2 1 Max ## 3 2 Julia distinct(dados_exemplo2) ## id name ## 1 1 John ## 2 1 Max ## 3 2 Julia dados_duplicados &lt;- select(dados, manufacturer, model) dados_duplicados ## # A tibble: 234 × 2 ## manufacturer model ## &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 ## 2 audi a4 ## 3 audi a4 ## 4 audi a4 ## 5 audi a4 ## 6 audi a4 ## 7 audi a4 ## 8 audi a4 quattro ## 9 audi a4 quattro ## 10 audi a4 quattro ## # … with 224 more rows dados_nao_duplicados &lt;- distinct(dados_duplicados) dados_nao_duplicados ## # A tibble: 38 × 2 ## manufacturer model ## &lt;fct&gt; &lt;fct&gt; ## 1 audi a4 ## 2 audi a4 quattro ## 3 audi a6 quattro ## 4 chevrolet c1500 suburban 2wd ## 5 chevrolet corvette ## 6 chevrolet k1500 tahoe 4wd ## 7 chevrolet malibu ## 8 dodge caravan 2wd ## 9 dodge dakota pickup 4wd ## 10 dodge durango 4wd ## # … with 28 more rows 2.13 summarise() summarise(dados, `média hwy` = mean(hwy)) ## # A tibble: 1 × 1 ## `média hwy` ## &lt;dbl&gt; ## 1 23.4 summarise(dados, `num. de dados` = n(), `num. modelos` = n_distinct(model)) ## # A tibble: 1 × 2 ## `num. de dados` `num. modelos` ## &lt;int&gt; &lt;int&gt; ## 1 234 38 # levels(dados$model) summarise(dados, `mín. hwy` = min(hwy, na.rm = TRUE), `mín. cty` = min(cty, na.rm = TRUE), `máx. hwy` = max(hwy, na.rm = TRUE), `máx. cty` = max(cty, na.rm = TRUE)) ## # A tibble: 1 × 4 ## `mín. hwy` `mín. cty` `máx. hwy` `máx. cty` ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 12 9 44 35 dados %&gt;% summarise_at(c(&quot;hwy&quot;, &quot;cty&quot;), list(min, max), na.rm = TRUE) ## # A tibble: 1 × 4 ## hwy_fn1 cty_fn1 hwy_fn2 cty_fn2 ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 12 9 44 35 dados %&gt;% summarise_if(is.numeric, list(min, max), na.rm = TRUE) ## # A tibble: 1 × 14 ## displ_fn1 year_fn1 cyl_fn1 cty_fn1 hwy_fn1 sqrt_cty_…¹ soma …² displ…³ year_…⁴ ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1.6 1999 4 9 12 3 10.5 7 2008 ## # … with 5 more variables: cyl_fn2 &lt;int&gt;, cty_fn2 &lt;int&gt;, hwy_fn2 &lt;int&gt;, ## # sqrt_cty_fn2 &lt;dbl&gt;, `soma de variáveis_fn2` &lt;dbl&gt;, and abbreviated variable ## # names ¹​sqrt_cty_fn1, ²​`soma de variáveis_fn1`, ³​displ_fn2, ⁴​year_fn2 dados %&gt;% summarise_if(is.numeric, min, na.rm = TRUE) ## # A tibble: 1 × 7 ## displ year cyl cty hwy sqrt_cty `soma de variáveis` ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.6 1999 4 9 12 3 10.5 dados %&gt;% summarise_if(is.numeric, max, na.rm = TRUE) ## # A tibble: 1 × 7 ## displ year cyl cty hwy sqrt_cty `soma de variáveis` ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 7 2008 8 35 44 5.92 39.5 Tiago&lt;- function(dados){ sd(dados)/mean(dados) } dados %&gt;% summarise_if(is.numeric, Tiago) ## # A tibble: 1 × 7 ## displ year cyl cty hwy sqrt_cty `soma de variáveis` ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.372 0.00225 0.274 0.252 0.254 0.125 0.251 2.14 group_by() group_by(dados, manufacturer) ## # A tibble: 234 × 15 ## # Groups: manufacturer [15] ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… 4.24 ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… 4.58 ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… 4.47 ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… 4.58 ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… 4 ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… 4.24 ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… 4.24 ## 8 audi a4 q… 1.8 1999 4 manu… 4 18 26 p comp… 4.24 ## 9 audi a4 q… 1.8 1999 4 auto… 4 16 25 p comp… 4 ## 10 audi a4 q… 2 2008 4 manu… 4 20 28 p comp… 4.47 ## # … with 224 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty dados %&gt;% group_by(manufacturer) %&gt;% summarise(`num. carros` = n()) ## # A tibble: 15 × 2 ## manufacturer `num. carros` ## &lt;fct&gt; &lt;int&gt; ## 1 audi 18 ## 2 chevrolet 19 ## 3 dodge 37 ## 4 ford 25 ## 5 honda 9 ## 6 hyundai 14 ## 7 jeep 8 ## 8 land rover 4 ## 9 lincoln 3 ## 10 mercury 4 ## 11 nissan 13 ## 12 pontiac 5 ## 13 subaru 14 ## 14 toyota 34 ## 15 volkswagen 27 dados %&gt;% group_by(model) %&gt;% summarise(`média hwy` = mean(hwy), `min. hwy` = min(hwy), `max. hwy` = max(hwy)) ## # A tibble: 38 × 4 ## model `média hwy` `min. hwy` `max. hwy` ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 4runner 4wd 18.8 17 20 ## 2 a4 28.3 26 31 ## 3 a4 quattro 25.8 25 28 ## 4 a6 quattro 24 23 25 ## 5 altima 28.7 26 32 ## 6 c1500 suburban 2wd 17.8 15 20 ## 7 camry 28.3 26 31 ## 8 camry solara 28.1 26 31 ## 9 caravan 2wd 22.4 17 24 ## 10 civic 32.6 29 36 ## # … with 28 more rows 2.15 count() count(dados) ## # A tibble: 1 × 1 ## n ## &lt;int&gt; ## 1 234 dados %&gt;% group_by(manufacturer) %&gt;% count() ## # A tibble: 15 × 2 ## # Groups: manufacturer [15] ## manufacturer n ## &lt;fct&gt; &lt;int&gt; ## 1 audi 18 ## 2 chevrolet 19 ## 3 dodge 37 ## 4 ford 25 ## 5 honda 9 ## 6 hyundai 14 ## 7 jeep 8 ## 8 land rover 4 ## 9 lincoln 3 ## 10 mercury 4 ## 11 nissan 13 ## 12 pontiac 5 ## 13 subaru 14 ## 14 toyota 34 ## 15 volkswagen 27 # Equivalente com o código anterior dados %&gt;% group_by(manufacturer) %&gt;% summarise(cars = n()) ## # A tibble: 15 × 2 ## manufacturer cars ## &lt;fct&gt; &lt;int&gt; ## 1 audi 18 ## 2 chevrolet 19 ## 3 dodge 37 ## 4 ford 25 ## 5 honda 9 ## 6 hyundai 14 ## 7 jeep 8 ## 8 land rover 4 ## 9 lincoln 3 ## 10 mercury 4 ## 11 nissan 13 ## 12 pontiac 5 ## 13 subaru 14 ## 14 toyota 34 ## 15 volkswagen 27 2.16 sample_n() set.seed(567) sample_n(dados, size = 10, replace = F) ## # A tibble: 10 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 mercury moun… 5 1999 8 auto… 4 13 17 r suv 3.61 ## 2 chevrolet corv… 7 2008 8 manu… r 15 24 p 2sea… 3.87 ## 3 dodge ram … 4.7 2008 8 manu… 4 12 16 r pick… 3.46 ## 4 toyota land… 4.7 1999 8 auto… 4 11 15 r suv 3.32 ## 5 volkswag… jetta 2 1999 4 auto… f 19 26 r comp… 4.36 ## 6 dodge cara… 3.8 1999 6 auto… f 15 21 r mini… 3.87 ## 7 honda civic 1.8 2008 4 auto… f 25 36 r subc… 5 ## 8 ford must… 4.6 1999 8 auto… r 15 21 r subc… 3.87 ## 9 chevrolet c150… 5.3 2008 8 auto… r 14 20 r suv 3.74 ## 10 ford expe… 5.4 1999 8 auto… r 11 17 r suv 3.32 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty sample_n(dados, size = 10, replace = T) ## # A tibble: 10 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 chevrolet c150… 5.3 2008 8 auto… r 11 15 e suv 3.32 ## 2 volkswag… gti 2 2008 4 auto… f 22 29 p comp… 4.69 ## 3 dodge dako… 4.7 2008 8 auto… 4 14 19 r pick… 3.74 ## 4 ford expl… 4.6 2008 8 auto… 4 13 19 r suv 3.61 ## 5 dodge cara… 3.8 2008 6 auto… f 16 23 r mini… 4 ## 6 chevrolet k150… 5.3 2008 8 auto… 4 14 19 r suv 3.74 ## 7 dodge dura… 5.2 1999 8 auto… 4 11 16 r suv 3.32 ## 8 toyota camry 2.4 2008 4 manu… f 21 31 r mids… 4.58 ## 9 toyota camry 3 1999 6 manu… f 18 26 r mids… 4.24 ## 10 subaru impr… 2.2 1999 4 auto… 4 21 26 r subc… 4.58 ## # … with 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty 2.17 sample_frac() sample_frac(dados, size = 0.1, replace = F) ## # A tibble: 23 × 15 ## manufac…¹ model displ year cyl trans drv cty hwy fl class sqrt_…² ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 toyota coro… 1.8 2008 4 manu… f 28 37 r comp… 5.29 ## 2 lincoln navi… 5.4 1999 8 auto… r 11 17 r suv 3.32 ## 3 honda civic 1.6 1999 4 auto… f 24 32 r subc… 4.90 ## 4 audi a6 q… 2.8 1999 6 auto… 4 15 24 p mids… 3.87 ## 5 nissan path… 4 2008 6 auto… 4 14 20 p suv 3.74 ## 6 toyota camry 3.5 2008 6 auto… f 19 28 r mids… 4.36 ## 7 subaru impr… 2.5 2008 4 auto… 4 20 25 p comp… 4.47 ## 8 toyota toyo… 3.4 1999 6 auto… 4 15 19 r pick… 3.87 ## 9 audi a4 q… 3.1 2008 6 manu… 4 15 25 p comp… 3.87 ## 10 toyota coro… 1.8 1999 4 manu… f 26 35 r comp… 5.10 ## # … with 13 more rows, 3 more variables: `soma de variáveis` &lt;dbl&gt;, car &lt;chr&gt;, ## # `cyl / trans` &lt;chr&gt;, and abbreviated variable names ¹​manufacturer, ## # ²​sqrt_cty "],["ggplot2-60-minutos.html", "3 ggplot2 (60 minutos) 3.1 Carrega pacotes a serem usados 3.2 Lista de funções do pacote ggplot2 3.3 Primeiros passos usando geom_point 3.4 smooth, boxplot, histogram 3.5 gridExtra e patchwork 3.6 bar, col, density, density2d 3.7 facet_grid, facet_wrap 3.8 stat_function 3.9 stat_summary 3.10 theme_*() 3.11 Gráfico de perfis (Spaguetti plot) 3.12 plotly 3.13 esquisse 3.14 Exemplo esquisse", " 3 ggplot2 (60 minutos) 3.1 Carrega pacotes a serem usados #install.packages(&quot;tidyverse&quot;) #install.packages(&quot;dplyr&quot;) #install.packages(&quot;tidyr&quot;) #install.packages(&quot;ggplot2&quot;) library(tidyverse) # Manipulação de dados #library(dplyr) # Visualização de gráficos library(ggplot2) library(gridExtra) library(patchwork) library(plotly) library(esquisse) # Para dados gráfico de perfis library(nlme) Alguns links The R Graph Gallery 120 registered extensions available to explore link 1: patchwork link 2: patchwork 3.2 Lista de funções do pacote ggplot2 ls(&quot;package:ggplot2&quot;) 3.3 Primeiros passos usando geom_point dados &lt;- mpg ggplot(dados) ggplot(dados, aes(x = cty, y = hwy)) # Alternativas ggplot(dados, aes(x = cty, y = hwy)) + geom_point() ggplot(dados) + geom_point(aes(x = cty, y = hwy)) ggplot() + geom_point(data = dados, aes(x = cty, y = hwy)) # Fim ggplot(dados, aes(x = cty, y = hwy)) + geom_point(colour = &quot;red&quot;) ggplot(dados, aes(x = cty, y = hwy)) + geom_point(colour = &quot;red&quot;, size = 6) ggplot(dados, aes(x = cty, y = hwy)) + geom_point(colour = &quot;red&quot;, size = 6, shape = 10) # Alternativa ggplot(dados, aes(x = cty, y = hwy)) + geom_point(colour = &quot;red&quot;, size = 6, shape = &quot;circle plus&quot;) ggplot(dados, aes(x = cty, y = hwy)) + geom_point(colour = &quot;red&quot;, size = 6, shape = 10)+ labs(x = &quot;cty (city miles per gallon hwy)&quot;, y = &quot;hwy (highway miles per gallon)&quot;, title = &quot;Pensar em algum título...&quot;, subtitle = &quot;Escrever alguma coisa&quot;) 3.3.1 Mais detalhes sobre geom_point geom_point() understands the following aesthetics (required aesthetics are in bold): x y alpha colour fill group shape size stroke ggplot(dados, aes(x = cty, y = hwy)) + geom_point() ggplot(dados, aes(x = cty, y = hwy, col = factor(year))) + geom_point() + labs(col = &quot;year&quot;) # Alternativa ggplot(dados, aes(x = cty, y = hwy, col = factor(class))) + geom_point() + labs(col = &quot;class&quot;)+ scale_color_brewer(type = &quot;qual&quot;) ggplot(dados, aes(x = cty, y = hwy, col = factor(class))) + geom_point() + labs(col = &quot;class&quot;)+ scale_color_brewer(type = &quot;div&quot;) ggplot(dados, aes(x = cty, y = hwy, col = factor(class))) + geom_point() + labs(col = &quot;class&quot;)+ scale_color_brewer(palette = &quot;Set1&quot;, name = &quot;Tipo de carro&quot;)+ scale_y_continuous(breaks = seq(10,60,3))+ scale_x_continuous(breaks = seq(10,40,3))+ theme_minimal() ggplot(dados, aes(x = cty, y = hwy, alpha = factor(year))) + geom_point() + labs(alpha = &quot;year&quot;) ggplot(dados, aes(x = cty, y = hwy, size = factor(year))) + geom_point() + labs(size = &quot;year&quot;) # Alternativa ggplot(dados, aes(x = cty, y = hwy, col = cty &lt;= 20)) + geom_point() + geom_vline(xintercept = 20)+ labs(col = &quot;year&quot;) # Erro comum ggplot(dados, aes(x = cty, y = hwy, col = &quot;red&quot;)) + geom_point()+ labs(col = &quot;year&quot;) ggplot(dados, aes(x = cty, y = hwy)) + geom_point(col = &quot;red&quot;)+ labs(col = &quot;year&quot;) # Fim Erro comum ggplot(dados, aes(x = cty, y = hwy, shape = factor(year))) + geom_point(col = &quot;red&quot;) + labs(shape = &quot;year&quot;) ggplot(dados, aes(x = cty, y = hwy, size = class)) + geom_point() + labs(size = &quot;class&quot;) ggplot(dados, aes(x = cty, y = hwy, size = class, col = class)) + geom_point() + guides(colour = guide_legend(&quot;Tipo de carro (color)&quot;), size = guide_legend(&quot;Tipo de carro (size)&quot;)) ggplot(dados, aes(x = cty, y = hwy, size = class, col = class)) + geom_point() + labs(col = &quot;Tipo de Carro&quot;, size = &quot;Tipo de Carro&quot;)+ guides(col = &quot;legend&quot;) 3.4 smooth, boxplot, histogram v1&lt;- ggplot(dados, aes(x = cty, y = hwy)) + geom_point(col = &quot;blue&quot;)+ geom_smooth(method = mgcv::gam, formula = y ~ s(x, bs = &quot;cs&quot;) , col = &quot;red&quot;, se = FALSE) v1 v2 &lt;- ggplot(dados, aes(x = cty)) + geom_boxplot(fill = &quot;red&quot;) v2 v3 &lt;- ggplot(dados, aes(x = cty)) + geom_histogram(bins = 10, fill = &quot;red&quot;, col = &quot;blue&quot;, lwd=2) v3 v4&lt;- ggplot(dados, aes(x = cty)) + geom_histogram(aes(y = after_stat(density)), bins = 10, fill = &quot;yellow&quot;, col = &quot;red&quot;) + geom_density(col = &quot;blue&quot;, lwd =3) v4 # Adicional (estatístic experimental) ggplot(dados, aes(x = drv, y = cty, col = drv)) + geom_boxplot()+ theme_bw()+ theme(legend.position = &quot;none&quot;) 3.5 gridExtra e patchwork Alguns links link 1: patchwork link 2: patchwork # gridExtra grid.arrange(v1, v2, v3, v4) # patchwork v1 + v2 v1 | v2 v1 / v2 v1 + v2 + v3 v1 + (v2 + v3) v1 | (v2 / v3) v1 / (v2 + v3) v1 + v2 + v3 + v4 v1/(v2+v3+v4) v1 + (v2 + v3 + v4) v1 + v2 + (v3 + v4) (v1 | v2 | v3) / v4 3.6 bar, col, density, density2d v5 &lt;- ggplot(dados , aes(x = manufacturer)) + geom_bar()+ theme(axis.text.x = element_text(angle = 45)) v5 # Dúvidas no geom_col v6 &lt;- ggplot(dados , aes(x = manufacturer, y = cty)) + geom_col()+ theme(axis.text.x = element_text(angle = 45)) v6 dados %&gt;% select(manufacturer, cty) %&gt;% group_by(manufacturer) %&gt;% summarise(soma_total_cty = sum(cty), n = n()) ## # A tibble: 15 × 3 ## manufacturer soma_total_cty n ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 audi 317 18 ## 2 chevrolet 285 19 ## 3 dodge 486 37 ## 4 ford 350 25 ## 5 honda 220 9 ## 6 hyundai 261 14 ## 7 jeep 108 8 ## 8 land rover 46 4 ## 9 lincoln 34 3 ## 10 mercury 53 4 ## 11 nissan 235 13 ## 12 pontiac 85 5 ## 13 subaru 270 14 ## 14 toyota 630 34 ## 15 volkswagen 565 27 # dados %&gt;% # filter(manufacturer == &quot;audi&quot;) %&gt;% # select(cty) %&gt;% # sum() v7 &lt;- ggplot(dados , aes(x = cty)) + geom_density() v7 v8 &lt;- ggplot(dados, aes(x = cty, y = hwy)) + geom_density2d()+ geom_point(colour = &quot;red&quot;) v8 (v5+v6)/ (v7 + v8) # Deixar pra depois... dados %&gt;% select(manufacturer, hwy, year) %&gt;% filter(manufacturer == &quot;audi&quot;, year == &quot;1999&quot;) %&gt;% summarise(media = max(hwy)) ## # A tibble: 1 × 1 ## media ## &lt;int&gt; ## 1 29 # plotly ggplotly( ggplot(dados, aes(x = manufacturer, y = hwy, fill = factor(year))) + geom_col(position = &quot;dodge&quot;) + labs(fill = &quot;year&quot;) + theme(axis.text.x = element_text(angle = 45))) dados %&gt;% select(manufacturer, hwy, year) %&gt;% group_by(manufacturer, year) %&gt;% summarise(media = mean(hwy)) # Para pensar (dados_trat &lt;- data.frame(tratamento = LETTERS[1:3], resposta = c(2.3, 1.9, 3.2))) ## tratamento resposta ## 1 A 2.3 ## 2 B 1.9 ## 3 C 3.2 ggplot(dados_trat, aes(tratamento, resposta)) + geom_col(fill = &quot;red&quot;) # Mais detalhes... dados %&gt;% select(manufacturer, hwy, year) %&gt;% group_by(manufacturer, year) %&gt;% summarise(media = mean(hwy), .groups = &quot;drop&quot;) %&gt;% ggplot(aes(x = manufacturer, y = media, fill = factor(year)))+ geom_col(position = &quot;dodge&quot;)+ labs(fill = &quot;year&quot;) + theme(axis.text.x = element_text(angle = 45)) 3.7 facet_grid, facet_wrap p1&lt;- ggplot(dados, aes(x = cty, y = hwy)) + geom_point() p1 p1 + facet_grid(rows = vars(cyl)) p1 + facet_grid(cols = vars(cyl)) p1 + facet_grid(~cyl) p1 + facet_grid(rows = vars(year), cols =vars(cyl)) p1 + facet_grid(year~cyl) p1 + facet_wrap(year ~ cyl) p1 + facet_wrap(cyl ~ year) p1 + facet_wrap(~cyl + year) p1 + facet_wrap(~year + cyl) p1 + facet_wrap(year ~ cyl, ncol = 4) p1 + facet_wrap(cyl ~ year, ncol = 4) 3.8 stat_function a&lt;- -3 # média b&lt;- 4 # desv. padrão ggplot(data.frame(x = c(a - 3*b, a + 3*b)), aes(x)) + stat_function(fun = dnorm, args = list(mean = a, sd = b))+ geom_vline(xintercept = c(a - 3*b, a, a + 3*b), col = &quot;red&quot;, lty = 2)+ theme_minimal() 3.9 stat_summary ggplot(dados, aes(x = manufacturer, y = hwy)) + geom_boxplot()+ geom_point(col = &quot;red&quot;, size=0.8)+ stat_summary(fun = mean, col = &quot;blue&quot;)+ theme_minimal()+ theme(axis.text.x = element_text(angle = 45)) 3.10 theme_*() a1&lt;- p1 + theme_bw() + labs(title = &quot;theme_bw()&quot;) a2&lt;- p1 + theme_classic() + labs(title = &quot;theme_classic()&quot;) a3&lt;- p1 + theme_light() + labs(title = &quot;theme_light()&quot;) a4&lt;- p1 + theme_minimal() + labs(title = &quot;theme_minimal()&quot;) a1 + a2 + a3 + a4 3.11 Gráfico de perfis (Spaguetti plot) glimpse(Orange) ## Rows: 35 ## Columns: 3 ## $ Tree &lt;ord&gt; 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,… ## $ age &lt;dbl&gt; 118, 484, 664, 1004, 1231, 1372, 1582, 118, 484, 664, 10… ## $ circumference &lt;dbl&gt; 30, 58, 87, 115, 120, 142, 145, 33, 69, 111, 156, 172, 2… ggplot(Orange, aes(x = age, y = circumference, group = Tree, col = Tree)) + geom_line()+ stat_summary(aes(group = 1), fun = mean, col = &quot;red&quot;, geom = &quot;line&quot;, size = 1, show.legend = FALSE, linetype = 2)+ xlim(0, 1600)+ theme_minimal() ggplot(Orange, aes(x = age, y = circumference, group = Tree)) + geom_line()+ xlim(0, 1600)+ facet_wrap(~Tree)+ theme_minimal()+ theme(legend.position = &quot;none&quot;) 3.12 plotly plotly cran Interactive web-based data visualization with R, plotly, and shiny Plotly R Open Source Graphing Library ggplotly(v1) ggplotly(v2) ggplotly(v4) ggplotly(v5) 3.13 esquisse Alguns links de interesse esquisse esquisse + shiny esquisser(dados) 3.14 Exemplo esquisse ggplot(dados) + aes(x = displ, y = hwy, colour = drv) + geom_point(shape = &quot;circle&quot;, size = 1.85) + scale_color_hue(direction = 1) + theme_minimal() + theme(legend.position = &quot;top&quot;) ggplot(dados) + aes(x = displ, y = cty, colour = class, size = cty) + geom_point(shape = &quot;circle&quot;) + scale_color_hue(direction = 1) + theme(legend.position = &quot;top&quot;) + facet_wrap(vars(drv)) "],["purrr.html", "4 purrr 4.1 Apply a function to each element of a list or atomic vector 4.2 Examples 4.3 map functions 4.4 map2 functions", " 4 purrr library(tidyverse) ls(&quot;package:purrr&quot;) ## [1] &quot;%@%&quot; &quot;%||%&quot; &quot;%&gt;%&quot; ## [4] &quot;accumulate&quot; &quot;accumulate_right&quot; &quot;accumulate2&quot; ## [7] &quot;array_branch&quot; &quot;array_tree&quot; &quot;as_function&quot; ## [10] &quot;as_mapper&quot; &quot;as_vector&quot; &quot;assign_in&quot; ## [13] &quot;at_depth&quot; &quot;attr_getter&quot; &quot;auto_browse&quot; ## [16] &quot;chuck&quot; &quot;compact&quot; &quot;compose&quot; ## [19] &quot;cross&quot; &quot;cross_d&quot; &quot;cross_df&quot; ## [22] &quot;cross_n&quot; &quot;cross2&quot; &quot;cross3&quot; ## [25] &quot;detect&quot; &quot;detect_index&quot; &quot;discard&quot; ## [28] &quot;done&quot; &quot;every&quot; &quot;exec&quot; ## [31] &quot;flatten&quot; &quot;flatten_chr&quot; &quot;flatten_dbl&quot; ## [34] &quot;flatten_df&quot; &quot;flatten_dfc&quot; &quot;flatten_dfr&quot; ## [37] &quot;flatten_int&quot; &quot;flatten_lgl&quot; &quot;flatten_raw&quot; ## [40] &quot;has_element&quot; &quot;head_while&quot; &quot;imap&quot; ## [43] &quot;imap_chr&quot; &quot;imap_dbl&quot; &quot;imap_dfc&quot; ## [46] &quot;imap_dfr&quot; &quot;imap_int&quot; &quot;imap_lgl&quot; ## [49] &quot;imap_raw&quot; &quot;imodify&quot; &quot;insistently&quot; ## [52] &quot;invoke&quot; &quot;invoke_map&quot; &quot;invoke_map_chr&quot; ## [55] &quot;invoke_map_dbl&quot; &quot;invoke_map_df&quot; &quot;invoke_map_dfc&quot; ## [58] &quot;invoke_map_dfr&quot; &quot;invoke_map_int&quot; &quot;invoke_map_lgl&quot; ## [61] &quot;invoke_map_raw&quot; &quot;is_atomic&quot; &quot;is_bare_atomic&quot; ## [64] &quot;is_bare_character&quot; &quot;is_bare_double&quot; &quot;is_bare_integer&quot; ## [67] &quot;is_bare_list&quot; &quot;is_bare_logical&quot; &quot;is_bare_numeric&quot; ## [70] &quot;is_bare_vector&quot; &quot;is_character&quot; &quot;is_double&quot; ## [73] &quot;is_empty&quot; &quot;is_formula&quot; &quot;is_function&quot; ## [76] &quot;is_integer&quot; &quot;is_list&quot; &quot;is_logical&quot; ## [79] &quot;is_null&quot; &quot;is_numeric&quot; &quot;is_rate&quot; ## [82] &quot;is_scalar_atomic&quot; &quot;is_scalar_character&quot; &quot;is_scalar_double&quot; ## [85] &quot;is_scalar_integer&quot; &quot;is_scalar_list&quot; &quot;is_scalar_logical&quot; ## [88] &quot;is_scalar_numeric&quot; &quot;is_scalar_vector&quot; &quot;is_vector&quot; ## [91] &quot;iwalk&quot; &quot;keep&quot; &quot;lift&quot; ## [94] &quot;lift_dl&quot; &quot;lift_dv&quot; &quot;lift_ld&quot; ## [97] &quot;lift_lv&quot; &quot;lift_vd&quot; &quot;lift_vl&quot; ## [100] &quot;list_along&quot; &quot;list_merge&quot; &quot;list_modify&quot; ## [103] &quot;lmap&quot; &quot;lmap_at&quot; &quot;lmap_if&quot; ## [106] &quot;map&quot; &quot;map_at&quot; &quot;map_call&quot; ## [109] &quot;map_chr&quot; &quot;map_dbl&quot; &quot;map_depth&quot; ## [112] &quot;map_df&quot; &quot;map_dfc&quot; &quot;map_dfr&quot; ## [115] &quot;map_if&quot; &quot;map_int&quot; &quot;map_lgl&quot; ## [118] &quot;map_raw&quot; &quot;map2&quot; &quot;map2_chr&quot; ## [121] &quot;map2_dbl&quot; &quot;map2_df&quot; &quot;map2_dfc&quot; ## [124] &quot;map2_dfr&quot; &quot;map2_int&quot; &quot;map2_lgl&quot; ## [127] &quot;map2_raw&quot; &quot;modify&quot; &quot;modify_at&quot; ## [130] &quot;modify_depth&quot; &quot;modify_if&quot; &quot;modify_in&quot; ## [133] &quot;modify2&quot; &quot;negate&quot; &quot;none&quot; ## [136] &quot;partial&quot; &quot;pluck&quot; &quot;pluck&lt;-&quot; ## [139] &quot;pmap&quot; &quot;pmap_chr&quot; &quot;pmap_dbl&quot; ## [142] &quot;pmap_df&quot; &quot;pmap_dfc&quot; &quot;pmap_dfr&quot; ## [145] &quot;pmap_int&quot; &quot;pmap_lgl&quot; &quot;pmap_raw&quot; ## [148] &quot;possibly&quot; &quot;prepend&quot; &quot;pwalk&quot; ## [151] &quot;quietly&quot; &quot;rate_backoff&quot; &quot;rate_delay&quot; ## [154] &quot;rate_reset&quot; &quot;rate_sleep&quot; &quot;rbernoulli&quot; ## [157] &quot;rdunif&quot; &quot;reduce&quot; &quot;reduce_right&quot; ## [160] &quot;reduce2&quot; &quot;reduce2_right&quot; &quot;rep_along&quot; ## [163] &quot;rerun&quot; &quot;safely&quot; &quot;set_names&quot; ## [166] &quot;simplify&quot; &quot;simplify_all&quot; &quot;slowly&quot; ## [169] &quot;some&quot; &quot;splice&quot; &quot;tail_while&quot; ## [172] &quot;transpose&quot; &quot;update_list&quot; &quot;vec_depth&quot; ## [175] &quot;walk&quot; &quot;walk2&quot; &quot;when&quot; ## [178] &quot;zap&quot; 4.1 Apply a function to each element of a list or atomic vector The map functions transform their input by applying a function to each element of a list or atomic vector and returning an object of the same length as the input. map() always returns a list. See the modify() family for versions that return an object of the same type as the input. map_lgl(), map_int(), map_dbl() and map_chr() return an atomic vector of the indicated type (or die trying). map_dfr() and map_dfc() return a data frame created by row-binding and column-binding respectively. They require dplyr to be installed. The returned values of .f must be of length one for each element of .x. If .f uses an extractor function shortcut, .default can be specified to handle values that are absent or empty. See as_mapper() for more on .default. walk() calls .f for its side-effect and returns the input .x. 4.1.1 Usage map(.x, .f, …) map_lgl(.x, .f, …) map_chr(.x, .f, …) map_int(.x, .f, …) map_dbl(.x, .f, …) map_raw(.x, .f, …) map_dfr(.x, .f, …, .id = NULL) map_dfc(.x, .f, …) walk(.x, .f, …) 4.1.2 Arguments .x A list or atomic vector. .f A function, formula, or vector (not necessarily atomic). If a function, it is used as is. If a formula, e.g. ~ .x + 2, it is converted to a function. There are three ways to refer to the arguments: For a single argument function, use . For a two argument function, use .x and .y For more arguments, use ..1, ..2, ..3 etc This syntax allows you to create very compact anonymous functions. If character vector, numeric vector, or list, it is converted to an extractor function. Character vectors index by name and numeric vectors index by position; use a list to index by position and name at different levels. If a component is not present, the value of .default will be returned. … Additional arguments passed on to the mapped function. .id Either a string or NULL. If a string, the output will contain a variable with that name, storing either the name (if .x is named) or the index (if .x is unnamed) of the input. If NULL, the default, no variable will be created. Only applies to ⁠_dfr⁠ variant. 4.1.3 Value map() Returns a list the same length as .x. map_lgl() returns a logical vector, map_int() an integer vector, map_dbl() a double vector, and map_chr() a character vector. map_df(), map_dfc(), map_dfr() all return a data frame. If .x has names(), the return value preserves those names. The output of .f will be automatically typed upwards, e.g. logical -&gt; integer -&gt; double -&gt; character. walk() returns the input .x (invisibly). This makes it easy to use in pipe. 4.1.4 See Also map_if() for applying a function to only those elements of .x that meet a specified condition. Other map variants: imap(), invoke(), lmap(), map2(), map_if(), modify() 4.2 Examples # Compute normal distributions from an atomic vector 1:10 %&gt;% map(rnorm, n = 10) ## [[1]] ## [1] 0.9847728 1.2134403 1.5271987 0.8699412 1.0326853 1.4969394 ## [7] 0.1967036 1.2745323 0.8581227 -0.4807560 ## ## [[2]] ## [1] 1.954105 2.671244 2.618976 1.374043 2.967331 2.569375 1.547439 0.662164 ## [9] 3.292868 1.207899 ## ## [[3]] ## [1] 3.982925 2.989138 3.476106 1.916062 3.991005 4.380055 3.181884 1.457460 ## [9] 2.561777 3.816446 ## ## [[4]] ## [1] 3.910191 4.188865 4.890194 2.935118 3.096332 2.446448 4.216989 5.179807 ## [9] 2.974192 4.166398 ## ## [[5]] ## [1] 3.846474 6.561309 5.894584 4.956071 3.497541 6.381848 5.840936 4.128073 ## [9] 4.713686 6.431420 ## ## [[6]] ## [1] 6.070228 7.870752 6.489020 6.973389 6.849549 6.519332 5.967410 4.984029 ## [9] 6.683463 3.830970 ## ## [[7]] ## [1] 6.481638 5.649669 8.548069 6.921537 6.464654 7.726066 6.475998 6.799747 ## [9] 6.169225 5.658955 ## ## [[8]] ## [1] 9.359796 7.547208 7.810476 6.848805 8.074348 6.659517 9.657212 6.938745 ## [9] 9.529321 8.374576 ## ## [[9]] ## [1] 10.410501 9.689270 8.524527 8.998205 9.130904 10.373338 8.687423 ## [8] 9.166574 8.966455 10.360590 ## ## [[10]] ## [1] 10.435808 9.288908 9.668146 7.498355 9.559159 10.678296 10.324279 ## [8] 10.079509 9.707040 9.433631 # You can also use an anonymous function 1:10 %&gt;% map(function(x) rnorm(10, x)) ## [[1]] ## [1] 2.312638896 1.488565671 2.081679763 4.250274556 1.093323096 0.006087448 ## [7] 2.243602914 0.643165504 1.583823914 0.902019184 ## ## [[2]] ## [1] 0.7957497 3.3901558 1.3464790 2.1211533 1.1673932 1.8070767 1.1887438 ## [8] 2.3783743 3.2269434 1.7585739 ## ## [[3]] ## [1] 2.4897358 2.2679499 2.4456183 3.8764642 2.4859849 2.2495324 0.9942630 ## [8] 0.8884974 3.4104583 3.5567135 ## ## [[4]] ## [1] 3.091265 2.420960 3.126583 4.907215 4.629660 4.338844 3.589269 3.654768 ## [9] 4.959958 5.116713 ## ## [[5]] ## [1] 3.948429 4.559113 4.068604 7.650255 4.956375 6.943495 3.870947 4.772121 ## [9] 3.631234 4.917196 ## ## [[6]] ## [1] 4.790284 6.635208 7.222999 5.474786 5.266004 6.712271 6.455652 5.591993 ## [9] 5.264093 5.841003 ## ## [[7]] ## [1] 6.260580 6.829698 6.654538 6.641228 5.238742 5.029787 6.815748 8.586614 ## [9] 6.786050 8.854479 ## ## [[8]] ## [1] 7.861666 8.658158 7.742446 7.541804 7.291984 8.218550 8.246015 8.691571 ## [9] 6.119368 7.908149 ## ## [[9]] ## [1] 6.831690 8.127748 9.961263 9.622232 9.182766 9.195515 9.042667 7.781265 ## [9] 8.793952 9.323953 ## ## [[10]] ## [1] 10.071423 9.653958 9.676890 11.486766 9.848096 10.973562 10.593814 ## [8] 10.007440 9.262317 10.386423 # Or a formula 1:10 %&gt;% map(~ rnorm(10, .x)) ## [[1]] ## [1] 1.46809093 0.81892040 -0.27699258 1.15883547 -1.27560745 0.66559751 ## [7] 1.79466289 0.37143972 1.83715287 0.02653139 ## ## [[2]] ## [1] 1.5005557 2.5132414 3.1335278 3.2841949 0.2942115 2.0017352 2.1382454 ## [8] 2.7290475 1.5498179 3.0207087 ## ## [[3]] ## [1] 2.239764 2.655934 3.271333 2.074757 0.579506 3.292257 4.267165 3.338194 ## [9] 5.046800 3.526191 ## ## [[4]] ## [1] 4.741782 5.018736 3.931588 4.270694 3.530900 5.256601 3.266689 2.898363 ## [9] 5.059677 4.036169 ## ## [[5]] ## [1] 4.907031 6.329643 4.765220 5.938428 3.772819 4.603587 4.584548 4.182335 ## [9] 5.338289 6.187431 ## ## [[6]] ## [1] 6.215457 5.511327 6.836773 6.860728 6.350363 6.572379 4.649024 7.065337 ## [9] 6.634251 6.566702 ## ## [[7]] ## [1] 5.706115 7.068877 6.786134 7.035794 5.322005 6.772898 5.443521 8.518114 ## [9] 7.239341 6.678006 ## ## [[8]] ## [1] 8.040349 6.472084 7.818219 8.324279 9.113741 7.244781 7.874199 7.807287 ## [9] 5.498444 7.880996 ## ## [[9]] ## [1] 7.247952 9.014034 10.576555 8.028198 9.808327 9.428881 9.242694 ## [8] 10.694102 8.700257 9.616496 ## ## [[10]] ## [1] 9.349160 9.500872 9.292084 8.530186 10.761558 8.570281 10.077362 ## [8] 10.161438 8.972482 9.140428 # Simplify output to a vector instead of a list by computing the mean of the distributions 1:10 %&gt;% map(rnorm, n = 10) %&gt;% # output a list map_dbl(mean) # output an atomic vector ## [1] 1.320401 1.779741 2.756991 4.020664 4.460907 5.857932 6.608631 7.997054 ## [9] 8.822456 9.815341 # Using set_names() with character vectors is handy to keep track # of the original inputs: set_names(c(&quot;foo&quot;, &quot;bar&quot;)) %&gt;% map_chr(paste0, &quot;:suffix&quot;) ## foo bar ## &quot;foo:suffix&quot; &quot;bar:suffix&quot; # Working with lists favorite_desserts &lt;- list(Sophia = &quot;banana bread&quot;, Eliott = &quot;pancakes&quot;, Karina = &quot;chocolate cake&quot;) favorite_desserts ## $Sophia ## [1] &quot;banana bread&quot; ## ## $Eliott ## [1] &quot;pancakes&quot; ## ## $Karina ## [1] &quot;chocolate cake&quot; favorite_desserts %&gt;% map_chr(~ paste(.x, &quot;rocks!&quot;)) ## Sophia Eliott Karina ## &quot;banana bread rocks!&quot; &quot;pancakes rocks!&quot; &quot;chocolate cake rocks!&quot; # Extract by name or position # .default specifies value for elements that are missing or NULL l1 &lt;- list(list(a = 1L), list(a = NULL, b = 2L), list(b = 3L)) l1 ## [[1]] ## [[1]]$a ## [1] 1 ## ## ## [[2]] ## [[2]]$a ## NULL ## ## [[2]]$b ## [1] 2 ## ## ## [[3]] ## [[3]]$b ## [1] 3 l1 %&gt;% map(&quot;a&quot;, .default = &quot;???&quot;) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] &quot;???&quot; ## ## [[3]] ## [1] &quot;???&quot; l1 %&gt;% map_int(&quot;b&quot;, .default = NA) ## [1] NA 2 3 l1 %&gt;% map_int(2, .default = NA) ## [1] NA 2 NA # Supply multiple values to index deeply into a list l2 &lt;- list( list(num = 1:3, letters[1:3]), list(num = 101:103, letters[4:6]), list()) l2 ## [[1]] ## [[1]]$num ## [1] 1 2 3 ## ## [[1]][[2]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; ## ## ## [[2]] ## [[2]]$num ## [1] 101 102 103 ## ## [[2]][[2]] ## [1] &quot;d&quot; &quot;e&quot; &quot;f&quot; ## ## ## [[3]] ## list() l2 %&gt;% map(c(2, 2)) ## [[1]] ## [1] &quot;b&quot; ## ## [[2]] ## [1] &quot;e&quot; ## ## [[3]] ## NULL # Use a list to build an extractor that mixes numeric indices and names, # and .default to provide a default value if the element does not exist l2 %&gt;% map(list(&quot;num&quot;, 3)) ## [[1]] ## [1] 3 ## ## [[2]] ## [1] 103 ## ## [[3]] ## NULL l2 %&gt;% map_int(list(&quot;num&quot;, 3), .default = NA) ## [1] 3 103 NA # Working with data frames # Use map_lgl(), map_dbl(), etc to return a vector instead of a list: mtcars %&gt;% map_dbl(sum) ## mpg cyl disp hp drat wt qsec vs ## 642.900 198.000 7383.100 4694.000 115.090 102.952 571.160 14.000 ## am gear carb ## 13.000 118.000 90.000 # A more realistic example: split a data frame into pieces, fit a # model to each piece, summarise and extract R^2 mtcars %&gt;% split(.$cyl) ## $`4` ## mpg cyl disp hp drat wt qsec vs am gear carb ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 ## ## $`6` ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## ## $`8` ## mpg cyl disp hp drat wt qsec vs am gear carb ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 mtcars %&gt;% split(.$cyl) %&gt;% map(~ lm(mpg ~ wt, data = .x)) ## $`4` ## ## Call: ## lm(formula = mpg ~ wt, data = .x) ## ## Coefficients: ## (Intercept) wt ## 39.571 -5.647 ## ## ## $`6` ## ## Call: ## lm(formula = mpg ~ wt, data = .x) ## ## Coefficients: ## (Intercept) wt ## 28.41 -2.78 ## ## ## $`8` ## ## Call: ## lm(formula = mpg ~ wt, data = .x) ## ## Coefficients: ## (Intercept) wt ## 23.868 -2.192 mtcars %&gt;% split(.$cyl) %&gt;% map(~ lm(mpg ~ wt, data = .x)) %&gt;% map(summary) ## $`4` ## ## Call: ## lm(formula = mpg ~ wt, data = .x) ## ## Residuals: ## Min 1Q Median 3Q Max ## -4.1513 -1.9795 -0.6272 1.9299 5.2523 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 39.571 4.347 9.104 7.77e-06 *** ## wt -5.647 1.850 -3.052 0.0137 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 3.332 on 9 degrees of freedom ## Multiple R-squared: 0.5086, Adjusted R-squared: 0.454 ## F-statistic: 9.316 on 1 and 9 DF, p-value: 0.01374 ## ## ## $`6` ## ## Call: ## lm(formula = mpg ~ wt, data = .x) ## ## Residuals: ## Mazda RX4 Mazda RX4 Wag Hornet 4 Drive Valiant Merc 280 ## -0.1250 0.5840 1.9292 -0.6897 0.3547 ## Merc 280C Ferrari Dino ## -1.0453 -1.0080 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 28.409 4.184 6.789 0.00105 ** ## wt -2.780 1.335 -2.083 0.09176 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.165 on 5 degrees of freedom ## Multiple R-squared: 0.4645, Adjusted R-squared: 0.3574 ## F-statistic: 4.337 on 1 and 5 DF, p-value: 0.09176 ## ## ## $`8` ## ## Call: ## lm(formula = mpg ~ wt, data = .x) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.1491 -1.4664 -0.8458 1.5711 3.7619 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 23.8680 3.0055 7.942 4.05e-06 *** ## wt -2.1924 0.7392 -2.966 0.0118 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.024 on 12 degrees of freedom ## Multiple R-squared: 0.423, Adjusted R-squared: 0.3749 ## F-statistic: 8.796 on 1 and 12 DF, p-value: 0.01179 # original mtcars %&gt;% split(.$cyl) %&gt;% map(~ lm(mpg ~ wt, data = .x)) %&gt;% map(summary) %&gt;% map_dbl(&quot;r.squared&quot;) ## 4 6 8 ## 0.5086326 0.4645102 0.4229655 # If each element of the output is a data frame, use # map_dfr to row-bind them together: mtcars %&gt;% split(.$cyl) %&gt;% map(~ lm(mpg ~ wt, data = .x)) %&gt;% map_dfr(~ as.data.frame(t(as.matrix(coef(.))))) ## (Intercept) wt ## 1 39.57120 -5.647025 ## 2 28.40884 -2.780106 ## 3 23.86803 -2.192438 # (if you also want to preserve the variable names see # the broom package) #nest, unest() estudar! mtcars %&gt;% group_by(cyl) %&gt;% nest() ## # A tibble: 3 × 2 ## # Groups: cyl [3] ## cyl data ## &lt;dbl&gt; &lt;list&gt; ## 1 6 &lt;tibble [7 × 10]&gt; ## 2 4 &lt;tibble [11 × 10]&gt; ## 3 8 &lt;tibble [14 × 10]&gt; #mtcars %&gt;% # group_by(cyl) %&gt;% # nest() %&gt;% # map(~ lm(mpg ~ wt, data = .x)) 4.3 map functions example(&quot;map&quot;) example(&quot;map_at&quot;) example(&quot;map_chr&quot;) example(&quot;map_dbl&quot;) example(&quot;map_df&quot;) example(&quot;map_dfc&quot;) example(&quot;map_dfr&quot;) example(&quot;map_int&quot;) example(&quot;map_lgl&quot;) example(&quot;map_vec&quot;) 4.4 map2 functions example(&quot;map2&quot;) example(&quot;map2_chr&quot;) example(&quot;map2_dbl&quot;) example(&quot;map2_df&quot;) example(&quot;map2_dfc&quot;) example(&quot;map2_dfr&quot;) example(&quot;map2_int&quot;) example(&quot;map2_lgl&quot;) example(&quot;map2_raw&quot;) example(&quot;map2_vec&quot;) "],["tidyr.html", "5 tidyr 5.1 nest() 5.2 unnest() 5.3 Exemplos da ajuda do R 5.4 Mais detalhes", " 5 tidyr More details in https://tidyr.tidyverse.org/articles/nest.html 5.1 nest() library(tidyverse) mtcars %&gt;% group_by(cyl) %&gt;% nest() ## # A tibble: 3 × 2 ## # Groups: cyl [3] ## cyl data ## &lt;dbl&gt; &lt;list&gt; ## 1 6 &lt;tibble [7 × 10]&gt; ## 2 4 &lt;tibble [11 × 10]&gt; ## 3 8 &lt;tibble [14 × 10]&gt; um&lt;- mtcars %&gt;% group_by(cyl) %&gt;% nest() %&gt;% mutate( linMod = map(data, ~lm(mpg ~ wt, data = .)), coeffs = map(linMod, coefficients), slope = map_dbl(coeffs, 2)) um ## # A tibble: 3 × 5 ## # Groups: cyl [3] ## cyl data linMod coeffs slope ## &lt;dbl&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; &lt;dbl&gt; ## 1 6 &lt;tibble [7 × 10]&gt; &lt;lm&gt; &lt;dbl [2]&gt; -2.78 ## 2 4 &lt;tibble [11 × 10]&gt; &lt;lm&gt; &lt;dbl [2]&gt; -5.65 ## 3 8 &lt;tibble [14 × 10]&gt; &lt;lm&gt; &lt;dbl [2]&gt; -2.19 um$linMod ## [[1]] ## ## Call: ## lm(formula = mpg ~ wt, data = .) ## ## Coefficients: ## (Intercept) wt ## 28.41 -2.78 ## ## ## [[2]] ## ## Call: ## lm(formula = mpg ~ wt, data = .) ## ## Coefficients: ## (Intercept) wt ## 39.571 -5.647 ## ## ## [[3]] ## ## Call: ## lm(formula = mpg ~ wt, data = .) ## ## Coefficients: ## (Intercept) wt ## 23.868 -2.192 um$coeffs ## [[1]] ## (Intercept) wt ## 28.408845 -2.780106 ## ## [[2]] ## (Intercept) wt ## 39.571196 -5.647025 ## ## [[3]] ## (Intercept) wt ## 23.868029 -2.192438 um$slope ## [1] -2.780106 -5.647025 -2.192438 um$linMod[[1]] ## ## Call: ## lm(formula = mpg ~ wt, data = .) ## ## Coefficients: ## (Intercept) wt ## 28.41 -2.78 dois&lt;- mtcars %&gt;% group_by(cyl) %&gt;% nest() %&gt;% mutate(model = map(data, function(df) lm(mpg ~ wt, data = df))) dois ## # A tibble: 3 × 3 ## # Groups: cyl [3] ## cyl data model ## &lt;dbl&gt; &lt;list&gt; &lt;list&gt; ## 1 6 &lt;tibble [7 × 10]&gt; &lt;lm&gt; ## 2 4 &lt;tibble [11 × 10]&gt; &lt;lm&gt; ## 3 8 &lt;tibble [14 × 10]&gt; &lt;lm&gt; dois$cyl ## [1] 6 4 8 dois$data ## [[1]] ## # A tibble: 7 × 10 ## mpg disp hp drat wt qsec vs am gear carb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 21 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 21 160 110 3.9 2.88 17.0 0 1 4 4 ## 3 21.4 258 110 3.08 3.22 19.4 1 0 3 1 ## 4 18.1 225 105 2.76 3.46 20.2 1 0 3 1 ## 5 19.2 168. 123 3.92 3.44 18.3 1 0 4 4 ## 6 17.8 168. 123 3.92 3.44 18.9 1 0 4 4 ## 7 19.7 145 175 3.62 2.77 15.5 0 1 5 6 ## ## [[2]] ## # A tibble: 11 × 10 ## mpg disp hp drat wt qsec vs am gear carb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 22.8 108 93 3.85 2.32 18.6 1 1 4 1 ## 2 24.4 147. 62 3.69 3.19 20 1 0 4 2 ## 3 22.8 141. 95 3.92 3.15 22.9 1 0 4 2 ## 4 32.4 78.7 66 4.08 2.2 19.5 1 1 4 1 ## 5 30.4 75.7 52 4.93 1.62 18.5 1 1 4 2 ## 6 33.9 71.1 65 4.22 1.84 19.9 1 1 4 1 ## 7 21.5 120. 97 3.7 2.46 20.0 1 0 3 1 ## 8 27.3 79 66 4.08 1.94 18.9 1 1 4 1 ## 9 26 120. 91 4.43 2.14 16.7 0 1 5 2 ## 10 30.4 95.1 113 3.77 1.51 16.9 1 1 5 2 ## 11 21.4 121 109 4.11 2.78 18.6 1 1 4 2 ## ## [[3]] ## # A tibble: 14 × 10 ## mpg disp hp drat wt qsec vs am gear carb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 18.7 360 175 3.15 3.44 17.0 0 0 3 2 ## 2 14.3 360 245 3.21 3.57 15.8 0 0 3 4 ## 3 16.4 276. 180 3.07 4.07 17.4 0 0 3 3 ## 4 17.3 276. 180 3.07 3.73 17.6 0 0 3 3 ## 5 15.2 276. 180 3.07 3.78 18 0 0 3 3 ## 6 10.4 472 205 2.93 5.25 18.0 0 0 3 4 ## 7 10.4 460 215 3 5.42 17.8 0 0 3 4 ## 8 14.7 440 230 3.23 5.34 17.4 0 0 3 4 ## 9 15.5 318 150 2.76 3.52 16.9 0 0 3 2 ## 10 15.2 304 150 3.15 3.44 17.3 0 0 3 2 ## 11 13.3 350 245 3.73 3.84 15.4 0 0 3 4 ## 12 19.2 400 175 3.08 3.84 17.0 0 0 3 2 ## 13 15.8 351 264 4.22 3.17 14.5 0 1 5 4 ## 14 15 301 335 3.54 3.57 14.6 0 1 5 8 dois$model ## [[1]] ## ## Call: ## lm(formula = mpg ~ wt, data = df) ## ## Coefficients: ## (Intercept) wt ## 28.41 -2.78 ## ## ## [[2]] ## ## Call: ## lm(formula = mpg ~ wt, data = df) ## ## Coefficients: ## (Intercept) wt ## 39.571 -5.647 ## ## ## [[3]] ## ## Call: ## lm(formula = mpg ~ wt, data = df) ## ## Coefficients: ## (Intercept) wt ## 23.868 -2.192 dois$model[[3]] ## ## Call: ## lm(formula = mpg ~ wt, data = df) ## ## Coefficients: ## (Intercept) wt ## 23.868 -2.192 tres&lt;- dois %&gt;% mutate(model = map(model, predict)) tres ## # A tibble: 3 × 3 ## # Groups: cyl [3] ## cyl data model ## &lt;dbl&gt; &lt;list&gt; &lt;list&gt; ## 1 6 &lt;tibble [7 × 10]&gt; &lt;dbl [7]&gt; ## 2 4 &lt;tibble [11 × 10]&gt; &lt;dbl [11]&gt; ## 3 8 &lt;tibble [14 × 10]&gt; &lt;dbl [14]&gt; tres$model ## [[1]] ## 1 2 3 4 5 6 7 ## 21.12497 20.41604 19.47080 18.78968 18.84528 18.84528 20.70795 ## ## [[2]] ## 1 2 3 4 5 6 7 8 ## 26.47010 21.55719 21.78307 27.14774 30.45125 29.20890 25.65128 28.64420 ## 9 10 11 ## 27.48656 31.02725 23.87247 ## ## [[3]] ## 1 2 3 4 5 6 7 8 ## 16.32604 16.04103 14.94481 15.69024 15.58061 12.35773 11.97625 12.14945 ## 9 10 11 12 13 14 ## 16.15065 16.33700 15.44907 15.43811 16.91800 16.04103 tres$model[[3]] ## 1 2 3 4 5 6 7 8 ## 16.32604 16.04103 14.94481 15.69024 15.58061 12.35773 11.97625 12.14945 ## 9 10 11 12 13 14 ## 16.15065 16.33700 15.44907 15.43811 16.91800 16.04103 5.2 unnest() um %&gt;% unnest(data) ## # A tibble: 32 × 14 ## # Groups: cyl [3] ## cyl mpg disp hp drat wt qsec vs am gear carb linMod ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;list&gt; ## 1 6 21 160 110 3.9 2.62 16.5 0 1 4 4 &lt;lm&gt; ## 2 6 21 160 110 3.9 2.88 17.0 0 1 4 4 &lt;lm&gt; ## 3 6 21.4 258 110 3.08 3.22 19.4 1 0 3 1 &lt;lm&gt; ## 4 6 18.1 225 105 2.76 3.46 20.2 1 0 3 1 &lt;lm&gt; ## 5 6 19.2 168. 123 3.92 3.44 18.3 1 0 4 4 &lt;lm&gt; ## 6 6 17.8 168. 123 3.92 3.44 18.9 1 0 4 4 &lt;lm&gt; ## 7 6 19.7 145 175 3.62 2.77 15.5 0 1 5 6 &lt;lm&gt; ## 8 4 22.8 108 93 3.85 2.32 18.6 1 1 4 1 &lt;lm&gt; ## 9 4 24.4 147. 62 3.69 3.19 20 1 0 4 2 &lt;lm&gt; ## 10 4 22.8 141. 95 3.92 3.15 22.9 1 0 4 2 &lt;lm&gt; ## # … with 22 more rows, and 2 more variables: coeffs &lt;list&gt;, slope &lt;dbl&gt; 5.3 Exemplos da ajuda do R df &lt;- tibble(x = c(1, 1, 1, 2, 2, 3), y = 1:6, z = 6:1) df ## # A tibble: 6 × 3 ## x y z ## &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 1 1 6 ## 2 1 2 5 ## 3 1 3 4 ## 4 2 4 3 ## 5 2 5 2 ## 6 3 6 1 # Note that we get one row of output for each unique combination of # non-nested variables df %&gt;% nest(data = c(y, z)) ## # A tibble: 3 × 2 ## x data ## &lt;dbl&gt; &lt;list&gt; ## 1 1 &lt;tibble [3 × 2]&gt; ## 2 2 &lt;tibble [2 × 2]&gt; ## 3 3 &lt;tibble [1 × 2]&gt; # chop does something similar, but retains individual columns df %&gt;% chop(c(y, z)) ## # A tibble: 3 × 3 ## x y z ## &lt;dbl&gt; &lt;list&lt;int&gt;&gt; &lt;list&lt;int&gt;&gt; ## 1 1 [3] [3] ## 2 2 [2] [2] ## 3 3 [1] [1] # use tidyselect syntax and helpers, just like in dplyr::select() df %&gt;% nest(data = any_of(c(&quot;y&quot;, &quot;z&quot;))) ## # A tibble: 3 × 2 ## x data ## &lt;dbl&gt; &lt;list&gt; ## 1 1 &lt;tibble [3 × 2]&gt; ## 2 2 &lt;tibble [2 × 2]&gt; ## 3 3 &lt;tibble [1 × 2]&gt; iris %&gt;% nest(data = !Species) ## # A tibble: 3 × 2 ## Species data ## &lt;fct&gt; &lt;list&gt; ## 1 setosa &lt;tibble [50 × 4]&gt; ## 2 versicolor &lt;tibble [50 × 4]&gt; ## 3 virginica &lt;tibble [50 × 4]&gt; nest_vars &lt;- names(iris)[1:4] iris %&gt;% nest(data = any_of(nest_vars)) ## # A tibble: 3 × 2 ## Species data ## &lt;fct&gt; &lt;list&gt; ## 1 setosa &lt;tibble [50 × 4]&gt; ## 2 versicolor &lt;tibble [50 × 4]&gt; ## 3 virginica &lt;tibble [50 × 4]&gt; iris %&gt;% nest(petal = starts_with(&quot;Petal&quot;), sepal = starts_with(&quot;Sepal&quot;)) ## # A tibble: 3 × 3 ## Species petal sepal ## &lt;fct&gt; &lt;list&gt; &lt;list&gt; ## 1 setosa &lt;tibble [50 × 2]&gt; &lt;tibble [50 × 2]&gt; ## 2 versicolor &lt;tibble [50 × 2]&gt; &lt;tibble [50 × 2]&gt; ## 3 virginica &lt;tibble [50 × 2]&gt; &lt;tibble [50 × 2]&gt; iris %&gt;% nest(width = contains(&quot;Width&quot;), length = contains(&quot;Length&quot;)) ## # A tibble: 3 × 3 ## Species width length ## &lt;fct&gt; &lt;list&gt; &lt;list&gt; ## 1 setosa &lt;tibble [50 × 2]&gt; &lt;tibble [50 × 2]&gt; ## 2 versicolor &lt;tibble [50 × 2]&gt; &lt;tibble [50 × 2]&gt; ## 3 virginica &lt;tibble [50 × 2]&gt; &lt;tibble [50 × 2]&gt; # Nesting a grouped data frame nests all variables apart from the group vars fish_encounters %&gt;% group_by(fish) %&gt;% nest() ## # A tibble: 19 × 2 ## # Groups: fish [19] ## fish data ## &lt;fct&gt; &lt;list&gt; ## 1 4842 &lt;tibble [11 × 2]&gt; ## 2 4843 &lt;tibble [11 × 2]&gt; ## 3 4844 &lt;tibble [11 × 2]&gt; ## 4 4845 &lt;tibble [5 × 2]&gt; ## 5 4847 &lt;tibble [3 × 2]&gt; ## 6 4848 &lt;tibble [4 × 2]&gt; ## 7 4849 &lt;tibble [2 × 2]&gt; ## 8 4850 &lt;tibble [6 × 2]&gt; ## 9 4851 &lt;tibble [2 × 2]&gt; ## 10 4854 &lt;tibble [2 × 2]&gt; ## 11 4855 &lt;tibble [5 × 2]&gt; ## 12 4857 &lt;tibble [9 × 2]&gt; ## 13 4858 &lt;tibble [11 × 2]&gt; ## 14 4859 &lt;tibble [5 × 2]&gt; ## 15 4861 &lt;tibble [11 × 2]&gt; ## 16 4862 &lt;tibble [9 × 2]&gt; ## 17 4863 &lt;tibble [2 × 2]&gt; ## 18 4864 &lt;tibble [2 × 2]&gt; ## 19 4865 &lt;tibble [3 × 2]&gt; # Nesting is often useful for creating per group models mtcars %&gt;% group_by(cyl) %&gt;% nest() %&gt;% mutate(models = lapply(data, function(df) lm(mpg ~ wt, data = df))) ## # A tibble: 3 × 3 ## # Groups: cyl [3] ## cyl data models ## &lt;dbl&gt; &lt;list&gt; &lt;list&gt; ## 1 6 &lt;tibble [7 × 10]&gt; &lt;lm&gt; ## 2 4 &lt;tibble [11 × 10]&gt; &lt;lm&gt; ## 3 8 &lt;tibble [14 × 10]&gt; &lt;lm&gt; # unnest() is primarily designed to work with lists of data frames df &lt;- tibble( x = 1:3, y = list( NULL, tibble(a = 1, b = 2), tibble(a = 1:3, b = 3:1) ) ) df %&gt;% unnest(y) ## # A tibble: 4 × 3 ## x a b ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2 1 2 ## 2 3 1 3 ## 3 3 2 2 ## 4 3 3 1 df %&gt;% unnest(y, keep_empty = TRUE) ## # A tibble: 5 × 3 ## x a b ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 NA NA ## 2 2 1 2 ## 3 3 1 3 ## 4 3 2 2 ## 5 3 3 1 # If you have lists of lists, or lists of atomic vectors, instead # see hoist(), unnest_wider(), and unnest_longer() #&#39; # You can unnest multiple columns simultaneously df &lt;- tibble( a = list(c(&quot;a&quot;, &quot;b&quot;), &quot;c&quot;), b = list(1:2, 3), c = c(11, 22) ) df ## # A tibble: 2 × 3 ## a b c ## &lt;list&gt; &lt;list&gt; &lt;dbl&gt; ## 1 &lt;chr [2]&gt; &lt;int [2]&gt; 11 ## 2 &lt;chr [1]&gt; &lt;dbl [1]&gt; 22 df %&gt;% unnest(c(a, b)) ## # A tibble: 3 × 3 ## a b c ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 a 1 11 ## 2 b 2 11 ## 3 c 3 22 # Compare with unnesting one column at a time, which generates # the Cartesian product df %&gt;% unnest(a) %&gt;% unnest(b) ## # A tibble: 5 × 3 ## a b c ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 a 1 11 ## 2 a 2 11 ## 3 b 1 11 ## 4 b 2 11 ## 5 c 3 22 5.4 Mais detalhes https://github.com/tidymodels/broom/blob/main/vignettes/broom_and_dplyr.Rmd "],["broom-and-dplyr.html", "6 broom and dplyr 6.1 Tidy bootstrapping 6.2 links", " 6 broom and dplyr While broom is useful for summarizing the result of a single analysis in a consistent format, it is really designed for high-throughput applications, where you must combine results from multiple analyses. These could be subgroups of data, analyses using different models, bootstrap replicates, permutations, and so on. In particular, it plays well with the nest/unnest functions in tidyr and the map function in purrr. First, loading necessary packages and setting some defaults: library(broom) library(tibble) library(ggplot2) library(dplyr) library(tidyr) library(purrr) theme_set(theme_minimal()) Let’s try this on a simple dataset, the built-in Orange. We start by coercing Orange to a tibble. This gives a nicer print method that will especially useful later on when we start working with list-columns. data(Orange) Orange &lt;- as_tibble(Orange) Orange ## # A tibble: 35 × 3 ## Tree age circumference ## &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 118 30 ## 2 1 484 58 ## 3 1 664 87 ## 4 1 1004 115 ## 5 1 1231 120 ## 6 1 1372 142 ## 7 1 1582 145 ## 8 2 118 33 ## 9 2 484 69 ## 10 2 664 111 ## # … with 25 more rows This contains 35 observations of three variables: Tree, age, and circumference. Tree is a factor with five levels describing five trees. As might be expected, age and circumference are correlated: cor(Orange$age, Orange$circumference) ## [1] 0.9135189 ggplot(Orange, aes(age, circumference, color = Tree)) + geom_line() Suppose you want to test for correlations individually within each tree. You can do this with dplyr’s group_by: Orange %&gt;% group_by(Tree) %&gt;% summarize(correlation = cor(age, circumference)) ## # A tibble: 5 × 2 ## Tree correlation ## &lt;ord&gt; &lt;dbl&gt; ## 1 3 0.988 ## 2 1 0.985 ## 3 5 0.988 ## 4 2 0.987 ## 5 4 0.984 (Note that the correlations are much higher than the aggregated one, and furthermore we can now see it is similar across trees). Suppose that instead of simply estimating a correlation, we want to perform a hypothesis test with cor.test: ct &lt;- cor.test(Orange$age, Orange$circumference) ct ## ## Pearson&#39;s product-moment correlation ## ## data: Orange$age and Orange$circumference ## t = 12.9, df = 33, p-value = 1.931e-14 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.8342364 0.9557955 ## sample estimates: ## cor ## 0.9135189 This contains multiple values we could want in our output. Some are vectors of length 1, such as the p-value and the estimate, and some are longer, such as the confidence interval. We can get this into a nicely organized tibble using the tidy function: tidy(ct) ## # A tibble: 1 × 8 ## estimate statistic p.value parameter conf.low conf.high method alter…¹ ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 0.914 12.9 1.93e-14 33 0.834 0.956 Pearson&#39;s pr… two.si… ## # … with abbreviated variable name ¹​alternative Often, we want to perform multiple tests or fit multiple models, each on a different part of the data. In this case, we recommend a nest-map-unnest workflow. For example, suppose we want to perform correlation tests for each different tree. We start by nesting our data based on the group of interest: nested &lt;- Orange %&gt;% nest(data = -Tree) Then we run a correlation test for each nested tibble using purrr::map: nested %&gt;% mutate(test = map(data, ~ cor.test(.x$age, .x$circumference))) ## # A tibble: 5 × 3 ## Tree data test ## &lt;ord&gt; &lt;list&gt; &lt;list&gt; ## 1 1 &lt;tibble [7 × 2]&gt; &lt;htest&gt; ## 2 2 &lt;tibble [7 × 2]&gt; &lt;htest&gt; ## 3 3 &lt;tibble [7 × 2]&gt; &lt;htest&gt; ## 4 4 &lt;tibble [7 × 2]&gt; &lt;htest&gt; ## 5 5 &lt;tibble [7 × 2]&gt; &lt;htest&gt; This results in a list-column of S3 objects. We want to tidy each of the objects, which we can also do with map. nested %&gt;% mutate( test = map(data, ~ cor.test(.x$age, .x$circumference)), # S3 list-col tidied = map(test, tidy) ) ## # A tibble: 5 × 4 ## Tree data test tidied ## &lt;ord&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; ## 1 1 &lt;tibble [7 × 2]&gt; &lt;htest&gt; &lt;tibble [1 × 8]&gt; ## 2 2 &lt;tibble [7 × 2]&gt; &lt;htest&gt; &lt;tibble [1 × 8]&gt; ## 3 3 &lt;tibble [7 × 2]&gt; &lt;htest&gt; &lt;tibble [1 × 8]&gt; ## 4 4 &lt;tibble [7 × 2]&gt; &lt;htest&gt; &lt;tibble [1 × 8]&gt; ## 5 5 &lt;tibble [7 × 2]&gt; &lt;htest&gt; &lt;tibble [1 × 8]&gt; Finally, we want to unnest the tidied data frames so we can see the results in a flat tibble. All together, this looks like: Orange %&gt;% nest(data = -Tree) %&gt;% mutate( test = map(data, ~ cor.test(.x$age, .x$circumference)), # S3 list-col tidied = map(test, tidy) ) %&gt;% unnest(tidied) ## # A tibble: 5 × 11 ## Tree data test estimate stati…¹ p.value param…² conf.…³ conf.…⁴ method ## &lt;ord&gt; &lt;list&gt; &lt;list&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1 &lt;tibble&gt; &lt;htest&gt; 0.985 13.0 4.85e-5 5 0.901 0.998 Pears… ## 2 2 &lt;tibble&gt; &lt;htest&gt; 0.987 13.9 3.43e-5 5 0.914 0.998 Pears… ## 3 3 &lt;tibble&gt; &lt;htest&gt; 0.988 14.4 2.90e-5 5 0.919 0.998 Pears… ## 4 4 &lt;tibble&gt; &lt;htest&gt; 0.984 12.5 5.73e-5 5 0.895 0.998 Pears… ## 5 5 &lt;tibble&gt; &lt;htest&gt; 0.988 14.1 3.18e-5 5 0.916 0.998 Pears… ## # … with 1 more variable: alternative &lt;chr&gt;, and abbreviated variable names ## # ¹​statistic, ²​parameter, ³​conf.low, ⁴​conf.high This workflow becomes even more useful when applied to regressions. Untidy output for a regression looks like: lm_fit &lt;- lm(age ~ circumference, data = Orange) summary(lm_fit) ## ## Call: ## lm(formula = age ~ circumference, data = Orange) ## ## Residuals: ## Min 1Q Median 3Q Max ## -317.88 -140.90 -17.20 96.54 471.16 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 16.6036 78.1406 0.212 0.833 ## circumference 7.8160 0.6059 12.900 1.93e-14 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 203.1 on 33 degrees of freedom ## Multiple R-squared: 0.8345, Adjusted R-squared: 0.8295 ## F-statistic: 166.4 on 1 and 33 DF, p-value: 1.931e-14 where we tidy these results, we get multiple rows of output for each model: tidy(lm_fit) ## # A tibble: 2 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 16.6 78.1 0.212 8.33e- 1 ## 2 circumference 7.82 0.606 12.9 1.93e-14 Now we can handle multiple regressions at once using exactly the same workflow as before: Orange %&gt;% nest(data = -Tree) %&gt;% mutate( fit = map(data, ~ lm(age ~ circumference, data = .x)), tidied = map(fit, tidy) ) %&gt;% unnest(tidied) ## # A tibble: 10 × 8 ## Tree data fit term estimate std.er…¹ stati…² p.value ## &lt;ord&gt; &lt;list&gt; &lt;list&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 &lt;tibble [7 × 2]&gt; &lt;lm&gt; (Intercept) -265. 98.6 -2.68 4.36e-2 ## 2 1 &lt;tibble [7 × 2]&gt; &lt;lm&gt; circumference 11.9 0.919 13.0 4.85e-5 ## 3 2 &lt;tibble [7 × 2]&gt; &lt;lm&gt; (Intercept) -132. 83.1 -1.59 1.72e-1 ## 4 2 &lt;tibble [7 × 2]&gt; &lt;lm&gt; circumference 7.80 0.560 13.9 3.43e-5 ## 5 3 &lt;tibble [7 × 2]&gt; &lt;lm&gt; (Intercept) -210. 85.3 -2.46 5.74e-2 ## 6 3 &lt;tibble [7 × 2]&gt; &lt;lm&gt; circumference 12.0 0.835 14.4 2.90e-5 ## 7 4 &lt;tibble [7 × 2]&gt; &lt;lm&gt; (Intercept) -76.5 88.3 -0.867 4.26e-1 ## 8 4 &lt;tibble [7 × 2]&gt; &lt;lm&gt; circumference 7.17 0.572 12.5 5.73e-5 ## 9 5 &lt;tibble [7 × 2]&gt; &lt;lm&gt; (Intercept) -54.5 76.9 -0.709 5.10e-1 ## 10 5 &lt;tibble [7 × 2]&gt; &lt;lm&gt; circumference 8.79 0.621 14.1 3.18e-5 ## # … with abbreviated variable names ¹​std.error, ²​statistic You can just as easily use multiple predictors in the regressions, as shown here on the mtcars dataset. We nest the data into automatic and manual cars (the am column), then perform the regression within each nested tibble. data(mtcars) mtcars &lt;- as_tibble(mtcars) # to play nicely with list-cols mtcars ## # A tibble: 32 × 11 ## mpg cyl disp hp drat wt qsec vs am gear carb ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 21 6 160 110 3.9 2.62 16.5 0 1 4 4 ## 2 21 6 160 110 3.9 2.88 17.0 0 1 4 4 ## 3 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 ## 4 21.4 6 258 110 3.08 3.22 19.4 1 0 3 1 ## 5 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 ## 6 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 ## 7 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 ## 8 24.4 4 147. 62 3.69 3.19 20 1 0 4 2 ## 9 22.8 4 141. 95 3.92 3.15 22.9 1 0 4 2 ## 10 19.2 6 168. 123 3.92 3.44 18.3 1 0 4 4 ## # … with 22 more rows mtcars %&gt;% nest(data = -am) %&gt;% mutate( fit = map(data, ~ lm(wt ~ mpg + qsec + gear, data = .x)), # S3 list-col tidied = map(fit, tidy) ) %&gt;% unnest(tidied) ## # A tibble: 8 × 8 ## am data fit term estimate std.error stati…¹ p.value ## &lt;dbl&gt; &lt;list&gt; &lt;list&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 &lt;tibble [13 × 10]&gt; &lt;lm&gt; (Intercept) 4.28 3.46 1.24 2.47e-1 ## 2 1 &lt;tibble [13 × 10]&gt; &lt;lm&gt; mpg -0.101 0.0294 -3.43 7.50e-3 ## 3 1 &lt;tibble [13 × 10]&gt; &lt;lm&gt; qsec 0.0398 0.151 0.264 7.98e-1 ## 4 1 &lt;tibble [13 × 10]&gt; &lt;lm&gt; gear -0.0229 0.349 -0.0656 9.49e-1 ## 5 0 &lt;tibble [19 × 10]&gt; &lt;lm&gt; (Intercept) 4.92 1.40 3.52 3.09e-3 ## 6 0 &lt;tibble [19 × 10]&gt; &lt;lm&gt; mpg -0.192 0.0443 -4.33 5.91e-4 ## 7 0 &lt;tibble [19 × 10]&gt; &lt;lm&gt; qsec 0.0919 0.0983 0.935 3.65e-1 ## 8 0 &lt;tibble [19 × 10]&gt; &lt;lm&gt; gear 0.147 0.368 0.398 6.96e-1 ## # … with abbreviated variable name ¹​statistic What if you want not just the tidy output, but the augment and glance outputs as well, while still performing each regression only once? Since we’re using list-columns, we can just fit the model once and use multiple list-columns to store the tidied, glanced and augmented outputs. regressions &lt;- mtcars %&gt;% nest(data = -am) %&gt;% mutate( fit = map(data, ~ lm(wt ~ mpg + qsec + gear, data = .x)), tidied = map(fit, tidy), glanced = map(fit, glance), augmented = map(fit, augment) ) regressions %&gt;% unnest(tidied) ## # A tibble: 8 × 10 ## am data fit term estim…¹ std.e…² stati…³ p.value glanced augmen…⁴ ## &lt;dbl&gt; &lt;list&gt; &lt;list&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt; ## 1 1 &lt;tibble&gt; &lt;lm&gt; (Inte… 4.28 3.46 1.24 2.47e-1 &lt;tibble&gt; &lt;tibble&gt; ## 2 1 &lt;tibble&gt; &lt;lm&gt; mpg -0.101 0.0294 -3.43 7.50e-3 &lt;tibble&gt; &lt;tibble&gt; ## 3 1 &lt;tibble&gt; &lt;lm&gt; qsec 0.0398 0.151 0.264 7.98e-1 &lt;tibble&gt; &lt;tibble&gt; ## 4 1 &lt;tibble&gt; &lt;lm&gt; gear -0.0229 0.349 -0.0656 9.49e-1 &lt;tibble&gt; &lt;tibble&gt; ## 5 0 &lt;tibble&gt; &lt;lm&gt; (Inte… 4.92 1.40 3.52 3.09e-3 &lt;tibble&gt; &lt;tibble&gt; ## 6 0 &lt;tibble&gt; &lt;lm&gt; mpg -0.192 0.0443 -4.33 5.91e-4 &lt;tibble&gt; &lt;tibble&gt; ## 7 0 &lt;tibble&gt; &lt;lm&gt; qsec 0.0919 0.0983 0.935 3.65e-1 &lt;tibble&gt; &lt;tibble&gt; ## 8 0 &lt;tibble&gt; &lt;lm&gt; gear 0.147 0.368 0.398 6.96e-1 &lt;tibble&gt; &lt;tibble&gt; ## # … with abbreviated variable names ¹​estimate, ²​std.error, ³​statistic, ## # ⁴​augmented regressions %&gt;% unnest(glanced) ## # A tibble: 2 × 17 ## am data fit tidied r.squared adj.r.s…¹ sigma stati…² p.value df ## &lt;dbl&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; 0.833 0.778 0.291 15.0 7.59e-4 3 ## 2 0 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; 0.625 0.550 0.522 8.32 1.70e-3 3 ## # … with 7 more variables: logLik &lt;dbl&gt;, AIC &lt;dbl&gt;, BIC &lt;dbl&gt;, deviance &lt;dbl&gt;, ## # df.residual &lt;int&gt;, nobs &lt;int&gt;, augmented &lt;list&gt;, and abbreviated variable ## # names ¹​adj.r.squared, ²​statistic regressions %&gt;% unnest(augmented) ## # A tibble: 32 × 15 ## am data fit tidied glanced wt mpg qsec gear .fitted ## &lt;dbl&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; &lt;tibble&gt; 2.62 21 16.5 4 2.73 ## 2 1 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; &lt;tibble&gt; 2.88 21 17.0 4 2.75 ## 3 1 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; &lt;tibble&gt; 2.32 22.8 18.6 4 2.63 ## 4 1 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; &lt;tibble&gt; 2.2 32.4 19.5 4 1.70 ## 5 1 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; &lt;tibble&gt; 1.62 30.4 18.5 4 1.86 ## 6 1 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; &lt;tibble&gt; 1.84 33.9 19.9 4 1.56 ## 7 1 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; &lt;tibble&gt; 1.94 27.3 18.9 4 2.19 ## 8 1 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; &lt;tibble&gt; 2.14 26 16.7 5 2.21 ## 9 1 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; &lt;tibble&gt; 1.51 30.4 16.9 5 1.77 ## 10 1 &lt;tibble&gt; &lt;lm&gt; &lt;tibble&gt; &lt;tibble&gt; 3.17 15.8 14.5 5 3.15 ## # … with 22 more rows, and 5 more variables: .resid &lt;dbl&gt;, .hat &lt;dbl&gt;, ## # .sigma &lt;dbl&gt;, .cooksd &lt;dbl&gt;, .std.resid &lt;dbl&gt; By combining the estimates and p-values across all groups into the same tidy data frame (instead of a list of output model objects), a new class of analyses and visualizations becomes straightforward. This includes Sorting by p-value or estimate to find the most significant terms across all tests P-value histograms Volcano plots comparing p-values to effect size estimates In each of these cases, we can easily filter, facet, or distinguish based on the term column. In short, this makes the tools of tidy data analysis available for the results of data analysis and models, not just the inputs. 6.1 Tidy bootstrapping Another place where combining model fits in a tidy way becomes useful is when performing bootstrapping or permutation tests. These approaches have been explored before, for instance by Andrew MacDonald here, and Hadley has explored efficient support for bootstrapping as a potential enhancement to dplyr. broom fits naturally with dplyr in performing these analyses. Bootstrapping consists of randomly sampling a dataset with replacement, then performing the analysis individually on each bootstrapped replicate. The variation in the resulting estimate is then a reasonable approximation of the variance in our estimate. Let’s say we want to fit a nonlinear model to the weight/mileage relationship in the mtcars dataset. library(ggplot2) theme_set(theme_minimal()) ggplot(mtcars, aes(mpg, wt)) + geom_point() We might use the method of nonlinear least squares (via the nls function) to fit a model. nlsfit &lt;- nls(mpg ~ k / wt + b, mtcars, start = list(k = 1, b = 0)) summary(nlsfit) ## ## Formula: mpg ~ k/wt + b ## ## Parameters: ## Estimate Std. Error t value Pr(&gt;|t|) ## k 45.829 4.249 10.786 7.64e-12 *** ## b 4.386 1.536 2.855 0.00774 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.774 on 30 degrees of freedom ## ## Number of iterations to convergence: 1 ## Achieved convergence tolerance: 2.877e-08 ggplot(mtcars, aes(wt, mpg)) + geom_point() + geom_line(aes(y = predict(nlsfit))) While this does provide a p-value and confidence intervals for the parameters, these are based on model assumptions that may not hold in real data. Bootstrapping is a popular method for providing confidence intervals and predictions that are more robust to the nature of the data. We can use the bootstraps function in the rsample package to sample bootstrap replications. First, we construct 100 bootstrap replications of the data, each of which has been randomly sampled with replacement. The resulting object is an rset, which is a dataframe with a column of rsplit objects. An rsplit object has two main components: an analysis dataset and an assessment dataset, accessible via analysis(rsplit) and assessment(rsplit) respectively. For bootstrap samples, the analysis dataset is the bootstrap sample itself, and the assessment dataset consists of all the out of bag samples. library(dplyr) library(rsample) library(broom) library(purrr) library(tidyr) set.seed(27) boots &lt;- bootstraps(mtcars, times = 100) boots ## # Bootstrap sampling ## # A tibble: 100 × 2 ## splits id ## &lt;list&gt; &lt;chr&gt; ## 1 &lt;split [32/13]&gt; Bootstrap001 ## 2 &lt;split [32/10]&gt; Bootstrap002 ## 3 &lt;split [32/13]&gt; Bootstrap003 ## 4 &lt;split [32/11]&gt; Bootstrap004 ## 5 &lt;split [32/9]&gt; Bootstrap005 ## 6 &lt;split [32/10]&gt; Bootstrap006 ## 7 &lt;split [32/11]&gt; Bootstrap007 ## 8 &lt;split [32/13]&gt; Bootstrap008 ## 9 &lt;split [32/11]&gt; Bootstrap009 ## 10 &lt;split [32/11]&gt; Bootstrap010 ## # … with 90 more rows We create a helper function to fit an nls model on each bootstrap sample, and then use purrr::map to apply this function to all the bootstrap samples at once. Similarly, we create a column of tidy coefficient information by unnesting. fit_nls_on_bootstrap &lt;- function(split) { nls(mpg ~ k / wt + b, analysis(split), start = list(k = 1, b = 0)) } boot_models &lt;- boots %&gt;% mutate(model = map(splits, fit_nls_on_bootstrap), coef_info = map(model, tidy)) boot_models ## # Bootstrap sampling ## # A tibble: 100 × 4 ## splits id model coef_info ## &lt;list&gt; &lt;chr&gt; &lt;list&gt; &lt;list&gt; ## 1 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; &lt;tibble [2 × 5]&gt; ## 2 &lt;split [32/10]&gt; Bootstrap002 &lt;nls&gt; &lt;tibble [2 × 5]&gt; ## 3 &lt;split [32/13]&gt; Bootstrap003 &lt;nls&gt; &lt;tibble [2 × 5]&gt; ## 4 &lt;split [32/11]&gt; Bootstrap004 &lt;nls&gt; &lt;tibble [2 × 5]&gt; ## 5 &lt;split [32/9]&gt; Bootstrap005 &lt;nls&gt; &lt;tibble [2 × 5]&gt; ## 6 &lt;split [32/10]&gt; Bootstrap006 &lt;nls&gt; &lt;tibble [2 × 5]&gt; ## 7 &lt;split [32/11]&gt; Bootstrap007 &lt;nls&gt; &lt;tibble [2 × 5]&gt; ## 8 &lt;split [32/13]&gt; Bootstrap008 &lt;nls&gt; &lt;tibble [2 × 5]&gt; ## 9 &lt;split [32/11]&gt; Bootstrap009 &lt;nls&gt; &lt;tibble [2 × 5]&gt; ## 10 &lt;split [32/11]&gt; Bootstrap010 &lt;nls&gt; &lt;tibble [2 × 5]&gt; ## # … with 90 more rows boot_coefs &lt;- boot_models %&gt;% unnest(coef_info) The unnested coefficient information contains a summary of each replication combined in a single data frame: boot_coefs ## # A tibble: 200 × 8 ## splits id model term estimate std.error stati…¹ p.value ## &lt;list&gt; &lt;chr&gt; &lt;list&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; k 42.1 4.05 10.4 1.91e-11 ## 2 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; b 5.39 1.43 3.78 6.93e- 4 ## 3 &lt;split [32/10]&gt; Bootstrap002 &lt;nls&gt; k 49.9 5.66 8.82 7.82e-10 ## 4 &lt;split [32/10]&gt; Bootstrap002 &lt;nls&gt; b 3.73 1.92 1.94 6.13e- 2 ## 5 &lt;split [32/13]&gt; Bootstrap003 &lt;nls&gt; k 37.8 2.68 14.1 9.01e-15 ## 6 &lt;split [32/13]&gt; Bootstrap003 &lt;nls&gt; b 6.73 1.17 5.75 2.78e- 6 ## 7 &lt;split [32/11]&gt; Bootstrap004 &lt;nls&gt; k 45.6 4.45 10.2 2.70e-11 ## 8 &lt;split [32/11]&gt; Bootstrap004 &lt;nls&gt; b 4.75 1.62 2.93 6.38e- 3 ## 9 &lt;split [32/9]&gt; Bootstrap005 &lt;nls&gt; k 43.6 4.63 9.41 1.85e-10 ## 10 &lt;split [32/9]&gt; Bootstrap005 &lt;nls&gt; b 5.89 1.68 3.51 1.44e- 3 ## # … with 190 more rows, and abbreviated variable name ¹​statistic We can then calculate confidence intervals (using what is called the percentile method): alpha &lt;- .05 boot_coefs %&gt;% group_by(term) %&gt;% summarize(low = quantile(estimate, alpha / 2), high = quantile(estimate, 1 - alpha / 2)) ## # A tibble: 2 × 3 ## term low high ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 b 0.283 6.74 ## 2 k 38.5 57.6 Or we can use histograms to get a more detailed idea of the uncertainty in each estimate: ggplot(boot_coefs, aes(estimate)) + geom_histogram(binwidth = 2) + facet_wrap(~ term, scales = &quot;free&quot;) Or we can use augment to visualize the uncertainty in the curve: boot_aug &lt;- boot_models %&gt;% mutate(augmented = map(model, augment)) %&gt;% unnest(augmented) boot_aug ## # A tibble: 3,200 × 8 ## splits id model coef_info mpg wt .fitted .resid ## &lt;list&gt; &lt;chr&gt; &lt;list&gt; &lt;list&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; &lt;tibble&gt; 18.7 3.44 17.6 1.08 ## 2 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; &lt;tibble&gt; 32.4 2.2 24.5 7.89 ## 3 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; &lt;tibble&gt; 15.5 3.52 17.3 -1.84 ## 4 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; &lt;tibble&gt; 22.8 3.15 18.7 4.05 ## 5 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; &lt;tibble&gt; 24.4 3.19 18.6 5.82 ## 6 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; &lt;tibble&gt; 30.4 1.62 31.4 -1.04 ## 7 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; &lt;tibble&gt; 10.4 5.42 13.1 -2.75 ## 8 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; &lt;tibble&gt; 21 2.62 21.4 -0.448 ## 9 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; &lt;tibble&gt; 19.2 3.84 16.3 2.87 ## 10 &lt;split [32/13]&gt; Bootstrap001 &lt;nls&gt; &lt;tibble&gt; 21 2.62 21.4 -0.448 ## # … with 3,190 more rows ggplot(boot_aug, aes(wt, mpg)) + geom_point() + geom_line(aes(y = .fitted, group = id), alpha=.2) With only a few small changes, we could easily perform bootstrapping with other kinds of predictive or hypothesis testing models, since the tidy and augment functions works for many statistical outputs. As another example, we could use smooth.spline, which fits a cubic smoothing spline to data: fit_spline_on_bootstrap &lt;- function(split) { data &lt;- analysis(split) smooth.spline(data$wt, data$mpg, df = 4) } boot_splines &lt;- boots %&gt;% mutate(spline = map(splits, fit_spline_on_bootstrap), aug_train = map(spline, augment)) splines_aug &lt;- boot_splines %&gt;% unnest(aug_train) ggplot(splines_aug, aes(x, y)) + geom_point() + geom_line(aes(y = .fitted, group = id), alpha = 0.2) 6.2 links https://www.youtube.com/watch?v=1bnhT8tlCJQ&amp;list=PLBnFxG6owe1F-3y0_aphRZ5YHH06Qr1Kj https://bookdown.org/bruno_lucian_costa/CursoIntermediarioR/tidyr.html https://bookdown.org/Maxine/r4ds/nesting.html https://livro.curso-r.com/7-3-tidyr.html http://leg.ufpr.br/~walmes/cursoR/data-vis/slides/04-tidyr.pdf "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
